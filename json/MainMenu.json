{"nodes" : [{"id" : 0, "x" : 6600, "y" : 50, "width" : 500, "height" : 700, "title" : "C&cl;&bkslash;Users&bkslash;shuklp.CORP&bkslash;Documents&bkslash;MS&bkslash;CSYE 6220&bkslash;MainMenu&bkslash;jsplatformer12.html", "txt" : "<!DOCTYPE HTML PUBLIC &quote;-//W3C//DTD HTML 4.01//EN&quote;>&nl;<html lang=&quote;en&quote;>&nl;<head>&nl;    <title>JavaScript Platformer 12</title>&nl;&tb;<script type=&quote;text/javascript&quote; src=&quote;prototype-1.6.0.3.js&quote;></script>&nl;    <script type=&quote;text/javascript&quote; src=&quote;ResourceManager.js&quote;></script>&nl;    <script type=&quote;text/javascript&quote; src=&quote;Rectangle.js&quote;></script>&nl;    <script type=&quote;text/javascript&quote; src=&quote;GameObject.js&quote;></script>&nl;&tb;<script type=&quote;text/javascript&quote; src=&quote;VisualGameObject.js&quote;></script>&nl;&tb;<script type=&quote;text/javascript&quote; src=&quote;RepeatingGameObject.js&quote;></script>&nl;    <script type=&quote;text/javascript&quote; src=&quote;AnimatedGameObject.js&quote;></script>&nl;&tb;<script type=&quote;text/javascript&quote; src=&quote;MainMenu.js&quote;></script>&nl;    <script type=&quote;text/javascript&quote; src=&quote;Player.js&quote;></script>&nl;    <script type=&quote;text/javascript&quote; src=&quote;LevelEndPost.js&quote;></script>&nl;    <script type=&quote;text/javascript&quote; src=&quote;Powerup.js&quote;></script>&nl;    <script type=&quote;text/javascript&quote; src=&quote;Level.js&quote;></script>&nl;    <script type=&quote;text/javascript&quote; src=&quote;Utils.js&quote;></script>&nl;    <script type=&quote;text/javascript&quote; src=&quote;ApplicationManager.js&quote;></script>    &nl;    <script type=&quote;text/javascript&quote; src=&quote;GameObjectManager.js&quote;></script>&nl;    <script type=&quote;text/javascript&quote; src=&quote;Main.js&quote;></script>&nl;&tb;<style type=&quote;text/css&quote;>&nl;&tb;&tb;body &obraces; font-family&cl; Arial&cm;Helvetica&cm;sans-serif;&cbraces;&nl;&tb;</style>&nl;</head>&nl;<body>&nl;    <p>&nl;&tb;&tb;<a href=&quote;http&cl;//www.brighthub.com/internet/web-development/articles/38364.aspx&quote;>&nl;&tb;&tb;&tb;Game Development with Javascript and the canvas element&nl;&tb;&tb;</a>&nl;&tb;</p>&nl;    <canvas id=&quote;canvas&quote; width=&quote;600&quote; height=&quote;400&quote;>&nl;        <p>&nl;            Your browser does not support the canvas element.&nl;        </p>&nl;    </canvas>&nl;    <div>Current Score </div>&nl;    <div id=&quote;Score&quote;>0</div>&nl;</body>&nl;</html>&nl;"},{"id" : 1, "x" : 7200, "y" : 50, "width" : 500, "height" : 700, "title" : "C&cl;&bkslash;Users&bkslash;shuklp.CORP&bkslash;Documents&bkslash;MS&bkslash;CSYE 6220&bkslash;MainMenu&bkslash;prototype-1.6.0.3.js", "txt" : "/*  Prototype JavaScript framework&cm; version 1.6.0.3&nl; *  (c) 2005-2008 Sam Stephenson&nl; *&nl; *  Prototype is freely distributable under the terms of an MIT-style license.&nl; *  For details&cm; see the Prototype web site&cl; http&cl;//www.prototypejs.org/&nl; *&nl; *--------------------------------------------------------------------------*/&nl;&nl;var Prototype = &obraces;&nl;  Version&cl; &squote;1.6.0.3&squote;&cm;&nl;&nl;  Browser&cl; &obraces;&nl;    IE&cl;     !!(window.attachEvent &&&nl;      navigator.userAgent.indexOf(&squote;Opera&squote;) === -1)&cm;&nl;    Opera&cl;  navigator.userAgent.indexOf(&squote;Opera&squote;) > -1&cm;&nl;    WebKit&cl; navigator.userAgent.indexOf(&squote;AppleWebKit/&squote;) > -1&cm;&nl;    Gecko&cl;  navigator.userAgent.indexOf(&squote;Gecko&squote;) > -1 &&&nl;      navigator.userAgent.indexOf(&squote;KHTML&squote;) === -1&cm;&nl;    MobileSafari&cl; !!navigator.userAgent.match(/Apple.*Mobile.*Safari/)&nl;  &cbraces;&cm;&nl;&nl;  BrowserFeatures&cl; &obraces;&nl;    XPath&cl; !!document.evaluate&cm;&nl;    SelectorsAPI&cl; !!document.querySelector&cm;&nl;    ElementExtensions&cl; !!window.HTMLElement&cm;&nl;    SpecificElementExtensions&cl;&nl;      document.createElement(&squote;div&squote;)[&squote;__proto__&squote;] &&&nl;      document.createElement(&squote;div&squote;)[&squote;__proto__&squote;] !==&nl;        document.createElement(&squote;form&squote;)[&squote;__proto__&squote;]&nl;  &cbraces;&cm;&nl;&nl;  ScriptFragment&cl; &squote;<script[^>]*>([&bkslash;&bkslash;S&bkslash;&bkslash;s]*?)<&bkslash;/script>&squote;&cm;&nl;  JSONFilter&cl; /^&bkslash;/&bkslash;*-secure-([&bkslash;s&bkslash;S]*)&bkslash;*&bkslash;/&bkslash;s*$/&cm;&nl;&nl;  emptyFunction&cl; function() &obraces; &cbraces;&cm;&nl;  K&cl; function(x) &obraces; return x &cbraces;&nl;&cbraces;;&nl;&nl;if (Prototype.Browser.MobileSafari)&nl;  Prototype.BrowserFeatures.SpecificElementExtensions = false;&nl;&nl;&nl;/* Based on Alex Arnell&squote;s inheritance implementation. */&nl;var Class = &obraces;&nl;  create&cl; function() &obraces;&nl;    var parent = null&cm; properties = $A(arguments);&nl;    if (Object.isFunction(properties[0]))&nl;      parent = properties.shift();&nl;&nl;    function klass() &obraces;&nl;      this.initialize.apply(this&cm; arguments);&nl;    &cbraces;&nl;&nl;    Object.extend(klass&cm; Class.Methods);&nl;    klass.superclass = parent;&nl;    klass.subclasses = [];&nl;&nl;    if (parent) &obraces;&nl;      var subclass = function() &obraces; &cbraces;;&nl;      subclass.prototype = parent.prototype;&nl;      klass.prototype = new subclass;&nl;      parent.subclasses.push(klass);&nl;    &cbraces;&nl;&nl;    for (var i = 0; i < properties.length; i++)&nl;      klass.addMethods(properties[i]);&nl;&nl;    if (!klass.prototype.initialize)&nl;      klass.prototype.initialize = Prototype.emptyFunction;&nl;&nl;    klass.prototype.constructor = klass;&nl;&nl;    return klass;&nl;  &cbraces;&nl;&cbraces;;&nl;&nl;Class.Methods = &obraces;&nl;  addMethods&cl; function(source) &obraces;&nl;    var ancestor   = this.superclass && this.superclass.prototype;&nl;    var properties = Object.keys(source);&nl;&nl;    if (!Object.keys(&obraces; toString&cl; true &cbraces;).length)&nl;      properties.push(&quote;toString&quote;&cm; &quote;valueOf&quote;);&nl;&nl;    for (var i = 0&cm; length = properties.length; i < length; i++) &obraces;&nl;      var property = properties[i]&cm; value = source[property];&nl;      if (ancestor && Object.isFunction(value) &&&nl;          value.argumentNames().first() == &quote;$super&quote;) &obraces;&nl;        var method = value;&nl;        value = (function(m) &obraces;&nl;          return function() &obraces; return ancestor[m].apply(this&cm; arguments) &cbraces;;&nl;        &cbraces;)(property).wrap(method);&nl;&nl;        value.valueOf = method.valueOf.bind(method);&nl;        value.toString = method.toString.bind(method);&nl;      &cbraces;&nl;      this.prototype[property] = value;&nl;    &cbraces;&nl;&nl;    return this;&nl;  &cbraces;&nl;&cbraces;;&nl;&nl;var Abstract = &obraces; &cbraces;;&nl;&nl;Object.extend = function(destination&cm; source) &obraces;&nl;  for (var property in source)&nl;    destination[property] = source[property];&nl;  return destination;&nl;&cbraces;;&nl;&nl;Object.extend(Object&cm; &obraces;&nl;  inspect&cl; function(object) &obraces;&nl;    try &obraces;&nl;      if (Object.isUndefined(object)) return &squote;undefined&squote;;&nl;      if (object === null) return &squote;null&squote;;&nl;      return object.inspect ? object.inspect() &cl; String(object);&nl;    &cbraces; catch (e) &obraces;&nl;      if (e instanceof RangeError) return &squote;...&squote;;&nl;      throw e;&nl;    &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  toJSON&cl; function(object) &obraces;&nl;    var type = typeof object;&nl;    switch (type) &obraces;&nl;      case &squote;undefined&squote;&cl;&nl;      case &squote;function&squote;&cl;&nl;      case &squote;unknown&squote;&cl; return;&nl;      case &squote;boolean&squote;&cl; return object.toString();&nl;    &cbraces;&nl;&nl;    if (object === null) return &squote;null&squote;;&nl;    if (object.toJSON) return object.toJSON();&nl;    if (Object.isElement(object)) return;&nl;&nl;    var results = [];&nl;    for (var property in object) &obraces;&nl;      var value = Object.toJSON(object[property]);&nl;      if (!Object.isUndefined(value))&nl;        results.push(property.toJSON() + &squote;&cl; &squote; + value);&nl;    &cbraces;&nl;&nl;    return &squote;&obraces;&squote; + results.join(&squote;&cm; &squote;) + &squote;&cbraces;&squote;;&nl;  &cbraces;&cm;&nl;&nl;  toQueryString&cl; function(object) &obraces;&nl;    return $H(object).toQueryString();&nl;  &cbraces;&cm;&nl;&nl;  toHTML&cl; function(object) &obraces;&nl;    return object && object.toHTML ? object.toHTML() &cl; String.interpret(object);&nl;  &cbraces;&cm;&nl;&nl;  keys&cl; function(object) &obraces;&nl;    var keys = [];&nl;    for (var property in object)&nl;      keys.push(property);&nl;    return keys;&nl;  &cbraces;&cm;&nl;&nl;  values&cl; function(object) &obraces;&nl;    var values = [];&nl;    for (var property in object)&nl;      values.push(object[property]);&nl;    return values;&nl;  &cbraces;&cm;&nl;&nl;  clone&cl; function(object) &obraces;&nl;    return Object.extend(&obraces; &cbraces;&cm; object);&nl;  &cbraces;&cm;&nl;&nl;  isElement&cl; function(object) &obraces;&nl;    return !!(object && object.nodeType == 1);&nl;  &cbraces;&cm;&nl;&nl;  isArray&cl; function(object) &obraces;&nl;    return object != null && typeof object == &quote;object&quote; &&&nl;      &squote;splice&squote; in object && &squote;join&squote; in object;&nl;  &cbraces;&cm;&nl;&nl;  isHash&cl; function(object) &obraces;&nl;    return object instanceof Hash;&nl;  &cbraces;&cm;&nl;&nl;  isFunction&cl; function(object) &obraces;&nl;    return typeof object == &quote;function&quote;;&nl;  &cbraces;&cm;&nl;&nl;  isString&cl; function(object) &obraces;&nl;    return typeof object == &quote;string&quote;;&nl;  &cbraces;&cm;&nl;&nl;  isNumber&cl; function(object) &obraces;&nl;    return typeof object == &quote;number&quote;;&nl;  &cbraces;&cm;&nl;&nl;  isUndefined&cl; function(object) &obraces;&nl;    return typeof object == &quote;undefined&quote;;&nl;  &cbraces;&nl;&cbraces;);&nl;&nl;Object.extend(Function.prototype&cm; &obraces;&nl;  argumentNames&cl; function() &obraces;&nl;    var names = this.toString().match(/^[&bkslash;s&bkslash;(]*function[^(]*&bkslash;(([^&bkslash;)]*)&bkslash;)/)[1]&nl;      .replace(/&bkslash;s+/g&cm; &squote;&squote;).split(&squote;&cm;&squote;);&nl;    return names.length == 1 && !names[0] ? [] &cl; names;&nl;  &cbraces;&cm;&nl;&nl;  bind&cl; function() &obraces;&nl;    if (arguments.length < 2 && Object.isUndefined(arguments[0])) return this;&nl;    var __method = this&cm; args = $A(arguments)&cm; object = args.shift();&nl;    return function() &obraces;&nl;      return __method.apply(object&cm; args.concat($A(arguments)));&nl;    &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  bindAsEventListener&cl; function() &obraces;&nl;    var __method = this&cm; args = $A(arguments)&cm; object = args.shift();&nl;    return function(event) &obraces;&nl;      return __method.apply(object&cm; [event || window.event].concat(args));&nl;    &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  curry&cl; function() &obraces;&nl;    if (!arguments.length) return this;&nl;    var __method = this&cm; args = $A(arguments);&nl;    return function() &obraces;&nl;      return __method.apply(this&cm; args.concat($A(arguments)));&nl;    &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  delay&cl; function() &obraces;&nl;    var __method = this&cm; args = $A(arguments)&cm; timeout = args.shift() * 1000;&nl;    return window.setTimeout(function() &obraces;&nl;      return __method.apply(__method&cm; args);&nl;    &cbraces;&cm; timeout);&nl;  &cbraces;&cm;&nl;&nl;  defer&cl; function() &obraces;&nl;    var args = [0.01].concat($A(arguments));&nl;    return this.delay.apply(this&cm; args);&nl;  &cbraces;&cm;&nl;&nl;  wrap&cl; function(wrapper) &obraces;&nl;    var __method = this;&nl;    return function() &obraces;&nl;      return wrapper.apply(this&cm; [__method.bind(this)].concat($A(arguments)));&nl;    &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  methodize&cl; function() &obraces;&nl;    if (this._methodized) return this._methodized;&nl;    var __method = this;&nl;    return this._methodized = function() &obraces;&nl;      return __method.apply(null&cm; [this].concat($A(arguments)));&nl;    &cbraces;;&nl;  &cbraces;&nl;&cbraces;);&nl;&nl;Date.prototype.toJSON = function() &obraces;&nl;  return &squote;&quote;&squote; + this.getUTCFullYear() + &squote;-&squote; +&nl;    (this.getUTCMonth() + 1).toPaddedString(2) + &squote;-&squote; +&nl;    this.getUTCDate().toPaddedString(2) + &squote;T&squote; +&nl;    this.getUTCHours().toPaddedString(2) + &squote;&cl;&squote; +&nl;    this.getUTCMinutes().toPaddedString(2) + &squote;&cl;&squote; +&nl;    this.getUTCSeconds().toPaddedString(2) + &squote;Z&quote;&squote;;&nl;&cbraces;;&nl;&nl;var Try = &obraces;&nl;  these&cl; function() &obraces;&nl;    var returnValue;&nl;&nl;    for (var i = 0&cm; length = arguments.length; i < length; i++) &obraces;&nl;      var lambda = arguments[i];&nl;      try &obraces;&nl;        returnValue = lambda();&nl;        break;&nl;      &cbraces; catch (e) &obraces; &cbraces;&nl;    &cbraces;&nl;&nl;    return returnValue;&nl;  &cbraces;&nl;&cbraces;;&nl;&nl;RegExp.prototype.match = RegExp.prototype.test;&nl;&nl;RegExp.escape = function(str) &obraces;&nl;  return String(str).replace(/([.*+?^=!&cl;$&obraces;&cbraces;()|[&bkslash;]&bkslash;/&bkslash;&bkslash;])/g&cm; &squote;&bkslash;&bkslash;$1&squote;);&nl;&cbraces;;&nl;&nl;/*--------------------------------------------------------------------------*/&nl;&nl;var PeriodicalExecuter = Class.create(&obraces;&nl;  initialize&cl; function(callback&cm; frequency) &obraces;&nl;    this.callback = callback;&nl;    this.frequency = frequency;&nl;    this.currentlyExecuting = false;&nl;&nl;    this.registerCallback();&nl;  &cbraces;&cm;&nl;&nl;  registerCallback&cl; function() &obraces;&nl;    this.timer = setInterval(this.onTimerEvent.bind(this)&cm; this.frequency * 1000);&nl;  &cbraces;&cm;&nl;&nl;  execute&cl; function() &obraces;&nl;    this.callback(this);&nl;  &cbraces;&cm;&nl;&nl;  stop&cl; function() &obraces;&nl;    if (!this.timer) return;&nl;    clearInterval(this.timer);&nl;    this.timer = null;&nl;  &cbraces;&cm;&nl;&nl;  onTimerEvent&cl; function() &obraces;&nl;    if (!this.currentlyExecuting) &obraces;&nl;      try &obraces;&nl;        this.currentlyExecuting = true;&nl;        this.execute();&nl;      &cbraces; finally &obraces;&nl;        this.currentlyExecuting = false;&nl;      &cbraces;&nl;    &cbraces;&nl;  &cbraces;&nl;&cbraces;);&nl;Object.extend(String&cm; &obraces;&nl;  interpret&cl; function(value) &obraces;&nl;    return value == null ? &squote;&squote; &cl; String(value);&nl;  &cbraces;&cm;&nl;  specialChar&cl; &obraces;&nl;    &squote;&bkslash;b&squote;&cl; &squote;&bkslash;&bkslash;b&squote;&cm;&nl;    &squote;&bkslash;t&squote;&cl; &squote;&bkslash;&bkslash;t&squote;&cm;&nl;    &squote;&bkslash;n&squote;&cl; &squote;&bkslash;&bkslash;n&squote;&cm;&nl;    &squote;&bkslash;f&squote;&cl; &squote;&bkslash;&bkslash;f&squote;&cm;&nl;    &squote;&bkslash;r&squote;&cl; &squote;&bkslash;&bkslash;r&squote;&cm;&nl;    &squote;&bkslash;&bkslash;&squote;&cl; &squote;&bkslash;&bkslash;&bkslash;&bkslash;&squote;&nl;  &cbraces;&nl;&cbraces;);&nl;&nl;Object.extend(String.prototype&cm; &obraces;&nl;  gsub&cl; function(pattern&cm; replacement) &obraces;&nl;    var result = &squote;&squote;&cm; source = this&cm; match;&nl;    replacement = arguments.callee.prepareReplacement(replacement);&nl;&nl;    while (source.length > 0) &obraces;&nl;      if (match = source.match(pattern)) &obraces;&nl;        result += source.slice(0&cm; match.index);&nl;        result += String.interpret(replacement(match));&nl;        source  = source.slice(match.index + match[0].length);&nl;      &cbraces; else &obraces;&nl;        result += source&cm; source = &squote;&squote;;&nl;      &cbraces;&nl;    &cbraces;&nl;    return result;&nl;  &cbraces;&cm;&nl;&nl;  sub&cl; function(pattern&cm; replacement&cm; count) &obraces;&nl;    replacement = this.gsub.prepareReplacement(replacement);&nl;    count = Object.isUndefined(count) ? 1 &cl; count;&nl;&nl;    return this.gsub(pattern&cm; function(match) &obraces;&nl;      if (--count < 0) return match[0];&nl;      return replacement(match);&nl;    &cbraces;);&nl;  &cbraces;&cm;&nl;&nl;  scan&cl; function(pattern&cm; iterator) &obraces;&nl;    this.gsub(pattern&cm; iterator);&nl;    return String(this);&nl;  &cbraces;&cm;&nl;&nl;  truncate&cl; function(length&cm; truncation) &obraces;&nl;    length = length || 30;&nl;    truncation = Object.isUndefined(truncation) ? &squote;...&squote; &cl; truncation;&nl;    return this.length > length ?&nl;      this.slice(0&cm; length - truncation.length) + truncation &cl; String(this);&nl;  &cbraces;&cm;&nl;&nl;  strip&cl; function() &obraces;&nl;    return this.replace(/^&bkslash;s+/&cm; &squote;&squote;).replace(/&bkslash;s+$/&cm; &squote;&squote;);&nl;  &cbraces;&cm;&nl;&nl;  stripTags&cl; function() &obraces;&nl;    return this.replace(/<&bkslash;/?[^>]+>/gi&cm; &squote;&squote;);&nl;  &cbraces;&cm;&nl;&nl;  stripScripts&cl; function() &obraces;&nl;    return this.replace(new RegExp(Prototype.ScriptFragment&cm; &squote;img&squote;)&cm; &squote;&squote;);&nl;  &cbraces;&cm;&nl;&nl;  extractScripts&cl; function() &obraces;&nl;    var matchAll = new RegExp(Prototype.ScriptFragment&cm; &squote;img&squote;);&nl;    var matchOne = new RegExp(Prototype.ScriptFragment&cm; &squote;im&squote;);&nl;    return (this.match(matchAll) || []).map(function(scriptTag) &obraces;&nl;      return (scriptTag.match(matchOne) || [&squote;&squote;&cm; &squote;&squote;])[1];&nl;    &cbraces;);&nl;  &cbraces;&cm;&nl;&nl;  evalScripts&cl; function() &obraces;&nl;    return this.extractScripts().map(function(script) &obraces; return eval(script) &cbraces;);&nl;  &cbraces;&cm;&nl;&nl;  escapeHTML&cl; function() &obraces;&nl;    var self = arguments.callee;&nl;    self.text.data = this;&nl;    return self.div.innerHTML;&nl;  &cbraces;&cm;&nl;&nl;  unescapeHTML&cl; function() &obraces;&nl;    var div = new Element(&squote;div&squote;);&nl;    div.innerHTML = this.stripTags();&nl;    return div.childNodes[0] ? (div.childNodes.length > 1 ?&nl;      $A(div.childNodes).inject(&squote;&squote;&cm; function(memo&cm; node) &obraces; return memo+node.nodeValue &cbraces;) &cl;&nl;      div.childNodes[0].nodeValue) &cl; &squote;&squote;;&nl;  &cbraces;&cm;&nl;&nl;  toQueryParams&cl; function(separator) &obraces;&nl;    var match = this.strip().match(/([^?#]*)(#.*)?$/);&nl;    if (!match) return &obraces; &cbraces;;&nl;&nl;    return match[1].split(separator || &squote;&&squote;).inject(&obraces; &cbraces;&cm; function(hash&cm; pair) &obraces;&nl;      if ((pair = pair.split(&squote;=&squote;))[0]) &obraces;&nl;        var key = decodeURIComponent(pair.shift());&nl;        var value = pair.length > 1 ? pair.join(&squote;=&squote;) &cl; pair[0];&nl;        if (value != undefined) value = decodeURIComponent(value);&nl;&nl;        if (key in hash) &obraces;&nl;          if (!Object.isArray(hash[key])) hash[key] = [hash[key]];&nl;          hash[key].push(value);&nl;        &cbraces;&nl;        else hash[key] = value;&nl;      &cbraces;&nl;      return hash;&nl;    &cbraces;);&nl;  &cbraces;&cm;&nl;&nl;  toArray&cl; function() &obraces;&nl;    return this.split(&squote;&squote;);&nl;  &cbraces;&cm;&nl;&nl;  succ&cl; function() &obraces;&nl;    return this.slice(0&cm; this.length - 1) +&nl;      String.fromCharCode(this.charCodeAt(this.length - 1) + 1);&nl;  &cbraces;&cm;&nl;&nl;  times&cl; function(count) &obraces;&nl;    return count < 1 ? &squote;&squote; &cl; new Array(count + 1).join(this);&nl;  &cbraces;&cm;&nl;&nl;  camelize&cl; function() &obraces;&nl;    var parts = this.split(&squote;-&squote;)&cm; len = parts.length;&nl;    if (len == 1) return parts[0];&nl;&nl;    var camelized = this.charAt(0) == &squote;-&squote;&nl;      ? parts[0].charAt(0).toUpperCase() + parts[0].substring(1)&nl;      &cl; parts[0];&nl;&nl;    for (var i = 1; i < len; i++)&nl;      camelized += parts[i].charAt(0).toUpperCase() + parts[i].substring(1);&nl;&nl;    return camelized;&nl;  &cbraces;&cm;&nl;&nl;  capitalize&cl; function() &obraces;&nl;    return this.charAt(0).toUpperCase() + this.substring(1).toLowerCase();&nl;  &cbraces;&cm;&nl;&nl;  underscore&cl; function() &obraces;&nl;    return this.gsub(/&cl;&cl;/&cm; &squote;/&squote;).gsub(/([A-Z]+)([A-Z][a-z])/&cm;&squote;#&obraces;1&cbraces;_#&obraces;2&cbraces;&squote;).gsub(/([a-z&bkslash;d])([A-Z])/&cm;&squote;#&obraces;1&cbraces;_#&obraces;2&cbraces;&squote;).gsub(/-/&cm;&squote;_&squote;).toLowerCase();&nl;  &cbraces;&cm;&nl;&nl;  dasherize&cl; function() &obraces;&nl;    return this.gsub(/_/&cm;&squote;-&squote;);&nl;  &cbraces;&cm;&nl;&nl;  inspect&cl; function(useDoubleQuotes) &obraces;&nl;    var escapedString = this.gsub(/[&bkslash;x00-&bkslash;x1f&bkslash;&bkslash;]/&cm; function(match) &obraces;&nl;      var character = String.specialChar[match[0]];&nl;      return character ? character &cl; &squote;&bkslash;&bkslash;u00&squote; + match[0].charCodeAt().toPaddedString(2&cm; 16);&nl;    &cbraces;);&nl;    if (useDoubleQuotes) return &squote;&quote;&squote; + escapedString.replace(/&quote;/g&cm; &squote;&bkslash;&bkslash;&quote;&squote;) + &squote;&quote;&squote;;&nl;    return &quote;&squote;&quote; + escapedString.replace(/&squote;/g&cm; &squote;&bkslash;&bkslash;&bkslash;&squote;&squote;) + &quote;&squote;&quote;;&nl;  &cbraces;&cm;&nl;&nl;  toJSON&cl; function() &obraces;&nl;    return this.inspect(true);&nl;  &cbraces;&cm;&nl;&nl;  unfilterJSON&cl; function(filter) &obraces;&nl;    return this.sub(filter || Prototype.JSONFilter&cm; &squote;#&obraces;1&cbraces;&squote;);&nl;  &cbraces;&cm;&nl;&nl;  isJSON&cl; function() &obraces;&nl;    var str = this;&nl;    if (str.blank()) return false;&nl;    str = this.replace(/&bkslash;&bkslash;./g&cm; &squote;@&squote;).replace(/&quote;[^&quote;&bkslash;&bkslash;&bkslash;n&bkslash;r]*&quote;/g&cm; &squote;&squote;);&nl;    return (/^[&cm;&cl;&obraces;&cbraces;&bkslash;[&bkslash;]0-9.&bkslash;-+Eaeflnr-u &bkslash;n&bkslash;r&bkslash;t]*$/).test(str);&nl;  &cbraces;&cm;&nl;&nl;  evalJSON&cl; function(sanitize) &obraces;&nl;    var json = this.unfilterJSON();&nl;    try &obraces;&nl;      if (!sanitize || json.isJSON()) return eval(&squote;(&squote; + json + &squote;)&squote;);&nl;    &cbraces; catch (e) &obraces; &cbraces;&nl;    throw new SyntaxError(&squote;Badly formed JSON string&cl; &squote; + this.inspect());&nl;  &cbraces;&cm;&nl;&nl;  include&cl; function(pattern) &obraces;&nl;    return this.indexOf(pattern) > -1;&nl;  &cbraces;&cm;&nl;&nl;  startsWith&cl; function(pattern) &obraces;&nl;    return this.indexOf(pattern) === 0;&nl;  &cbraces;&cm;&nl;&nl;  endsWith&cl; function(pattern) &obraces;&nl;    var d = this.length - pattern.length;&nl;    return d >= 0 && this.lastIndexOf(pattern) === d;&nl;  &cbraces;&cm;&nl;&nl;  empty&cl; function() &obraces;&nl;    return this == &squote;&squote;;&nl;  &cbraces;&cm;&nl;&nl;  blank&cl; function() &obraces;&nl;    return /^&bkslash;s*$/.test(this);&nl;  &cbraces;&cm;&nl;&nl;  interpolate&cl; function(object&cm; pattern) &obraces;&nl;    return new Template(this&cm; pattern).evaluate(object);&nl;  &cbraces;&nl;&cbraces;);&nl;&nl;if (Prototype.Browser.WebKit || Prototype.Browser.IE) Object.extend(String.prototype&cm; &obraces;&nl;  escapeHTML&cl; function() &obraces;&nl;    return this.replace(/&/g&cm;&squote;&amp;&squote;).replace(/</g&cm;&squote;&lt;&squote;).replace(/>/g&cm;&squote;&gt;&squote;);&nl;  &cbraces;&cm;&nl;  unescapeHTML&cl; function() &obraces;&nl;    return this.stripTags().replace(/&amp;/g&cm;&squote;&&squote;).replace(/&lt;/g&cm;&squote;<&squote;).replace(/&gt;/g&cm;&squote;>&squote;);&nl;  &cbraces;&nl;&cbraces;);&nl;&nl;String.prototype.gsub.prepareReplacement = function(replacement) &obraces;&nl;  if (Object.isFunction(replacement)) return replacement;&nl;  var template = new Template(replacement);&nl;  return function(match) &obraces; return template.evaluate(match) &cbraces;;&nl;&cbraces;;&nl;&nl;String.prototype.parseQuery = String.prototype.toQueryParams;&nl;&nl;Object.extend(String.prototype.escapeHTML&cm; &obraces;&nl;  div&cl;  document.createElement(&squote;div&squote;)&cm;&nl;  text&cl; document.createTextNode(&squote;&squote;)&nl;&cbraces;);&nl;&nl;String.prototype.escapeHTML.div.appendChild(String.prototype.escapeHTML.text);&nl;&nl;var Template = Class.create(&obraces;&nl;  initialize&cl; function(template&cm; pattern) &obraces;&nl;    this.template = template.toString();&nl;    this.pattern = pattern || Template.Pattern;&nl;  &cbraces;&cm;&nl;&nl;  evaluate&cl; function(object) &obraces;&nl;    if (Object.isFunction(object.toTemplateReplacements))&nl;      object = object.toTemplateReplacements();&nl;&nl;    return this.template.gsub(this.pattern&cm; function(match) &obraces;&nl;      if (object == null) return &squote;&squote;;&nl;&nl;      var before = match[1] || &squote;&squote;;&nl;      if (before == &squote;&bkslash;&bkslash;&squote;) return match[2];&nl;&nl;      var ctx = object&cm; expr = match[3];&nl;      var pattern = /^([^.[]+|&bkslash;[((?&cl;.*?[^&bkslash;&bkslash;])?)&bkslash;])(&bkslash;.|&bkslash;[|$)/;&nl;      match = pattern.exec(expr);&nl;      if (match == null) return before;&nl;&nl;      while (match != null) &obraces;&nl;        var comp = match[1].startsWith(&squote;[&squote;) ? match[2].gsub(&squote;&bkslash;&bkslash;&bkslash;&bkslash;]&squote;&cm; &squote;]&squote;) &cl; match[1];&nl;        ctx = ctx[comp];&nl;        if (null == ctx || &squote;&squote; == match[3]) break;&nl;        expr = expr.substring(&squote;[&squote; == match[3] ? match[1].length &cl; match[0].length);&nl;        match = pattern.exec(expr);&nl;      &cbraces;&nl;&nl;      return before + String.interpret(ctx);&nl;    &cbraces;);&nl;  &cbraces;&nl;&cbraces;);&nl;Template.Pattern = /(^|.|&bkslash;r|&bkslash;n)(#&bkslash;&obraces;(.*?)&bkslash;&cbraces;)/;&nl;&nl;var $break = &obraces; &cbraces;;&nl;&nl;var Enumerable = &obraces;&nl;  each&cl; function(iterator&cm; context) &obraces;&nl;    var index = 0;&nl;    try &obraces;&nl;      this._each(function(value) &obraces;&nl;        iterator.call(context&cm; value&cm; index++);&nl;      &cbraces;);&nl;    &cbraces; catch (e) &obraces;&nl;      if (e != $break) throw e;&nl;    &cbraces;&nl;    return this;&nl;  &cbraces;&cm;&nl;&nl;  eachSlice&cl; function(number&cm; iterator&cm; context) &obraces;&nl;    var index = -number&cm; slices = []&cm; array = this.toArray();&nl;    if (number < 1) return array;&nl;    while ((index += number) < array.length)&nl;      slices.push(array.slice(index&cm; index+number));&nl;    return slices.collect(iterator&cm; context);&nl;  &cbraces;&cm;&nl;&nl;  all&cl; function(iterator&cm; context) &obraces;&nl;    iterator = iterator || Prototype.K;&nl;    var result = true;&nl;    this.each(function(value&cm; index) &obraces;&nl;      result = result && !!iterator.call(context&cm; value&cm; index);&nl;      if (!result) throw $break;&nl;    &cbraces;);&nl;    return result;&nl;  &cbraces;&cm;&nl;&nl;  any&cl; function(iterator&cm; context) &obraces;&nl;    iterator = iterator || Prototype.K;&nl;    var result = false;&nl;    this.each(function(value&cm; index) &obraces;&nl;      if (result = !!iterator.call(context&cm; value&cm; index))&nl;        throw $break;&nl;    &cbraces;);&nl;    return result;&nl;  &cbraces;&cm;&nl;&nl;  collect&cl; function(iterator&cm; context) &obraces;&nl;    iterator = iterator || Prototype.K;&nl;    var results = [];&nl;    this.each(function(value&cm; index) &obraces;&nl;      results.push(iterator.call(context&cm; value&cm; index));&nl;    &cbraces;);&nl;    return results;&nl;  &cbraces;&cm;&nl;&nl;  detect&cl; function(iterator&cm; context) &obraces;&nl;    var result;&nl;    this.each(function(value&cm; index) &obraces;&nl;      if (iterator.call(context&cm; value&cm; index)) &obraces;&nl;        result = value;&nl;        throw $break;&nl;      &cbraces;&nl;    &cbraces;);&nl;    return result;&nl;  &cbraces;&cm;&nl;&nl;  findAll&cl; function(iterator&cm; context) &obraces;&nl;    var results = [];&nl;    this.each(function(value&cm; index) &obraces;&nl;      if (iterator.call(context&cm; value&cm; index))&nl;        results.push(value);&nl;    &cbraces;);&nl;    return results;&nl;  &cbraces;&cm;&nl;&nl;  grep&cl; function(filter&cm; iterator&cm; context) &obraces;&nl;    iterator = iterator || Prototype.K;&nl;    var results = [];&nl;&nl;    if (Object.isString(filter))&nl;      filter = new RegExp(filter);&nl;&nl;    this.each(function(value&cm; index) &obraces;&nl;      if (filter.match(value))&nl;        results.push(iterator.call(context&cm; value&cm; index));&nl;    &cbraces;);&nl;    return results;&nl;  &cbraces;&cm;&nl;&nl;  include&cl; function(object) &obraces;&nl;    if (Object.isFunction(this.indexOf))&nl;      if (this.indexOf(object) != -1) return true;&nl;&nl;    var found = false;&nl;    this.each(function(value) &obraces;&nl;      if (value == object) &obraces;&nl;        found = true;&nl;        throw $break;&nl;      &cbraces;&nl;    &cbraces;);&nl;    return found;&nl;  &cbraces;&cm;&nl;&nl;  inGroupsOf&cl; function(number&cm; fillWith) &obraces;&nl;    fillWith = Object.isUndefined(fillWith) ? null &cl; fillWith;&nl;    return this.eachSlice(number&cm; function(slice) &obraces;&nl;      while(slice.length < number) slice.push(fillWith);&nl;      return slice;&nl;    &cbraces;);&nl;  &cbraces;&cm;&nl;&nl;  inject&cl; function(memo&cm; iterator&cm; context) &obraces;&nl;    this.each(function(value&cm; index) &obraces;&nl;      memo = iterator.call(context&cm; memo&cm; value&cm; index);&nl;    &cbraces;);&nl;    return memo;&nl;  &cbraces;&cm;&nl;&nl;  invoke&cl; function(method) &obraces;&nl;    var args = $A(arguments).slice(1);&nl;    return this.map(function(value) &obraces;&nl;      return value[method].apply(value&cm; args);&nl;    &cbraces;);&nl;  &cbraces;&cm;&nl;&nl;  max&cl; function(iterator&cm; context) &obraces;&nl;    iterator = iterator || Prototype.K;&nl;    var result;&nl;    this.each(function(value&cm; index) &obraces;&nl;      value = iterator.call(context&cm; value&cm; index);&nl;      if (result == null || value >= result)&nl;        result = value;&nl;    &cbraces;);&nl;    return result;&nl;  &cbraces;&cm;&nl;&nl;  min&cl; function(iterator&cm; context) &obraces;&nl;    iterator = iterator || Prototype.K;&nl;    var result;&nl;    this.each(function(value&cm; index) &obraces;&nl;      value = iterator.call(context&cm; value&cm; index);&nl;      if (result == null || value < result)&nl;        result = value;&nl;    &cbraces;);&nl;    return result;&nl;  &cbraces;&cm;&nl;&nl;  partition&cl; function(iterator&cm; context) &obraces;&nl;    iterator = iterator || Prototype.K;&nl;    var trues = []&cm; falses = [];&nl;    this.each(function(value&cm; index) &obraces;&nl;      (iterator.call(context&cm; value&cm; index) ?&nl;        trues &cl; falses).push(value);&nl;    &cbraces;);&nl;    return [trues&cm; falses];&nl;  &cbraces;&cm;&nl;&nl;  pluck&cl; function(property) &obraces;&nl;    var results = [];&nl;    this.each(function(value) &obraces;&nl;      results.push(value[property]);&nl;    &cbraces;);&nl;    return results;&nl;  &cbraces;&cm;&nl;&nl;  reject&cl; function(iterator&cm; context) &obraces;&nl;    var results = [];&nl;    this.each(function(value&cm; index) &obraces;&nl;      if (!iterator.call(context&cm; value&cm; index))&nl;        results.push(value);&nl;    &cbraces;);&nl;    return results;&nl;  &cbraces;&cm;&nl;&nl;  sortBy&cl; function(iterator&cm; context) &obraces;&nl;    return this.map(function(value&cm; index) &obraces;&nl;      return &obraces;&nl;        value&cl; value&cm;&nl;        criteria&cl; iterator.call(context&cm; value&cm; index)&nl;      &cbraces;;&nl;    &cbraces;).sort(function(left&cm; right) &obraces;&nl;      var a = left.criteria&cm; b = right.criteria;&nl;      return a < b ? -1 &cl; a > b ? 1 &cl; 0;&nl;    &cbraces;).pluck(&squote;value&squote;);&nl;  &cbraces;&cm;&nl;&nl;  toArray&cl; function() &obraces;&nl;    return this.map();&nl;  &cbraces;&cm;&nl;&nl;  zip&cl; function() &obraces;&nl;    var iterator = Prototype.K&cm; args = $A(arguments);&nl;    if (Object.isFunction(args.last()))&nl;      iterator = args.pop();&nl;&nl;    var collections = [this].concat(args).map($A);&nl;    return this.map(function(value&cm; index) &obraces;&nl;      return iterator(collections.pluck(index));&nl;    &cbraces;);&nl;  &cbraces;&cm;&nl;&nl;  size&cl; function() &obraces;&nl;    return this.toArray().length;&nl;  &cbraces;&cm;&nl;&nl;  inspect&cl; function() &obraces;&nl;    return &squote;#<Enumerable&cl;&squote; + this.toArray().inspect() + &squote;>&squote;;&nl;  &cbraces;&nl;&cbraces;;&nl;&nl;Object.extend(Enumerable&cm; &obraces;&nl;  map&cl;     Enumerable.collect&cm;&nl;  find&cl;    Enumerable.detect&cm;&nl;  select&cl;  Enumerable.findAll&cm;&nl;  filter&cl;  Enumerable.findAll&cm;&nl;  member&cl;  Enumerable.include&cm;&nl;  entries&cl; Enumerable.toArray&cm;&nl;  every&cl;   Enumerable.all&cm;&nl;  some&cl;    Enumerable.any&nl;&cbraces;);&nl;function $A(iterable) &obraces;&nl;  if (!iterable) return [];&nl;  if (iterable.toArray) return iterable.toArray();&nl;  var length = iterable.length || 0&cm; results = new Array(length);&nl;  while (length--) results[length] = iterable[length];&nl;  return results;&nl;&cbraces;&nl;&nl;if (Prototype.Browser.WebKit) &obraces;&nl;  $A = function(iterable) &obraces;&nl;    if (!iterable) return [];&nl;    // In Safari&cm; only use the `toArray` method if it&squote;s not a NodeList.&nl;    // A NodeList is a function&cm; has an function `item` property&cm; and a numeric&nl;    // `length` property. Adapted from Google Doctype.&nl;    if (!(typeof iterable === &squote;function&squote; && typeof iterable.length ===&nl;        &squote;number&squote; && typeof iterable.item === &squote;function&squote;) && iterable.toArray)&nl;      return iterable.toArray();&nl;    var length = iterable.length || 0&cm; results = new Array(length);&nl;    while (length--) results[length] = iterable[length];&nl;    return results;&nl;  &cbraces;;&nl;&cbraces;&nl;&nl;Array.from = $A;&nl;&nl;Object.extend(Array.prototype&cm; Enumerable);&nl;&nl;if (!Array.prototype._reverse) Array.prototype._reverse = Array.prototype.reverse;&nl;&nl;Object.extend(Array.prototype&cm; &obraces;&nl;  _each&cl; function(iterator) &obraces;&nl;    for (var i = 0&cm; length = this.length; i < length; i++)&nl;      iterator(this[i]);&nl;  &cbraces;&cm;&nl;&nl;  clear&cl; function() &obraces;&nl;    this.length = 0;&nl;    return this;&nl;  &cbraces;&cm;&nl;&nl;  first&cl; function() &obraces;&nl;    return this[0];&nl;  &cbraces;&cm;&nl;&nl;  last&cl; function() &obraces;&nl;    return this[this.length - 1];&nl;  &cbraces;&cm;&nl;&nl;  compact&cl; function() &obraces;&nl;    return this.select(function(value) &obraces;&nl;      return value != null;&nl;    &cbraces;);&nl;  &cbraces;&cm;&nl;&nl;  flatten&cl; function() &obraces;&nl;    return this.inject([]&cm; function(array&cm; value) &obraces;&nl;      return array.concat(Object.isArray(value) ?&nl;        value.flatten() &cl; [value]);&nl;    &cbraces;);&nl;  &cbraces;&cm;&nl;&nl;  without&cl; function() &obraces;&nl;    var values = $A(arguments);&nl;    return this.select(function(value) &obraces;&nl;      return !values.include(value);&nl;    &cbraces;);&nl;  &cbraces;&cm;&nl;&nl;  reverse&cl; function(inline) &obraces;&nl;    return (inline !== false ? this &cl; this.toArray())._reverse();&nl;  &cbraces;&cm;&nl;&nl;  reduce&cl; function() &obraces;&nl;    return this.length > 1 ? this &cl; this[0];&nl;  &cbraces;&cm;&nl;&nl;  uniq&cl; function(sorted) &obraces;&nl;    return this.inject([]&cm; function(array&cm; value&cm; index) &obraces;&nl;      if (0 == index || (sorted ? array.last() != value &cl; !array.include(value)))&nl;        array.push(value);&nl;      return array;&nl;    &cbraces;);&nl;  &cbraces;&cm;&nl;&nl;  intersect&cl; function(array) &obraces;&nl;    return this.uniq().findAll(function(item) &obraces;&nl;      return array.detect(function(value) &obraces; return item === value &cbraces;);&nl;    &cbraces;);&nl;  &cbraces;&cm;&nl;&nl;  clone&cl; function() &obraces;&nl;    return [].concat(this);&nl;  &cbraces;&cm;&nl;&nl;  size&cl; function() &obraces;&nl;    return this.length;&nl;  &cbraces;&cm;&nl;&nl;  inspect&cl; function() &obraces;&nl;    return &squote;[&squote; + this.map(Object.inspect).join(&squote;&cm; &squote;) + &squote;]&squote;;&nl;  &cbraces;&cm;&nl;&nl;  toJSON&cl; function() &obraces;&nl;    var results = [];&nl;    this.each(function(object) &obraces;&nl;      var value = Object.toJSON(object);&nl;      if (!Object.isUndefined(value)) results.push(value);&nl;    &cbraces;);&nl;    return &squote;[&squote; + results.join(&squote;&cm; &squote;) + &squote;]&squote;;&nl;  &cbraces;&nl;&cbraces;);&nl;&nl;// use native browser JS 1.6 implementation if available&nl;if (Object.isFunction(Array.prototype.forEach))&nl;  Array.prototype._each = Array.prototype.forEach;&nl;&nl;if (!Array.prototype.indexOf) Array.prototype.indexOf = function(item&cm; i) &obraces;&nl;  i || (i = 0);&nl;  var length = this.length;&nl;  if (i < 0) i = length + i;&nl;  for (; i < length; i++)&nl;    if (this[i] === item) return i;&nl;  return -1;&nl;&cbraces;;&nl;&nl;if (!Array.prototype.lastIndexOf) Array.prototype.lastIndexOf = function(item&cm; i) &obraces;&nl;  i = isNaN(i) ? this.length &cl; (i < 0 ? this.length + i &cl; i) + 1;&nl;  var n = this.slice(0&cm; i).reverse().indexOf(item);&nl;  return (n < 0) ? n &cl; i - n - 1;&nl;&cbraces;;&nl;&nl;Array.prototype.toArray = Array.prototype.clone;&nl;&nl;function $w(string) &obraces;&nl;  if (!Object.isString(string)) return [];&nl;  string = string.strip();&nl;  return string ? string.split(/&bkslash;s+/) &cl; [];&nl;&cbraces;&nl;&nl;if (Prototype.Browser.Opera)&obraces;&nl;  Array.prototype.concat = function() &obraces;&nl;    var array = [];&nl;    for (var i = 0&cm; length = this.length; i < length; i++) array.push(this[i]);&nl;    for (var i = 0&cm; length = arguments.length; i < length; i++) &obraces;&nl;      if (Object.isArray(arguments[i])) &obraces;&nl;        for (var j = 0&cm; arrayLength = arguments[i].length; j < arrayLength; j++)&nl;          array.push(arguments[i][j]);&nl;      &cbraces; else &obraces;&nl;        array.push(arguments[i]);&nl;      &cbraces;&nl;    &cbraces;&nl;    return array;&nl;  &cbraces;;&nl;&cbraces;&nl;Object.extend(Number.prototype&cm; &obraces;&nl;  toColorPart&cl; function() &obraces;&nl;    return this.toPaddedString(2&cm; 16);&nl;  &cbraces;&cm;&nl;&nl;  succ&cl; function() &obraces;&nl;    return this + 1;&nl;  &cbraces;&cm;&nl;&nl;  times&cl; function(iterator&cm; context) &obraces;&nl;    $R(0&cm; this&cm; true).each(iterator&cm; context);&nl;    return this;&nl;  &cbraces;&cm;&nl;&nl;  toPaddedString&cl; function(length&cm; radix) &obraces;&nl;    var string = this.toString(radix || 10);&nl;    return &squote;0&squote;.times(length - string.length) + string;&nl;  &cbraces;&cm;&nl;&nl;  toJSON&cl; function() &obraces;&nl;    return isFinite(this) ? this.toString() &cl; &squote;null&squote;;&nl;  &cbraces;&nl;&cbraces;);&nl;&nl;$w(&squote;abs round ceil floor&squote;).each(function(method)&obraces;&nl;  Number.prototype[method] = Math[method].methodize();&nl;&cbraces;);&nl;function $H(object) &obraces;&nl;  return new Hash(object);&nl;&cbraces;;&nl;&nl;var Hash = Class.create(Enumerable&cm; (function() &obraces;&nl;&nl;  function toQueryPair(key&cm; value) &obraces;&nl;    if (Object.isUndefined(value)) return key;&nl;    return key + &squote;=&squote; + encodeURIComponent(String.interpret(value));&nl;  &cbraces;&nl;&nl;  return &obraces;&nl;    initialize&cl; function(object) &obraces;&nl;      this._object = Object.isHash(object) ? object.toObject() &cl; Object.clone(object);&nl;    &cbraces;&cm;&nl;&nl;    _each&cl; function(iterator) &obraces;&nl;      for (var key in this._object) &obraces;&nl;        var value = this._object[key]&cm; pair = [key&cm; value];&nl;        pair.key = key;&nl;        pair.value = value;&nl;        iterator(pair);&nl;      &cbraces;&nl;    &cbraces;&cm;&nl;&nl;    set&cl; function(key&cm; value) &obraces;&nl;      return this._object[key] = value;&nl;    &cbraces;&cm;&nl;&nl;    get&cl; function(key) &obraces;&nl;      // simulating poorly supported hasOwnProperty&nl;      if (this._object[key] !== Object.prototype[key])&nl;        return this._object[key];&nl;    &cbraces;&cm;&nl;&nl;    unset&cl; function(key) &obraces;&nl;      var value = this._object[key];&nl;      delete this._object[key];&nl;      return value;&nl;    &cbraces;&cm;&nl;&nl;    toObject&cl; function() &obraces;&nl;      return Object.clone(this._object);&nl;    &cbraces;&cm;&nl;&nl;    keys&cl; function() &obraces;&nl;      return this.pluck(&squote;key&squote;);&nl;    &cbraces;&cm;&nl;&nl;    values&cl; function() &obraces;&nl;      return this.pluck(&squote;value&squote;);&nl;    &cbraces;&cm;&nl;&nl;    index&cl; function(value) &obraces;&nl;      var match = this.detect(function(pair) &obraces;&nl;        return pair.value === value;&nl;      &cbraces;);&nl;      return match && match.key;&nl;    &cbraces;&cm;&nl;&nl;    merge&cl; function(object) &obraces;&nl;      return this.clone().update(object);&nl;    &cbraces;&cm;&nl;&nl;    update&cl; function(object) &obraces;&nl;      return new Hash(object).inject(this&cm; function(result&cm; pair) &obraces;&nl;        result.set(pair.key&cm; pair.value);&nl;        return result;&nl;      &cbraces;);&nl;    &cbraces;&cm;&nl;&nl;    toQueryString&cl; function() &obraces;&nl;      return this.inject([]&cm; function(results&cm; pair) &obraces;&nl;        var key = encodeURIComponent(pair.key)&cm; values = pair.value;&nl;&nl;        if (values && typeof values == &squote;object&squote;) &obraces;&nl;          if (Object.isArray(values))&nl;            return results.concat(values.map(toQueryPair.curry(key)));&nl;        &cbraces; else results.push(toQueryPair(key&cm; values));&nl;        return results;&nl;      &cbraces;).join(&squote;&&squote;);&nl;    &cbraces;&cm;&nl;&nl;    inspect&cl; function() &obraces;&nl;      return &squote;#<Hash&cl;&obraces;&squote; + this.map(function(pair) &obraces;&nl;        return pair.map(Object.inspect).join(&squote;&cl; &squote;);&nl;      &cbraces;).join(&squote;&cm; &squote;) + &squote;&cbraces;>&squote;;&nl;    &cbraces;&cm;&nl;&nl;    toJSON&cl; function() &obraces;&nl;      return Object.toJSON(this.toObject());&nl;    &cbraces;&cm;&nl;&nl;    clone&cl; function() &obraces;&nl;      return new Hash(this);&nl;    &cbraces;&nl;  &cbraces;&nl;&cbraces;)());&nl;&nl;Hash.prototype.toTemplateReplacements = Hash.prototype.toObject;&nl;Hash.from = $H;&nl;var ObjectRange = Class.create(Enumerable&cm; &obraces;&nl;  initialize&cl; function(start&cm; end&cm; exclusive) &obraces;&nl;    this.start = start;&nl;    this.end = end;&nl;    this.exclusive = exclusive;&nl;  &cbraces;&cm;&nl;&nl;  _each&cl; function(iterator) &obraces;&nl;    var value = this.start;&nl;    while (this.include(value)) &obraces;&nl;      iterator(value);&nl;      value = value.succ();&nl;    &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  include&cl; function(value) &obraces;&nl;    if (value < this.start)&nl;      return false;&nl;    if (this.exclusive)&nl;      return value < this.end;&nl;    return value <= this.end;&nl;  &cbraces;&nl;&cbraces;);&nl;&nl;var $R = function(start&cm; end&cm; exclusive) &obraces;&nl;  return new ObjectRange(start&cm; end&cm; exclusive);&nl;&cbraces;;&nl;&nl;var Ajax = &obraces;&nl;  getTransport&cl; function() &obraces;&nl;    return Try.these(&nl;      function() &obraces;return new XMLHttpRequest()&cbraces;&cm;&nl;      function() &obraces;return new ActiveXObject(&squote;Msxml2.XMLHTTP&squote;)&cbraces;&cm;&nl;      function() &obraces;return new ActiveXObject(&squote;Microsoft.XMLHTTP&squote;)&cbraces;&nl;    ) || false;&nl;  &cbraces;&cm;&nl;&nl;  activeRequestCount&cl; 0&nl;&cbraces;;&nl;&nl;Ajax.Responders = &obraces;&nl;  responders&cl; []&cm;&nl;&nl;  _each&cl; function(iterator) &obraces;&nl;    this.responders._each(iterator);&nl;  &cbraces;&cm;&nl;&nl;  register&cl; function(responder) &obraces;&nl;    if (!this.include(responder))&nl;      this.responders.push(responder);&nl;  &cbraces;&cm;&nl;&nl;  unregister&cl; function(responder) &obraces;&nl;    this.responders = this.responders.without(responder);&nl;  &cbraces;&cm;&nl;&nl;  dispatch&cl; function(callback&cm; request&cm; transport&cm; json) &obraces;&nl;    this.each(function(responder) &obraces;&nl;      if (Object.isFunction(responder[callback])) &obraces;&nl;        try &obraces;&nl;          responder[callback].apply(responder&cm; [request&cm; transport&cm; json]);&nl;        &cbraces; catch (e) &obraces; &cbraces;&nl;      &cbraces;&nl;    &cbraces;);&nl;  &cbraces;&nl;&cbraces;;&nl;&nl;Object.extend(Ajax.Responders&cm; Enumerable);&nl;&nl;Ajax.Responders.register(&obraces;&nl;  onCreate&cl;   function() &obraces; Ajax.activeRequestCount++ &cbraces;&cm;&nl;  onComplete&cl; function() &obraces; Ajax.activeRequestCount-- &cbraces;&nl;&cbraces;);&nl;&nl;Ajax.Base = Class.create(&obraces;&nl;  initialize&cl; function(options) &obraces;&nl;    this.options = &obraces;&nl;      method&cl;       &squote;post&squote;&cm;&nl;      asynchronous&cl; true&cm;&nl;      contentType&cl;  &squote;application/x-www-form-urlencoded&squote;&cm;&nl;      encoding&cl;     &squote;UTF-8&squote;&cm;&nl;      parameters&cl;   &squote;&squote;&cm;&nl;      evalJSON&cl;     true&cm;&nl;      evalJS&cl;       true&nl;    &cbraces;;&nl;    Object.extend(this.options&cm; options || &obraces; &cbraces;);&nl;&nl;    this.options.method = this.options.method.toLowerCase();&nl;&nl;    if (Object.isString(this.options.parameters))&nl;      this.options.parameters = this.options.parameters.toQueryParams();&nl;    else if (Object.isHash(this.options.parameters))&nl;      this.options.parameters = this.options.parameters.toObject();&nl;  &cbraces;&nl;&cbraces;);&nl;&nl;Ajax.Request = Class.create(Ajax.Base&cm; &obraces;&nl;  _complete&cl; false&cm;&nl;&nl;  initialize&cl; function($super&cm; url&cm; options) &obraces;&nl;    $super(options);&nl;    this.transport = Ajax.getTransport();&nl;    this.request(url);&nl;  &cbraces;&cm;&nl;&nl;  request&cl; function(url) &obraces;&nl;    this.url = url;&nl;    this.method = this.options.method;&nl;    var params = Object.clone(this.options.parameters);&nl;&nl;    if (![&squote;get&squote;&cm; &squote;post&squote;].include(this.method)) &obraces;&nl;      // simulate other verbs over post&nl;      params[&squote;_method&squote;] = this.method;&nl;      this.method = &squote;post&squote;;&nl;    &cbraces;&nl;&nl;    this.parameters = params;&nl;&nl;    if (params = Object.toQueryString(params)) &obraces;&nl;      // when GET&cm; append parameters to URL&nl;      if (this.method == &squote;get&squote;)&nl;        this.url += (this.url.include(&squote;?&squote;) ? &squote;&&squote; &cl; &squote;?&squote;) + params;&nl;      else if (/Konqueror|Safari|KHTML/.test(navigator.userAgent))&nl;        params += &squote;&_=&squote;;&nl;    &cbraces;&nl;&nl;    try &obraces;&nl;      var response = new Ajax.Response(this);&nl;      if (this.options.onCreate) this.options.onCreate(response);&nl;      Ajax.Responders.dispatch(&squote;onCreate&squote;&cm; this&cm; response);&nl;&nl;      this.transport.open(this.method.toUpperCase()&cm; this.url&cm;&nl;        this.options.asynchronous);&nl;&nl;      if (this.options.asynchronous) this.respondToReadyState.bind(this).defer(1);&nl;&nl;      this.transport.onreadystatechange = this.onStateChange.bind(this);&nl;      this.setRequestHeaders();&nl;&nl;      this.body = this.method == &squote;post&squote; ? (this.options.postBody || params) &cl; null;&nl;      this.transport.send(this.body);&nl;&nl;      /* Force Firefox to handle ready state 4 for synchronous requests */&nl;      if (!this.options.asynchronous && this.transport.overrideMimeType)&nl;        this.onStateChange();&nl;&nl;    &cbraces;&nl;    catch (e) &obraces;&nl;      this.dispatchException(e);&nl;    &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  onStateChange&cl; function() &obraces;&nl;    var readyState = this.transport.readyState;&nl;    if (readyState > 1 && !((readyState == 4) && this._complete))&nl;      this.respondToReadyState(this.transport.readyState);&nl;  &cbraces;&cm;&nl;&nl;  setRequestHeaders&cl; function() &obraces;&nl;    var headers = &obraces;&nl;      &squote;X-Requested-With&squote;&cl; &squote;XMLHttpRequest&squote;&cm;&nl;      &squote;X-Prototype-Version&squote;&cl; Prototype.Version&cm;&nl;      &squote;Accept&squote;&cl; &squote;text/javascript&cm; text/html&cm; application/xml&cm; text/xml&cm; */*&squote;&nl;    &cbraces;;&nl;&nl;    if (this.method == &squote;post&squote;) &obraces;&nl;      headers[&squote;Content-type&squote;] = this.options.contentType +&nl;        (this.options.encoding ? &squote;; charset=&squote; + this.options.encoding &cl; &squote;&squote;);&nl;&nl;      /* Force &quote;Connection&cl; close&quote; for older Mozilla browsers to work&nl;       * around a bug where XMLHttpRequest sends an incorrect&nl;       * Content-length header. See Mozilla Bugzilla #246651.&nl;       */&nl;      if (this.transport.overrideMimeType &&&nl;          (navigator.userAgent.match(/Gecko&bkslash;/(&bkslash;d&obraces;4&cbraces;)/) || [0&cm;2005])[1] < 2005)&nl;            headers[&squote;Connection&squote;] = &squote;close&squote;;&nl;    &cbraces;&nl;&nl;    // user-defined headers&nl;    if (typeof this.options.requestHeaders == &squote;object&squote;) &obraces;&nl;      var extras = this.options.requestHeaders;&nl;&nl;      if (Object.isFunction(extras.push))&nl;        for (var i = 0&cm; length = extras.length; i < length; i += 2)&nl;          headers[extras[i]] = extras[i+1];&nl;      else&nl;        $H(extras).each(function(pair) &obraces; headers[pair.key] = pair.value &cbraces;);&nl;    &cbraces;&nl;&nl;    for (var name in headers)&nl;      this.transport.setRequestHeader(name&cm; headers[name]);&nl;  &cbraces;&cm;&nl;&nl;  success&cl; function() &obraces;&nl;    var status = this.getStatus();&nl;    return !status || (status >= 200 && status < 300);&nl;  &cbraces;&cm;&nl;&nl;  getStatus&cl; function() &obraces;&nl;    try &obraces;&nl;      return this.transport.status || 0;&nl;    &cbraces; catch (e) &obraces; return 0 &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  respondToReadyState&cl; function(readyState) &obraces;&nl;    var state = Ajax.Request.Events[readyState]&cm; response = new Ajax.Response(this);&nl;&nl;    if (state == &squote;Complete&squote;) &obraces;&nl;      try &obraces;&nl;        this._complete = true;&nl;        (this.options[&squote;on&squote; + response.status]&nl;         || this.options[&squote;on&squote; + (this.success() ? &squote;Success&squote; &cl; &squote;Failure&squote;)]&nl;         || Prototype.emptyFunction)(response&cm; response.headerJSON);&nl;      &cbraces; catch (e) &obraces;&nl;        this.dispatchException(e);&nl;      &cbraces;&nl;&nl;      var contentType = response.getHeader(&squote;Content-type&squote;);&nl;      if (this.options.evalJS == &squote;force&squote;&nl;          || (this.options.evalJS && this.isSameOrigin() && contentType&nl;          && contentType.match(/^&bkslash;s*(text|application)&bkslash;/(x-)?(java|ecma)script(;.*)?&bkslash;s*$/i)))&nl;        this.evalResponse();&nl;    &cbraces;&nl;&nl;    try &obraces;&nl;      (this.options[&squote;on&squote; + state] || Prototype.emptyFunction)(response&cm; response.headerJSON);&nl;      Ajax.Responders.dispatch(&squote;on&squote; + state&cm; this&cm; response&cm; response.headerJSON);&nl;    &cbraces; catch (e) &obraces;&nl;      this.dispatchException(e);&nl;    &cbraces;&nl;&nl;    if (state == &squote;Complete&squote;) &obraces;&nl;      // avoid memory leak in MSIE&cl; clean up&nl;      this.transport.onreadystatechange = Prototype.emptyFunction;&nl;    &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  isSameOrigin&cl; function() &obraces;&nl;    var m = this.url.match(/^&bkslash;s*https?&cl;&bkslash;/&bkslash;/[^&bkslash;/]*/);&nl;    return !m || (m[0] == &squote;#&obraces;protocol&cbraces;//#&obraces;domain&cbraces;#&obraces;port&cbraces;&squote;.interpolate(&obraces;&nl;      protocol&cl; location.protocol&cm;&nl;      domain&cl; document.domain&cm;&nl;      port&cl; location.port ? &squote;&cl;&squote; + location.port &cl; &squote;&squote;&nl;    &cbraces;));&nl;  &cbraces;&cm;&nl;&nl;  getHeader&cl; function(name) &obraces;&nl;    try &obraces;&nl;      return this.transport.getResponseHeader(name) || null;&nl;    &cbraces; catch (e) &obraces; return null &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  evalResponse&cl; function() &obraces;&nl;    try &obraces;&nl;      return eval((this.transport.responseText || &squote;&squote;).unfilterJSON());&nl;    &cbraces; catch (e) &obraces;&nl;      this.dispatchException(e);&nl;    &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  dispatchException&cl; function(exception) &obraces;&nl;    (this.options.onException || Prototype.emptyFunction)(this&cm; exception);&nl;    Ajax.Responders.dispatch(&squote;onException&squote;&cm; this&cm; exception);&nl;  &cbraces;&nl;&cbraces;);&nl;&nl;Ajax.Request.Events =&nl;  [&squote;Uninitialized&squote;&cm; &squote;Loading&squote;&cm; &squote;Loaded&squote;&cm; &squote;Interactive&squote;&cm; &squote;Complete&squote;];&nl;&nl;Ajax.Response = Class.create(&obraces;&nl;  initialize&cl; function(request)&obraces;&nl;    this.request = request;&nl;    var transport  = this.transport  = request.transport&cm;&nl;        readyState = this.readyState = transport.readyState;&nl;&nl;    if((readyState > 2 && !Prototype.Browser.IE) || readyState == 4) &obraces;&nl;      this.status       = this.getStatus();&nl;      this.statusText   = this.getStatusText();&nl;      this.responseText = String.interpret(transport.responseText);&nl;      this.headerJSON   = this._getHeaderJSON();&nl;    &cbraces;&nl;&nl;    if(readyState == 4) &obraces;&nl;      var xml = transport.responseXML;&nl;      this.responseXML  = Object.isUndefined(xml) ? null &cl; xml;&nl;      this.responseJSON = this._getResponseJSON();&nl;    &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  status&cl;      0&cm;&nl;  statusText&cl; &squote;&squote;&cm;&nl;&nl;  getStatus&cl; Ajax.Request.prototype.getStatus&cm;&nl;&nl;  getStatusText&cl; function() &obraces;&nl;    try &obraces;&nl;      return this.transport.statusText || &squote;&squote;;&nl;    &cbraces; catch (e) &obraces; return &squote;&squote; &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  getHeader&cl; Ajax.Request.prototype.getHeader&cm;&nl;&nl;  getAllHeaders&cl; function() &obraces;&nl;    try &obraces;&nl;      return this.getAllResponseHeaders();&nl;    &cbraces; catch (e) &obraces; return null &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  getResponseHeader&cl; function(name) &obraces;&nl;    return this.transport.getResponseHeader(name);&nl;  &cbraces;&cm;&nl;&nl;  getAllResponseHeaders&cl; function() &obraces;&nl;    return this.transport.getAllResponseHeaders();&nl;  &cbraces;&cm;&nl;&nl;  _getHeaderJSON&cl; function() &obraces;&nl;    var json = this.getHeader(&squote;X-JSON&squote;);&nl;    if (!json) return null;&nl;    json = decodeURIComponent(escape(json));&nl;    try &obraces;&nl;      return json.evalJSON(this.request.options.sanitizeJSON ||&nl;        !this.request.isSameOrigin());&nl;    &cbraces; catch (e) &obraces;&nl;      this.request.dispatchException(e);&nl;    &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  _getResponseJSON&cl; function() &obraces;&nl;    var options = this.request.options;&nl;    if (!options.evalJSON || (options.evalJSON != &squote;force&squote; &&&nl;      !(this.getHeader(&squote;Content-type&squote;) || &squote;&squote;).include(&squote;application/json&squote;)) ||&nl;        this.responseText.blank())&nl;          return null;&nl;    try &obraces;&nl;      return this.responseText.evalJSON(options.sanitizeJSON ||&nl;        !this.request.isSameOrigin());&nl;    &cbraces; catch (e) &obraces;&nl;      this.request.dispatchException(e);&nl;    &cbraces;&nl;  &cbraces;&nl;&cbraces;);&nl;&nl;Ajax.Updater = Class.create(Ajax.Request&cm; &obraces;&nl;  initialize&cl; function($super&cm; container&cm; url&cm; options) &obraces;&nl;    this.container = &obraces;&nl;      success&cl; (container.success || container)&cm;&nl;      failure&cl; (container.failure || (container.success ? null &cl; container))&nl;    &cbraces;;&nl;&nl;    options = Object.clone(options);&nl;    var onComplete = options.onComplete;&nl;    options.onComplete = (function(response&cm; json) &obraces;&nl;      this.updateContent(response.responseText);&nl;      if (Object.isFunction(onComplete)) onComplete(response&cm; json);&nl;    &cbraces;).bind(this);&nl;&nl;    $super(url&cm; options);&nl;  &cbraces;&cm;&nl;&nl;  updateContent&cl; function(responseText) &obraces;&nl;    var receiver = this.container[this.success() ? &squote;success&squote; &cl; &squote;failure&squote;]&cm;&nl;        options = this.options;&nl;&nl;    if (!options.evalScripts) responseText = responseText.stripScripts();&nl;&nl;    if (receiver = $(receiver)) &obraces;&nl;      if (options.insertion) &obraces;&nl;        if (Object.isString(options.insertion)) &obraces;&nl;          var insertion = &obraces; &cbraces;; insertion[options.insertion] = responseText;&nl;          receiver.insert(insertion);&nl;        &cbraces;&nl;        else options.insertion(receiver&cm; responseText);&nl;      &cbraces;&nl;      else receiver.update(responseText);&nl;    &cbraces;&nl;  &cbraces;&nl;&cbraces;);&nl;&nl;Ajax.PeriodicalUpdater = Class.create(Ajax.Base&cm; &obraces;&nl;  initialize&cl; function($super&cm; container&cm; url&cm; options) &obraces;&nl;    $super(options);&nl;    this.onComplete = this.options.onComplete;&nl;&nl;    this.frequency = (this.options.frequency || 2);&nl;    this.decay = (this.options.decay || 1);&nl;&nl;    this.updater = &obraces; &cbraces;;&nl;    this.container = container;&nl;    this.url = url;&nl;&nl;    this.start();&nl;  &cbraces;&cm;&nl;&nl;  start&cl; function() &obraces;&nl;    this.options.onComplete = this.updateComplete.bind(this);&nl;    this.onTimerEvent();&nl;  &cbraces;&cm;&nl;&nl;  stop&cl; function() &obraces;&nl;    this.updater.options.onComplete = undefined;&nl;    clearTimeout(this.timer);&nl;    (this.onComplete || Prototype.emptyFunction).apply(this&cm; arguments);&nl;  &cbraces;&cm;&nl;&nl;  updateComplete&cl; function(response) &obraces;&nl;    if (this.options.decay) &obraces;&nl;      this.decay = (response.responseText == this.lastText ?&nl;        this.decay * this.options.decay &cl; 1);&nl;&nl;      this.lastText = response.responseText;&nl;    &cbraces;&nl;    this.timer = this.onTimerEvent.bind(this).delay(this.decay * this.frequency);&nl;  &cbraces;&cm;&nl;&nl;  onTimerEvent&cl; function() &obraces;&nl;    this.updater = new Ajax.Updater(this.container&cm; this.url&cm; this.options);&nl;  &cbraces;&nl;&cbraces;);&nl;function $(element) &obraces;&nl;  if (arguments.length > 1) &obraces;&nl;    for (var i = 0&cm; elements = []&cm; length = arguments.length; i < length; i++)&nl;      elements.push($(arguments[i]));&nl;    return elements;&nl;  &cbraces;&nl;  if (Object.isString(element))&nl;    element = document.getElementById(element);&nl;  return Element.extend(element);&nl;&cbraces;&nl;&nl;if (Prototype.BrowserFeatures.XPath) &obraces;&nl;  document._getElementsByXPath = function(expression&cm; parentElement) &obraces;&nl;    var results = [];&nl;    var query = document.evaluate(expression&cm; $(parentElement) || document&cm;&nl;      null&cm; XPathResult.ORDERED_NODE_SNAPSHOT_TYPE&cm; null);&nl;    for (var i = 0&cm; length = query.snapshotLength; i < length; i++)&nl;      results.push(Element.extend(query.snapshotItem(i)));&nl;    return results;&nl;  &cbraces;;&nl;&cbraces;&nl;&nl;/*--------------------------------------------------------------------------*/&nl;&nl;if (!window.Node) var Node = &obraces; &cbraces;;&nl;&nl;if (!Node.ELEMENT_NODE) &obraces;&nl;  // DOM level 2 ECMAScript Language Binding&nl;  Object.extend(Node&cm; &obraces;&nl;    ELEMENT_NODE&cl; 1&cm;&nl;    ATTRIBUTE_NODE&cl; 2&cm;&nl;    TEXT_NODE&cl; 3&cm;&nl;    CDATA_SECTION_NODE&cl; 4&cm;&nl;    ENTITY_REFERENCE_NODE&cl; 5&cm;&nl;    ENTITY_NODE&cl; 6&cm;&nl;    PROCESSING_INSTRUCTION_NODE&cl; 7&cm;&nl;    COMMENT_NODE&cl; 8&cm;&nl;    DOCUMENT_NODE&cl; 9&cm;&nl;    DOCUMENT_TYPE_NODE&cl; 10&cm;&nl;    DOCUMENT_FRAGMENT_NODE&cl; 11&cm;&nl;    NOTATION_NODE&cl; 12&nl;  &cbraces;);&nl;&cbraces;&nl;&nl;(function() &obraces;&nl;  var element = this.Element;&nl;  this.Element = function(tagName&cm; attributes) &obraces;&nl;    attributes = attributes || &obraces; &cbraces;;&nl;    tagName = tagName.toLowerCase();&nl;    var cache = Element.cache;&nl;    if (Prototype.Browser.IE && attributes.name) &obraces;&nl;      tagName = &squote;<&squote; + tagName + &squote; name=&quote;&squote; + attributes.name + &squote;&quote;>&squote;;&nl;      delete attributes.name;&nl;      return Element.writeAttribute(document.createElement(tagName)&cm; attributes);&nl;    &cbraces;&nl;    if (!cache[tagName]) cache[tagName] = Element.extend(document.createElement(tagName));&nl;    return Element.writeAttribute(cache[tagName].cloneNode(false)&cm; attributes);&nl;  &cbraces;;&nl;  Object.extend(this.Element&cm; element || &obraces; &cbraces;);&nl;  if (element) this.Element.prototype = element.prototype;&nl;&cbraces;).call(window);&nl;&nl;Element.cache = &obraces; &cbraces;;&nl;&nl;Element.Methods = &obraces;&nl;  visible&cl; function(element) &obraces;&nl;    return $(element).style.display != &squote;none&squote;;&nl;  &cbraces;&cm;&nl;&nl;  toggle&cl; function(element) &obraces;&nl;    element = $(element);&nl;    Element[Element.visible(element) ? &squote;hide&squote; &cl; &squote;show&squote;](element);&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  hide&cl; function(element) &obraces;&nl;    element = $(element);&nl;    element.style.display = &squote;none&squote;;&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  show&cl; function(element) &obraces;&nl;    element = $(element);&nl;    element.style.display = &squote;&squote;;&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  remove&cl; function(element) &obraces;&nl;    element = $(element);&nl;    element.parentNode.removeChild(element);&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  update&cl; function(element&cm; content) &obraces;&nl;    element = $(element);&nl;    if (content && content.toElement) content = content.toElement();&nl;    if (Object.isElement(content)) return element.update().insert(content);&nl;    content = Object.toHTML(content);&nl;    element.innerHTML = content.stripScripts();&nl;    content.evalScripts.bind(content).defer();&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  replace&cl; function(element&cm; content) &obraces;&nl;    element = $(element);&nl;    if (content && content.toElement) content = content.toElement();&nl;    else if (!Object.isElement(content)) &obraces;&nl;      content = Object.toHTML(content);&nl;      var range = element.ownerDocument.createRange();&nl;      range.selectNode(element);&nl;      content.evalScripts.bind(content).defer();&nl;      content = range.createContextualFragment(content.stripScripts());&nl;    &cbraces;&nl;    element.parentNode.replaceChild(content&cm; element);&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  insert&cl; function(element&cm; insertions) &obraces;&nl;    element = $(element);&nl;&nl;    if (Object.isString(insertions) || Object.isNumber(insertions) ||&nl;        Object.isElement(insertions) || (insertions && (insertions.toElement || insertions.toHTML)))&nl;          insertions = &obraces;bottom&cl;insertions&cbraces;;&nl;&nl;    var content&cm; insert&cm; tagName&cm; childNodes;&nl;&nl;    for (var position in insertions) &obraces;&nl;      content  = insertions[position];&nl;      position = position.toLowerCase();&nl;      insert = Element._insertionTranslations[position];&nl;&nl;      if (content && content.toElement) content = content.toElement();&nl;      if (Object.isElement(content)) &obraces;&nl;        insert(element&cm; content);&nl;        continue;&nl;      &cbraces;&nl;&nl;      content = Object.toHTML(content);&nl;&nl;      tagName = ((position == &squote;before&squote; || position == &squote;after&squote;)&nl;        ? element.parentNode &cl; element).tagName.toUpperCase();&nl;&nl;      childNodes = Element._getContentFromAnonymousElement(tagName&cm; content.stripScripts());&nl;&nl;      if (position == &squote;top&squote; || position == &squote;after&squote;) childNodes.reverse();&nl;      childNodes.each(insert.curry(element));&nl;&nl;      content.evalScripts.bind(content).defer();&nl;    &cbraces;&nl;&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  wrap&cl; function(element&cm; wrapper&cm; attributes) &obraces;&nl;    element = $(element);&nl;    if (Object.isElement(wrapper))&nl;      $(wrapper).writeAttribute(attributes || &obraces; &cbraces;);&nl;    else if (Object.isString(wrapper)) wrapper = new Element(wrapper&cm; attributes);&nl;    else wrapper = new Element(&squote;div&squote;&cm; wrapper);&nl;    if (element.parentNode)&nl;      element.parentNode.replaceChild(wrapper&cm; element);&nl;    wrapper.appendChild(element);&nl;    return wrapper;&nl;  &cbraces;&cm;&nl;&nl;  inspect&cl; function(element) &obraces;&nl;    element = $(element);&nl;    var result = &squote;<&squote; + element.tagName.toLowerCase();&nl;    $H(&obraces;&squote;id&squote;&cl; &squote;id&squote;&cm; &squote;className&squote;&cl; &squote;class&squote;&cbraces;).each(function(pair) &obraces;&nl;      var property = pair.first()&cm; attribute = pair.last();&nl;      var value = (element[property] || &squote;&squote;).toString();&nl;      if (value) result += &squote; &squote; + attribute + &squote;=&squote; + value.inspect(true);&nl;    &cbraces;);&nl;    return result + &squote;>&squote;;&nl;  &cbraces;&cm;&nl;&nl;  recursivelyCollect&cl; function(element&cm; property) &obraces;&nl;    element = $(element);&nl;    var elements = [];&nl;    while (element = element[property])&nl;      if (element.nodeType == 1)&nl;        elements.push(Element.extend(element));&nl;    return elements;&nl;  &cbraces;&cm;&nl;&nl;  ancestors&cl; function(element) &obraces;&nl;    return $(element).recursivelyCollect(&squote;parentNode&squote;);&nl;  &cbraces;&cm;&nl;&nl;  descendants&cl; function(element) &obraces;&nl;    return $(element).select(&quote;*&quote;);&nl;  &cbraces;&cm;&nl;&nl;  firstDescendant&cl; function(element) &obraces;&nl;    element = $(element).firstChild;&nl;    while (element && element.nodeType != 1) element = element.nextSibling;&nl;    return $(element);&nl;  &cbraces;&cm;&nl;&nl;  immediateDescendants&cl; function(element) &obraces;&nl;    if (!(element = $(element).firstChild)) return [];&nl;    while (element && element.nodeType != 1) element = element.nextSibling;&nl;    if (element) return [element].concat($(element).nextSiblings());&nl;    return [];&nl;  &cbraces;&cm;&nl;&nl;  previousSiblings&cl; function(element) &obraces;&nl;    return $(element).recursivelyCollect(&squote;previousSibling&squote;);&nl;  &cbraces;&cm;&nl;&nl;  nextSiblings&cl; function(element) &obraces;&nl;    return $(element).recursivelyCollect(&squote;nextSibling&squote;);&nl;  &cbraces;&cm;&nl;&nl;  siblings&cl; function(element) &obraces;&nl;    element = $(element);&nl;    return element.previousSiblings().reverse().concat(element.nextSiblings());&nl;  &cbraces;&cm;&nl;&nl;  match&cl; function(element&cm; selector) &obraces;&nl;    if (Object.isString(selector))&nl;      selector = new Selector(selector);&nl;    return selector.match($(element));&nl;  &cbraces;&cm;&nl;&nl;  up&cl; function(element&cm; expression&cm; index) &obraces;&nl;    element = $(element);&nl;    if (arguments.length == 1) return $(element.parentNode);&nl;    var ancestors = element.ancestors();&nl;    return Object.isNumber(expression) ? ancestors[expression] &cl;&nl;      Selector.findElement(ancestors&cm; expression&cm; index);&nl;  &cbraces;&cm;&nl;&nl;  down&cl; function(element&cm; expression&cm; index) &obraces;&nl;    element = $(element);&nl;    if (arguments.length == 1) return element.firstDescendant();&nl;    return Object.isNumber(expression) ? element.descendants()[expression] &cl;&nl;      Element.select(element&cm; expression)[index || 0];&nl;  &cbraces;&cm;&nl;&nl;  previous&cl; function(element&cm; expression&cm; index) &obraces;&nl;    element = $(element);&nl;    if (arguments.length == 1) return $(Selector.handlers.previousElementSibling(element));&nl;    var previousSiblings = element.previousSiblings();&nl;    return Object.isNumber(expression) ? previousSiblings[expression] &cl;&nl;      Selector.findElement(previousSiblings&cm; expression&cm; index);&nl;  &cbraces;&cm;&nl;&nl;  next&cl; function(element&cm; expression&cm; index) &obraces;&nl;    element = $(element);&nl;    if (arguments.length == 1) return $(Selector.handlers.nextElementSibling(element));&nl;    var nextSiblings = element.nextSiblings();&nl;    return Object.isNumber(expression) ? nextSiblings[expression] &cl;&nl;      Selector.findElement(nextSiblings&cm; expression&cm; index);&nl;  &cbraces;&cm;&nl;&nl;  select&cl; function() &obraces;&nl;    var args = $A(arguments)&cm; element = $(args.shift());&nl;    return Selector.findChildElements(element&cm; args);&nl;  &cbraces;&cm;&nl;&nl;  adjacent&cl; function() &obraces;&nl;    var args = $A(arguments)&cm; element = $(args.shift());&nl;    return Selector.findChildElements(element.parentNode&cm; args).without(element);&nl;  &cbraces;&cm;&nl;&nl;  identify&cl; function(element) &obraces;&nl;    element = $(element);&nl;    var id = element.readAttribute(&squote;id&squote;)&cm; self = arguments.callee;&nl;    if (id) return id;&nl;    do &obraces; id = &squote;anonymous_element_&squote; + self.counter++ &cbraces; while ($(id));&nl;    element.writeAttribute(&squote;id&squote;&cm; id);&nl;    return id;&nl;  &cbraces;&cm;&nl;&nl;  readAttribute&cl; function(element&cm; name) &obraces;&nl;    element = $(element);&nl;    if (Prototype.Browser.IE) &obraces;&nl;      var t = Element._attributeTranslations.read;&nl;      if (t.values[name]) return t.values[name](element&cm; name);&nl;      if (t.names[name]) name = t.names[name];&nl;      if (name.include(&squote;&cl;&squote;)) &obraces;&nl;        return (!element.attributes || !element.attributes[name]) ? null &cl;&nl;         element.attributes[name].value;&nl;      &cbraces;&nl;    &cbraces;&nl;    return element.getAttribute(name);&nl;  &cbraces;&cm;&nl;&nl;  writeAttribute&cl; function(element&cm; name&cm; value) &obraces;&nl;    element = $(element);&nl;    var attributes = &obraces; &cbraces;&cm; t = Element._attributeTranslations.write;&nl;&nl;    if (typeof name == &squote;object&squote;) attributes = name;&nl;    else attributes[name] = Object.isUndefined(value) ? true &cl; value;&nl;&nl;    for (var attr in attributes) &obraces;&nl;      name = t.names[attr] || attr;&nl;      value = attributes[attr];&nl;      if (t.values[attr]) name = t.values[attr](element&cm; value);&nl;      if (value === false || value === null)&nl;        element.removeAttribute(name);&nl;      else if (value === true)&nl;        element.setAttribute(name&cm; name);&nl;      else element.setAttribute(name&cm; value);&nl;    &cbraces;&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  getHeight&cl; function(element) &obraces;&nl;    return $(element).getDimensions().height;&nl;  &cbraces;&cm;&nl;&nl;  getWidth&cl; function(element) &obraces;&nl;    return $(element).getDimensions().width;&nl;  &cbraces;&cm;&nl;&nl;  classNames&cl; function(element) &obraces;&nl;    return new Element.ClassNames(element);&nl;  &cbraces;&cm;&nl;&nl;  hasClassName&cl; function(element&cm; className) &obraces;&nl;    if (!(element = $(element))) return;&nl;    var elementClassName = element.className;&nl;    return (elementClassName.length > 0 && (elementClassName == className ||&nl;      new RegExp(&quote;(^|&bkslash;&bkslash;s)&quote; + className + &quote;(&bkslash;&bkslash;s|$)&quote;).test(elementClassName)));&nl;  &cbraces;&cm;&nl;&nl;  addClassName&cl; function(element&cm; className) &obraces;&nl;    if (!(element = $(element))) return;&nl;    if (!element.hasClassName(className))&nl;      element.className += (element.className ? &squote; &squote; &cl; &squote;&squote;) + className;&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  removeClassName&cl; function(element&cm; className) &obraces;&nl;    if (!(element = $(element))) return;&nl;    element.className = element.className.replace(&nl;      new RegExp(&quote;(^|&bkslash;&bkslash;s+)&quote; + className + &quote;(&bkslash;&bkslash;s+|$)&quote;)&cm; &squote; &squote;).strip();&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  toggleClassName&cl; function(element&cm; className) &obraces;&nl;    if (!(element = $(element))) return;&nl;    return element[element.hasClassName(className) ?&nl;      &squote;removeClassName&squote; &cl; &squote;addClassName&squote;](className);&nl;  &cbraces;&cm;&nl;&nl;  // removes whitespace-only text node children&nl;  cleanWhitespace&cl; function(element) &obraces;&nl;    element = $(element);&nl;    var node = element.firstChild;&nl;    while (node) &obraces;&nl;      var nextNode = node.nextSibling;&nl;      if (node.nodeType == 3 && !/&bkslash;S/.test(node.nodeValue))&nl;        element.removeChild(node);&nl;      node = nextNode;&nl;    &cbraces;&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  empty&cl; function(element) &obraces;&nl;    return $(element).innerHTML.blank();&nl;  &cbraces;&cm;&nl;&nl;  descendantOf&cl; function(element&cm; ancestor) &obraces;&nl;    element = $(element)&cm; ancestor = $(ancestor);&nl;&nl;    if (element.compareDocumentPosition)&nl;      return (element.compareDocumentPosition(ancestor) & 8) === 8;&nl;&nl;    if (ancestor.contains)&nl;      return ancestor.contains(element) && ancestor !== element;&nl;&nl;    while (element = element.parentNode)&nl;      if (element == ancestor) return true;&nl;&nl;    return false;&nl;  &cbraces;&cm;&nl;&nl;  scrollTo&cl; function(element) &obraces;&nl;    element = $(element);&nl;    var pos = element.cumulativeOffset();&nl;    window.scrollTo(pos[0]&cm; pos[1]);&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  getStyle&cl; function(element&cm; style) &obraces;&nl;    element = $(element);&nl;    style = style == &squote;float&squote; ? &squote;cssFloat&squote; &cl; style.camelize();&nl;    var value = element.style[style];&nl;    if (!value || value == &squote;auto&squote;) &obraces;&nl;      var css = document.defaultView.getComputedStyle(element&cm; null);&nl;      value = css ? css[style] &cl; null;&nl;    &cbraces;&nl;    if (style == &squote;opacity&squote;) return value ? parseFloat(value) &cl; 1.0;&nl;    return value == &squote;auto&squote; ? null &cl; value;&nl;  &cbraces;&cm;&nl;&nl;  getOpacity&cl; function(element) &obraces;&nl;    return $(element).getStyle(&squote;opacity&squote;);&nl;  &cbraces;&cm;&nl;&nl;  setStyle&cl; function(element&cm; styles) &obraces;&nl;    element = $(element);&nl;    var elementStyle = element.style&cm; match;&nl;    if (Object.isString(styles)) &obraces;&nl;      element.style.cssText += &squote;;&squote; + styles;&nl;      return styles.include(&squote;opacity&squote;) ?&nl;        element.setOpacity(styles.match(/opacity&cl;&bkslash;s*(&bkslash;d?&bkslash;.?&bkslash;d*)/)[1]) &cl; element;&nl;    &cbraces;&nl;    for (var property in styles)&nl;      if (property == &squote;opacity&squote;) element.setOpacity(styles[property]);&nl;      else&nl;        elementStyle[(property == &squote;float&squote; || property == &squote;cssFloat&squote;) ?&nl;          (Object.isUndefined(elementStyle.styleFloat) ? &squote;cssFloat&squote; &cl; &squote;styleFloat&squote;) &cl;&nl;            property] = styles[property];&nl;&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  setOpacity&cl; function(element&cm; value) &obraces;&nl;    element = $(element);&nl;    element.style.opacity = (value == 1 || value === &squote;&squote;) ? &squote;&squote; &cl;&nl;      (value < 0.00001) ? 0 &cl; value;&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  getDimensions&cl; function(element) &obraces;&nl;    element = $(element);&nl;    var display = element.getStyle(&squote;display&squote;);&nl;    if (display != &squote;none&squote; && display != null) // Safari bug&nl;      return &obraces;width&cl; element.offsetWidth&cm; height&cl; element.offsetHeight&cbraces;;&nl;&nl;    // All *Width and *Height properties give 0 on elements with display none&cm;&nl;    // so enable the element temporarily&nl;    var els = element.style;&nl;    var originalVisibility = els.visibility;&nl;    var originalPosition = els.position;&nl;    var originalDisplay = els.display;&nl;    els.visibility = &squote;hidden&squote;;&nl;    els.position = &squote;absolute&squote;;&nl;    els.display = &squote;block&squote;;&nl;    var originalWidth = element.clientWidth;&nl;    var originalHeight = element.clientHeight;&nl;    els.display = originalDisplay;&nl;    els.position = originalPosition;&nl;    els.visibility = originalVisibility;&nl;    return &obraces;width&cl; originalWidth&cm; height&cl; originalHeight&cbraces;;&nl;  &cbraces;&cm;&nl;&nl;  makePositioned&cl; function(element) &obraces;&nl;    element = $(element);&nl;    var pos = Element.getStyle(element&cm; &squote;position&squote;);&nl;    if (pos == &squote;static&squote; || !pos) &obraces;&nl;      element._madePositioned = true;&nl;      element.style.position = &squote;relative&squote;;&nl;      // Opera returns the offset relative to the positioning context&cm; when an&nl;      // element is position relative but top and left have not been defined&nl;      if (Prototype.Browser.Opera) &obraces;&nl;        element.style.top = 0;&nl;        element.style.left = 0;&nl;      &cbraces;&nl;    &cbraces;&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  undoPositioned&cl; function(element) &obraces;&nl;    element = $(element);&nl;    if (element._madePositioned) &obraces;&nl;      element._madePositioned = undefined;&nl;      element.style.position =&nl;        element.style.top =&nl;        element.style.left =&nl;        element.style.bottom =&nl;        element.style.right = &squote;&squote;;&nl;    &cbraces;&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  makeClipping&cl; function(element) &obraces;&nl;    element = $(element);&nl;    if (element._overflow) return element;&nl;    element._overflow = Element.getStyle(element&cm; &squote;overflow&squote;) || &squote;auto&squote;;&nl;    if (element._overflow !== &squote;hidden&squote;)&nl;      element.style.overflow = &squote;hidden&squote;;&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  undoClipping&cl; function(element) &obraces;&nl;    element = $(element);&nl;    if (!element._overflow) return element;&nl;    element.style.overflow = element._overflow == &squote;auto&squote; ? &squote;&squote; &cl; element._overflow;&nl;    element._overflow = null;&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  cumulativeOffset&cl; function(element) &obraces;&nl;    var valueT = 0&cm; valueL = 0;&nl;    do &obraces;&nl;      valueT += element.offsetTop  || 0;&nl;      valueL += element.offsetLeft || 0;&nl;      element = element.offsetParent;&nl;    &cbraces; while (element);&nl;    return Element._returnOffset(valueL&cm; valueT);&nl;  &cbraces;&cm;&nl;&nl;  positionedOffset&cl; function(element) &obraces;&nl;    var valueT = 0&cm; valueL = 0;&nl;    do &obraces;&nl;      valueT += element.offsetTop  || 0;&nl;      valueL += element.offsetLeft || 0;&nl;      element = element.offsetParent;&nl;      if (element) &obraces;&nl;        if (element.tagName.toUpperCase() == &squote;BODY&squote;) break;&nl;        var p = Element.getStyle(element&cm; &squote;position&squote;);&nl;        if (p !== &squote;static&squote;) break;&nl;      &cbraces;&nl;    &cbraces; while (element);&nl;    return Element._returnOffset(valueL&cm; valueT);&nl;  &cbraces;&cm;&nl;&nl;  absolutize&cl; function(element) &obraces;&nl;    element = $(element);&nl;    if (element.getStyle(&squote;position&squote;) == &squote;absolute&squote;) return element;&nl;    // Position.prepare(); // To be done manually by Scripty when it needs it.&nl;&nl;    var offsets = element.positionedOffset();&nl;    var top     = offsets[1];&nl;    var left    = offsets[0];&nl;    var width   = element.clientWidth;&nl;    var height  = element.clientHeight;&nl;&nl;    element._originalLeft   = left - parseFloat(element.style.left  || 0);&nl;    element._originalTop    = top  - parseFloat(element.style.top || 0);&nl;    element._originalWidth  = element.style.width;&nl;    element._originalHeight = element.style.height;&nl;&nl;    element.style.position = &squote;absolute&squote;;&nl;    element.style.top    = top + &squote;px&squote;;&nl;    element.style.left   = left + &squote;px&squote;;&nl;    element.style.width  = width + &squote;px&squote;;&nl;    element.style.height = height + &squote;px&squote;;&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  relativize&cl; function(element) &obraces;&nl;    element = $(element);&nl;    if (element.getStyle(&squote;position&squote;) == &squote;relative&squote;) return element;&nl;    // Position.prepare(); // To be done manually by Scripty when it needs it.&nl;&nl;    element.style.position = &squote;relative&squote;;&nl;    var top  = parseFloat(element.style.top  || 0) - (element._originalTop || 0);&nl;    var left = parseFloat(element.style.left || 0) - (element._originalLeft || 0);&nl;&nl;    element.style.top    = top + &squote;px&squote;;&nl;    element.style.left   = left + &squote;px&squote;;&nl;    element.style.height = element._originalHeight;&nl;    element.style.width  = element._originalWidth;&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  cumulativeScrollOffset&cl; function(element) &obraces;&nl;    var valueT = 0&cm; valueL = 0;&nl;    do &obraces;&nl;      valueT += element.scrollTop  || 0;&nl;      valueL += element.scrollLeft || 0;&nl;      element = element.parentNode;&nl;    &cbraces; while (element);&nl;    return Element._returnOffset(valueL&cm; valueT);&nl;  &cbraces;&cm;&nl;&nl;  getOffsetParent&cl; function(element) &obraces;&nl;    if (element.offsetParent) return $(element.offsetParent);&nl;    if (element == document.body) return $(element);&nl;&nl;    while ((element = element.parentNode) && element != document.body)&nl;      if (Element.getStyle(element&cm; &squote;position&squote;) != &squote;static&squote;)&nl;        return $(element);&nl;&nl;    return $(document.body);&nl;  &cbraces;&cm;&nl;&nl;  viewportOffset&cl; function(forElement) &obraces;&nl;    var valueT = 0&cm; valueL = 0;&nl;&nl;    var element = forElement;&nl;    do &obraces;&nl;      valueT += element.offsetTop  || 0;&nl;      valueL += element.offsetLeft || 0;&nl;&nl;      // Safari fix&nl;      if (element.offsetParent == document.body &&&nl;        Element.getStyle(element&cm; &squote;position&squote;) == &squote;absolute&squote;) break;&nl;&nl;    &cbraces; while (element = element.offsetParent);&nl;&nl;    element = forElement;&nl;    do &obraces;&nl;      if (!Prototype.Browser.Opera || (element.tagName && (element.tagName.toUpperCase() == &squote;BODY&squote;))) &obraces;&nl;        valueT -= element.scrollTop  || 0;&nl;        valueL -= element.scrollLeft || 0;&nl;      &cbraces;&nl;    &cbraces; while (element = element.parentNode);&nl;&nl;    return Element._returnOffset(valueL&cm; valueT);&nl;  &cbraces;&cm;&nl;&nl;  clonePosition&cl; function(element&cm; source) &obraces;&nl;    var options = Object.extend(&obraces;&nl;      setLeft&cl;    true&cm;&nl;      setTop&cl;     true&cm;&nl;      setWidth&cl;   true&cm;&nl;      setHeight&cl;  true&cm;&nl;      offsetTop&cl;  0&cm;&nl;      offsetLeft&cl; 0&nl;    &cbraces;&cm; arguments[2] || &obraces; &cbraces;);&nl;&nl;    // find page position of source&nl;    source = $(source);&nl;    var p = source.viewportOffset();&nl;&nl;    // find coordinate system to use&nl;    element = $(element);&nl;    var delta = [0&cm; 0];&nl;    var parent = null;&nl;    // delta [0&cm;0] will do fine with position&cl; fixed elements&cm;&nl;    // position&cl;absolute needs offsetParent deltas&nl;    if (Element.getStyle(element&cm; &squote;position&squote;) == &squote;absolute&squote;) &obraces;&nl;      parent = element.getOffsetParent();&nl;      delta = parent.viewportOffset();&nl;    &cbraces;&nl;&nl;    // correct by body offsets (fixes Safari)&nl;    if (parent == document.body) &obraces;&nl;      delta[0] -= document.body.offsetLeft;&nl;      delta[1] -= document.body.offsetTop;&nl;    &cbraces;&nl;&nl;    // set position&nl;    if (options.setLeft)   element.style.left  = (p[0] - delta[0] + options.offsetLeft) + &squote;px&squote;;&nl;    if (options.setTop)    element.style.top   = (p[1] - delta[1] + options.offsetTop) + &squote;px&squote;;&nl;    if (options.setWidth)  element.style.width = source.offsetWidth + &squote;px&squote;;&nl;    if (options.setHeight) element.style.height = source.offsetHeight + &squote;px&squote;;&nl;    return element;&nl;  &cbraces;&nl;&cbraces;;&nl;&nl;Element.Methods.identify.counter = 1;&nl;&nl;Object.extend(Element.Methods&cm; &obraces;&nl;  getElementsBySelector&cl; Element.Methods.select&cm;&nl;  childElements&cl; Element.Methods.immediateDescendants&nl;&cbraces;);&nl;&nl;Element._attributeTranslations = &obraces;&nl;  write&cl; &obraces;&nl;    names&cl; &obraces;&nl;      className&cl; &squote;class&squote;&cm;&nl;      htmlFor&cl;   &squote;for&squote;&nl;    &cbraces;&cm;&nl;    values&cl; &obraces; &cbraces;&nl;  &cbraces;&nl;&cbraces;;&nl;&nl;if (Prototype.Browser.Opera) &obraces;&nl;  Element.Methods.getStyle = Element.Methods.getStyle.wrap(&nl;    function(proceed&cm; element&cm; style) &obraces;&nl;      switch (style) &obraces;&nl;        case &squote;left&squote;&cl; case &squote;top&squote;&cl; case &squote;right&squote;&cl; case &squote;bottom&squote;&cl;&nl;          if (proceed(element&cm; &squote;position&squote;) === &squote;static&squote;) return null;&nl;        case &squote;height&squote;&cl; case &squote;width&squote;&cl;&nl;          // returns &squote;0px&squote; for hidden elements; we want it to return null&nl;          if (!Element.visible(element)) return null;&nl;&nl;          // returns the border-box dimensions rather than the content-box&nl;          // dimensions&cm; so we subtract padding and borders from the value&nl;          var dim = parseInt(proceed(element&cm; style)&cm; 10);&nl;&nl;          if (dim !== element[&squote;offset&squote; + style.capitalize()])&nl;            return dim + &squote;px&squote;;&nl;&nl;          var properties;&nl;          if (style === &squote;height&squote;) &obraces;&nl;            properties = [&squote;border-top-width&squote;&cm; &squote;padding-top&squote;&cm;&nl;             &squote;padding-bottom&squote;&cm; &squote;border-bottom-width&squote;];&nl;          &cbraces;&nl;          else &obraces;&nl;            properties = [&squote;border-left-width&squote;&cm; &squote;padding-left&squote;&cm;&nl;             &squote;padding-right&squote;&cm; &squote;border-right-width&squote;];&nl;          &cbraces;&nl;          return properties.inject(dim&cm; function(memo&cm; property) &obraces;&nl;            var val = proceed(element&cm; property);&nl;            return val === null ? memo &cl; memo - parseInt(val&cm; 10);&nl;          &cbraces;) + &squote;px&squote;;&nl;        default&cl; return proceed(element&cm; style);&nl;      &cbraces;&nl;    &cbraces;&nl;  );&nl;&nl;  Element.Methods.readAttribute = Element.Methods.readAttribute.wrap(&nl;    function(proceed&cm; element&cm; attribute) &obraces;&nl;      if (attribute === &squote;title&squote;) return element.title;&nl;      return proceed(element&cm; attribute);&nl;    &cbraces;&nl;  );&nl;&cbraces;&nl;&nl;else if (Prototype.Browser.IE) &obraces;&nl;  // IE doesn&squote;t report offsets correctly for static elements&cm; so we change them&nl;  // to &quote;relative&quote; to get the values&cm; then change them back.&nl;  Element.Methods.getOffsetParent = Element.Methods.getOffsetParent.wrap(&nl;    function(proceed&cm; element) &obraces;&nl;      element = $(element);&nl;      // IE throws an error if element is not in document&nl;      try &obraces; element.offsetParent &cbraces;&nl;      catch(e) &obraces; return $(document.body) &cbraces;&nl;      var position = element.getStyle(&squote;position&squote;);&nl;      if (position !== &squote;static&squote;) return proceed(element);&nl;      element.setStyle(&obraces; position&cl; &squote;relative&squote; &cbraces;);&nl;      var value = proceed(element);&nl;      element.setStyle(&obraces; position&cl; position &cbraces;);&nl;      return value;&nl;    &cbraces;&nl;  );&nl;&nl;  $w(&squote;positionedOffset viewportOffset&squote;).each(function(method) &obraces;&nl;    Element.Methods[method] = Element.Methods[method].wrap(&nl;      function(proceed&cm; element) &obraces;&nl;        element = $(element);&nl;        try &obraces; element.offsetParent &cbraces;&nl;        catch(e) &obraces; return Element._returnOffset(0&cm;0) &cbraces;&nl;        var position = element.getStyle(&squote;position&squote;);&nl;        if (position !== &squote;static&squote;) return proceed(element);&nl;        // Trigger hasLayout on the offset parent so that IE6 reports&nl;        // accurate offsetTop and offsetLeft values for position&cl; fixed.&nl;        var offsetParent = element.getOffsetParent();&nl;        if (offsetParent && offsetParent.getStyle(&squote;position&squote;) === &squote;fixed&squote;)&nl;          offsetParent.setStyle(&obraces; zoom&cl; 1 &cbraces;);&nl;        element.setStyle(&obraces; position&cl; &squote;relative&squote; &cbraces;);&nl;        var value = proceed(element);&nl;        element.setStyle(&obraces; position&cl; position &cbraces;);&nl;        return value;&nl;      &cbraces;&nl;    );&nl;  &cbraces;);&nl;&nl;  Element.Methods.cumulativeOffset = Element.Methods.cumulativeOffset.wrap(&nl;    function(proceed&cm; element) &obraces;&nl;      try &obraces; element.offsetParent &cbraces;&nl;      catch(e) &obraces; return Element._returnOffset(0&cm;0) &cbraces;&nl;      return proceed(element);&nl;    &cbraces;&nl;  );&nl;&nl;  Element.Methods.getStyle = function(element&cm; style) &obraces;&nl;    element = $(element);&nl;    style = (style == &squote;float&squote; || style == &squote;cssFloat&squote;) ? &squote;styleFloat&squote; &cl; style.camelize();&nl;    var value = element.style[style];&nl;    if (!value && element.currentStyle) value = element.currentStyle[style];&nl;&nl;    if (style == &squote;opacity&squote;) &obraces;&nl;      if (value = (element.getStyle(&squote;filter&squote;) || &squote;&squote;).match(/alpha&bkslash;(opacity=(.*)&bkslash;)/))&nl;        if (value[1]) return parseFloat(value[1]) / 100;&nl;      return 1.0;&nl;    &cbraces;&nl;&nl;    if (value == &squote;auto&squote;) &obraces;&nl;      if ((style == &squote;width&squote; || style == &squote;height&squote;) && (element.getStyle(&squote;display&squote;) != &squote;none&squote;))&nl;        return element[&squote;offset&squote; + style.capitalize()] + &squote;px&squote;;&nl;      return null;&nl;    &cbraces;&nl;    return value;&nl;  &cbraces;;&nl;&nl;  Element.Methods.setOpacity = function(element&cm; value) &obraces;&nl;    function stripAlpha(filter)&obraces;&nl;      return filter.replace(/alpha&bkslash;([^&bkslash;)]*&bkslash;)/gi&cm;&squote;&squote;);&nl;    &cbraces;&nl;    element = $(element);&nl;    var currentStyle = element.currentStyle;&nl;    if ((currentStyle && !currentStyle.hasLayout) ||&nl;      (!currentStyle && element.style.zoom == &squote;normal&squote;))&nl;        element.style.zoom = 1;&nl;&nl;    var filter = element.getStyle(&squote;filter&squote;)&cm; style = element.style;&nl;    if (value == 1 || value === &squote;&squote;) &obraces;&nl;      (filter = stripAlpha(filter)) ?&nl;        style.filter = filter &cl; style.removeAttribute(&squote;filter&squote;);&nl;      return element;&nl;    &cbraces; else if (value < 0.00001) value = 0;&nl;    style.filter = stripAlpha(filter) +&nl;      &squote;alpha(opacity=&squote; + (value * 100) + &squote;)&squote;;&nl;    return element;&nl;  &cbraces;;&nl;&nl;  Element._attributeTranslations = &obraces;&nl;    read&cl; &obraces;&nl;      names&cl; &obraces;&nl;        &squote;class&squote;&cl; &squote;className&squote;&cm;&nl;        &squote;for&squote;&cl;   &squote;htmlFor&squote;&nl;      &cbraces;&cm;&nl;      values&cl; &obraces;&nl;        _getAttr&cl; function(element&cm; attribute) &obraces;&nl;          return element.getAttribute(attribute&cm; 2);&nl;        &cbraces;&cm;&nl;        _getAttrNode&cl; function(element&cm; attribute) &obraces;&nl;          var node = element.getAttributeNode(attribute);&nl;          return node ? node.value &cl; &quote;&quote;;&nl;        &cbraces;&cm;&nl;        _getEv&cl; function(element&cm; attribute) &obraces;&nl;          attribute = element.getAttribute(attribute);&nl;          return attribute ? attribute.toString().slice(23&cm; -2) &cl; null;&nl;        &cbraces;&cm;&nl;        _flag&cl; function(element&cm; attribute) &obraces;&nl;          return $(element).hasAttribute(attribute) ? attribute &cl; null;&nl;        &cbraces;&cm;&nl;        style&cl; function(element) &obraces;&nl;          return element.style.cssText.toLowerCase();&nl;        &cbraces;&cm;&nl;        title&cl; function(element) &obraces;&nl;          return element.title;&nl;        &cbraces;&nl;      &cbraces;&nl;    &cbraces;&nl;  &cbraces;;&nl;&nl;  Element._attributeTranslations.write = &obraces;&nl;    names&cl; Object.extend(&obraces;&nl;      cellpadding&cl; &squote;cellPadding&squote;&cm;&nl;      cellspacing&cl; &squote;cellSpacing&squote;&nl;    &cbraces;&cm; Element._attributeTranslations.read.names)&cm;&nl;    values&cl; &obraces;&nl;      checked&cl; function(element&cm; value) &obraces;&nl;        element.checked = !!value;&nl;      &cbraces;&cm;&nl;&nl;      style&cl; function(element&cm; value) &obraces;&nl;        element.style.cssText = value ? value &cl; &squote;&squote;;&nl;      &cbraces;&nl;    &cbraces;&nl;  &cbraces;;&nl;&nl;  Element._attributeTranslations.has = &obraces;&cbraces;;&nl;&nl;  $w(&squote;colSpan rowSpan vAlign dateTime accessKey tabIndex &squote; +&nl;      &squote;encType maxLength readOnly longDesc frameBorder&squote;).each(function(attr) &obraces;&nl;    Element._attributeTranslations.write.names[attr.toLowerCase()] = attr;&nl;    Element._attributeTranslations.has[attr.toLowerCase()] = attr;&nl;  &cbraces;);&nl;&nl;  (function(v) &obraces;&nl;    Object.extend(v&cm; &obraces;&nl;      href&cl;        v._getAttr&cm;&nl;      src&cl;         v._getAttr&cm;&nl;      type&cl;        v._getAttr&cm;&nl;      action&cl;      v._getAttrNode&cm;&nl;      disabled&cl;    v._flag&cm;&nl;      checked&cl;     v._flag&cm;&nl;      readonly&cl;    v._flag&cm;&nl;      multiple&cl;    v._flag&cm;&nl;      onload&cl;      v._getEv&cm;&nl;      onunload&cl;    v._getEv&cm;&nl;      onclick&cl;     v._getEv&cm;&nl;      ondblclick&cl;  v._getEv&cm;&nl;      onmousedown&cl; v._getEv&cm;&nl;      onmouseup&cl;   v._getEv&cm;&nl;      onmouseover&cl; v._getEv&cm;&nl;      onmousemove&cl; v._getEv&cm;&nl;      onmouseout&cl;  v._getEv&cm;&nl;      onfocus&cl;     v._getEv&cm;&nl;      onblur&cl;      v._getEv&cm;&nl;      onkeypress&cl;  v._getEv&cm;&nl;      onkeydown&cl;   v._getEv&cm;&nl;      onkeyup&cl;     v._getEv&cm;&nl;      onsubmit&cl;    v._getEv&cm;&nl;      onreset&cl;     v._getEv&cm;&nl;      onselect&cl;    v._getEv&cm;&nl;      onchange&cl;    v._getEv&nl;    &cbraces;);&nl;  &cbraces;)(Element._attributeTranslations.read.values);&nl;&cbraces;&nl;&nl;else if (Prototype.Browser.Gecko && /rv&cl;1&bkslash;.8&bkslash;.0/.test(navigator.userAgent)) &obraces;&nl;  Element.Methods.setOpacity = function(element&cm; value) &obraces;&nl;    element = $(element);&nl;    element.style.opacity = (value == 1) ? 0.999999 &cl;&nl;      (value === &squote;&squote;) ? &squote;&squote; &cl; (value < 0.00001) ? 0 &cl; value;&nl;    return element;&nl;  &cbraces;;&nl;&cbraces;&nl;&nl;else if (Prototype.Browser.WebKit) &obraces;&nl;  Element.Methods.setOpacity = function(element&cm; value) &obraces;&nl;    element = $(element);&nl;    element.style.opacity = (value == 1 || value === &squote;&squote;) ? &squote;&squote; &cl;&nl;      (value < 0.00001) ? 0 &cl; value;&nl;&nl;    if (value == 1)&nl;      if(element.tagName.toUpperCase() == &squote;IMG&squote; && element.width) &obraces;&nl;        element.width++; element.width--;&nl;      &cbraces; else try &obraces;&nl;        var n = document.createTextNode(&squote; &squote;);&nl;        element.appendChild(n);&nl;        element.removeChild(n);&nl;      &cbraces; catch (e) &obraces; &cbraces;&nl;&nl;    return element;&nl;  &cbraces;;&nl;&nl;  // Safari returns margins on body which is incorrect if the child is absolutely&nl;  // positioned.  For performance reasons&cm; redefine Element#cumulativeOffset for&nl;  // KHTML/WebKit only.&nl;  Element.Methods.cumulativeOffset = function(element) &obraces;&nl;    var valueT = 0&cm; valueL = 0;&nl;    do &obraces;&nl;      valueT += element.offsetTop  || 0;&nl;      valueL += element.offsetLeft || 0;&nl;      if (element.offsetParent == document.body)&nl;        if (Element.getStyle(element&cm; &squote;position&squote;) == &squote;absolute&squote;) break;&nl;&nl;      element = element.offsetParent;&nl;    &cbraces; while (element);&nl;&nl;    return Element._returnOffset(valueL&cm; valueT);&nl;  &cbraces;;&nl;&cbraces;&nl;&nl;if (Prototype.Browser.IE || Prototype.Browser.Opera) &obraces;&nl;  // IE and Opera are missing .innerHTML support for TABLE-related and SELECT elements&nl;  Element.Methods.update = function(element&cm; content) &obraces;&nl;    element = $(element);&nl;&nl;    if (content && content.toElement) content = content.toElement();&nl;    if (Object.isElement(content)) return element.update().insert(content);&nl;&nl;    content = Object.toHTML(content);&nl;    var tagName = element.tagName.toUpperCase();&nl;&nl;    if (tagName in Element._insertionTranslations.tags) &obraces;&nl;      $A(element.childNodes).each(function(node) &obraces; element.removeChild(node) &cbraces;);&nl;      Element._getContentFromAnonymousElement(tagName&cm; content.stripScripts())&nl;        .each(function(node) &obraces; element.appendChild(node) &cbraces;);&nl;    &cbraces;&nl;    else element.innerHTML = content.stripScripts();&nl;&nl;    content.evalScripts.bind(content).defer();&nl;    return element;&nl;  &cbraces;;&nl;&cbraces;&nl;&nl;if (&squote;outerHTML&squote; in document.createElement(&squote;div&squote;)) &obraces;&nl;  Element.Methods.replace = function(element&cm; content) &obraces;&nl;    element = $(element);&nl;&nl;    if (content && content.toElement) content = content.toElement();&nl;    if (Object.isElement(content)) &obraces;&nl;      element.parentNode.replaceChild(content&cm; element);&nl;      return element;&nl;    &cbraces;&nl;&nl;    content = Object.toHTML(content);&nl;    var parent = element.parentNode&cm; tagName = parent.tagName.toUpperCase();&nl;&nl;    if (Element._insertionTranslations.tags[tagName]) &obraces;&nl;      var nextSibling = element.next();&nl;      var fragments = Element._getContentFromAnonymousElement(tagName&cm; content.stripScripts());&nl;      parent.removeChild(element);&nl;      if (nextSibling)&nl;        fragments.each(function(node) &obraces; parent.insertBefore(node&cm; nextSibling) &cbraces;);&nl;      else&nl;        fragments.each(function(node) &obraces; parent.appendChild(node) &cbraces;);&nl;    &cbraces;&nl;    else element.outerHTML = content.stripScripts();&nl;&nl;    content.evalScripts.bind(content).defer();&nl;    return element;&nl;  &cbraces;;&nl;&cbraces;&nl;&nl;Element._returnOffset = function(l&cm; t) &obraces;&nl;  var result = [l&cm; t];&nl;  result.left = l;&nl;  result.top = t;&nl;  return result;&nl;&cbraces;;&nl;&nl;Element._getContentFromAnonymousElement = function(tagName&cm; html) &obraces;&nl;  var div = new Element(&squote;div&squote;)&cm; t = Element._insertionTranslations.tags[tagName];&nl;  if (t) &obraces;&nl;    div.innerHTML = t[0] + html + t[1];&nl;    t[2].times(function() &obraces; div = div.firstChild &cbraces;);&nl;  &cbraces; else div.innerHTML = html;&nl;  return $A(div.childNodes);&nl;&cbraces;;&nl;&nl;Element._insertionTranslations = &obraces;&nl;  before&cl; function(element&cm; node) &obraces;&nl;    element.parentNode.insertBefore(node&cm; element);&nl;  &cbraces;&cm;&nl;  top&cl; function(element&cm; node) &obraces;&nl;    element.insertBefore(node&cm; element.firstChild);&nl;  &cbraces;&cm;&nl;  bottom&cl; function(element&cm; node) &obraces;&nl;    element.appendChild(node);&nl;  &cbraces;&cm;&nl;  after&cl; function(element&cm; node) &obraces;&nl;    element.parentNode.insertBefore(node&cm; element.nextSibling);&nl;  &cbraces;&cm;&nl;  tags&cl; &obraces;&nl;    TABLE&cl;  [&squote;<table>&squote;&cm;                &squote;</table>&squote;&cm;                   1]&cm;&nl;    TBODY&cl;  [&squote;<table><tbody>&squote;&cm;         &squote;</tbody></table>&squote;&cm;           2]&cm;&nl;    TR&cl;     [&squote;<table><tbody><tr>&squote;&cm;     &squote;</tr></tbody></table>&squote;&cm;      3]&cm;&nl;    TD&cl;     [&squote;<table><tbody><tr><td>&squote;&cm; &squote;</td></tr></tbody></table>&squote;&cm; 4]&cm;&nl;    SELECT&cl; [&squote;<select>&squote;&cm;               &squote;</select>&squote;&cm;                  1]&nl;  &cbraces;&nl;&cbraces;;&nl;&nl;(function() &obraces;&nl;  Object.extend(this.tags&cm; &obraces;&nl;    THEAD&cl; this.tags.TBODY&cm;&nl;    TFOOT&cl; this.tags.TBODY&cm;&nl;    TH&cl;    this.tags.TD&nl;  &cbraces;);&nl;&cbraces;).call(Element._insertionTranslations);&nl;&nl;Element.Methods.Simulated = &obraces;&nl;  hasAttribute&cl; function(element&cm; attribute) &obraces;&nl;    attribute = Element._attributeTranslations.has[attribute] || attribute;&nl;    var node = $(element).getAttributeNode(attribute);&nl;    return !!(node && node.specified);&nl;  &cbraces;&nl;&cbraces;;&nl;&nl;Element.Methods.ByTag = &obraces; &cbraces;;&nl;&nl;Object.extend(Element&cm; Element.Methods);&nl;&nl;if (!Prototype.BrowserFeatures.ElementExtensions &&&nl;    document.createElement(&squote;div&squote;)[&squote;__proto__&squote;]) &obraces;&nl;  window.HTMLElement = &obraces; &cbraces;;&nl;  window.HTMLElement.prototype = document.createElement(&squote;div&squote;)[&squote;__proto__&squote;];&nl;  Prototype.BrowserFeatures.ElementExtensions = true;&nl;&cbraces;&nl;&nl;Element.extend = (function() &obraces;&nl;  if (Prototype.BrowserFeatures.SpecificElementExtensions)&nl;    return Prototype.K;&nl;&nl;  var Methods = &obraces; &cbraces;&cm; ByTag = Element.Methods.ByTag;&nl;&nl;  var extend = Object.extend(function(element) &obraces;&nl;    if (!element || element._extendedByPrototype ||&nl;        element.nodeType != 1 || element == window) return element;&nl;&nl;    var methods = Object.clone(Methods)&cm;&nl;      tagName = element.tagName.toUpperCase()&cm; property&cm; value;&nl;&nl;    // extend methods for specific tags&nl;    if (ByTag[tagName]) Object.extend(methods&cm; ByTag[tagName]);&nl;&nl;    for (property in methods) &obraces;&nl;      value = methods[property];&nl;      if (Object.isFunction(value) && !(property in element))&nl;        element[property] = value.methodize();&nl;    &cbraces;&nl;&nl;    element._extendedByPrototype = Prototype.emptyFunction;&nl;    return element;&nl;&nl;  &cbraces;&cm; &obraces;&nl;    refresh&cl; function() &obraces;&nl;      // extend methods for all tags (Safari doesn&squote;t need this)&nl;      if (!Prototype.BrowserFeatures.ElementExtensions) &obraces;&nl;        Object.extend(Methods&cm; Element.Methods);&nl;        Object.extend(Methods&cm; Element.Methods.Simulated);&nl;      &cbraces;&nl;    &cbraces;&nl;  &cbraces;);&nl;&nl;  extend.refresh();&nl;  return extend;&nl;&cbraces;)();&nl;&nl;Element.hasAttribute = function(element&cm; attribute) &obraces;&nl;  if (element.hasAttribute) return element.hasAttribute(attribute);&nl;  return Element.Methods.Simulated.hasAttribute(element&cm; attribute);&nl;&cbraces;;&nl;&nl;Element.addMethods = function(methods) &obraces;&nl;  var F = Prototype.BrowserFeatures&cm; T = Element.Methods.ByTag;&nl;&nl;  if (!methods) &obraces;&nl;    Object.extend(Form&cm; Form.Methods);&nl;    Object.extend(Form.Element&cm; Form.Element.Methods);&nl;    Object.extend(Element.Methods.ByTag&cm; &obraces;&nl;      &quote;FORM&quote;&cl;     Object.clone(Form.Methods)&cm;&nl;      &quote;INPUT&quote;&cl;    Object.clone(Form.Element.Methods)&cm;&nl;      &quote;SELECT&quote;&cl;   Object.clone(Form.Element.Methods)&cm;&nl;      &quote;TEXTAREA&quote;&cl; Object.clone(Form.Element.Methods)&nl;    &cbraces;);&nl;  &cbraces;&nl;&nl;  if (arguments.length == 2) &obraces;&nl;    var tagName = methods;&nl;    methods = arguments[1];&nl;  &cbraces;&nl;&nl;  if (!tagName) Object.extend(Element.Methods&cm; methods || &obraces; &cbraces;);&nl;  else &obraces;&nl;    if (Object.isArray(tagName)) tagName.each(extend);&nl;    else extend(tagName);&nl;  &cbraces;&nl;&nl;  function extend(tagName) &obraces;&nl;    tagName = tagName.toUpperCase();&nl;    if (!Element.Methods.ByTag[tagName])&nl;      Element.Methods.ByTag[tagName] = &obraces; &cbraces;;&nl;    Object.extend(Element.Methods.ByTag[tagName]&cm; methods);&nl;  &cbraces;&nl;&nl;  function copy(methods&cm; destination&cm; onlyIfAbsent) &obraces;&nl;    onlyIfAbsent = onlyIfAbsent || false;&nl;    for (var property in methods) &obraces;&nl;      var value = methods[property];&nl;      if (!Object.isFunction(value)) continue;&nl;      if (!onlyIfAbsent || !(property in destination))&nl;        destination[property] = value.methodize();&nl;    &cbraces;&nl;  &cbraces;&nl;&nl;  function findDOMClass(tagName) &obraces;&nl;    var klass;&nl;    var trans = &obraces;&nl;      &quote;OPTGROUP&quote;&cl; &quote;OptGroup&quote;&cm; &quote;TEXTAREA&quote;&cl; &quote;TextArea&quote;&cm; &quote;P&quote;&cl; &quote;Paragraph&quote;&cm;&nl;      &quote;FIELDSET&quote;&cl; &quote;FieldSet&quote;&cm; &quote;UL&quote;&cl; &quote;UList&quote;&cm; &quote;OL&quote;&cl; &quote;OList&quote;&cm; &quote;DL&quote;&cl; &quote;DList&quote;&cm;&nl;      &quote;DIR&quote;&cl; &quote;Directory&quote;&cm; &quote;H1&quote;&cl; &quote;Heading&quote;&cm; &quote;H2&quote;&cl; &quote;Heading&quote;&cm; &quote;H3&quote;&cl; &quote;Heading&quote;&cm;&nl;      &quote;H4&quote;&cl; &quote;Heading&quote;&cm; &quote;H5&quote;&cl; &quote;Heading&quote;&cm; &quote;H6&quote;&cl; &quote;Heading&quote;&cm; &quote;Q&quote;&cl; &quote;Quote&quote;&cm;&nl;      &quote;INS&quote;&cl; &quote;Mod&quote;&cm; &quote;DEL&quote;&cl; &quote;Mod&quote;&cm; &quote;A&quote;&cl; &quote;Anchor&quote;&cm; &quote;IMG&quote;&cl; &quote;Image&quote;&cm; &quote;CAPTION&quote;&cl;&nl;      &quote;TableCaption&quote;&cm; &quote;COL&quote;&cl; &quote;TableCol&quote;&cm; &quote;COLGROUP&quote;&cl; &quote;TableCol&quote;&cm; &quote;THEAD&quote;&cl;&nl;      &quote;TableSection&quote;&cm; &quote;TFOOT&quote;&cl; &quote;TableSection&quote;&cm; &quote;TBODY&quote;&cl; &quote;TableSection&quote;&cm; &quote;TR&quote;&cl;&nl;      &quote;TableRow&quote;&cm; &quote;TH&quote;&cl; &quote;TableCell&quote;&cm; &quote;TD&quote;&cl; &quote;TableCell&quote;&cm; &quote;FRAMESET&quote;&cl;&nl;      &quote;FrameSet&quote;&cm; &quote;IFRAME&quote;&cl; &quote;IFrame&quote;&nl;    &cbraces;;&nl;    if (trans[tagName]) klass = &squote;HTML&squote; + trans[tagName] + &squote;Element&squote;;&nl;    if (window[klass]) return window[klass];&nl;    klass = &squote;HTML&squote; + tagName + &squote;Element&squote;;&nl;    if (window[klass]) return window[klass];&nl;    klass = &squote;HTML&squote; + tagName.capitalize() + &squote;Element&squote;;&nl;    if (window[klass]) return window[klass];&nl;&nl;    window[klass] = &obraces; &cbraces;;&nl;    window[klass].prototype = document.createElement(tagName)[&squote;__proto__&squote;];&nl;    return window[klass];&nl;  &cbraces;&nl;&nl;  if (F.ElementExtensions) &obraces;&nl;    copy(Element.Methods&cm; HTMLElement.prototype);&nl;    copy(Element.Methods.Simulated&cm; HTMLElement.prototype&cm; true);&nl;  &cbraces;&nl;&nl;  if (F.SpecificElementExtensions) &obraces;&nl;    for (var tag in Element.Methods.ByTag) &obraces;&nl;      var klass = findDOMClass(tag);&nl;      if (Object.isUndefined(klass)) continue;&nl;      copy(T[tag]&cm; klass.prototype);&nl;    &cbraces;&nl;  &cbraces;&nl;&nl;  Object.extend(Element&cm; Element.Methods);&nl;  delete Element.ByTag;&nl;&nl;  if (Element.extend.refresh) Element.extend.refresh();&nl;  Element.cache = &obraces; &cbraces;;&nl;&cbraces;;&nl;&nl;document.viewport = &obraces;&nl;  getDimensions&cl; function() &obraces;&nl;    var dimensions = &obraces; &cbraces;&cm; B = Prototype.Browser;&nl;    $w(&squote;width height&squote;).each(function(d) &obraces;&nl;      var D = d.capitalize();&nl;      if (B.WebKit && !document.evaluate) &obraces;&nl;        // Safari <3.0 needs self.innerWidth/Height&nl;        dimensions[d] = self[&squote;inner&squote; + D];&nl;      &cbraces; else if (B.Opera && parseFloat(window.opera.version()) < 9.5) &obraces;&nl;        // Opera <9.5 needs document.body.clientWidth/Height&nl;        dimensions[d] = document.body[&squote;client&squote; + D]&nl;      &cbraces; else &obraces;&nl;        dimensions[d] = document.documentElement[&squote;client&squote; + D];&nl;      &cbraces;&nl;    &cbraces;);&nl;    return dimensions;&nl;  &cbraces;&cm;&nl;&nl;  getWidth&cl; function() &obraces;&nl;    return this.getDimensions().width;&nl;  &cbraces;&cm;&nl;&nl;  getHeight&cl; function() &obraces;&nl;    return this.getDimensions().height;&nl;  &cbraces;&cm;&nl;&nl;  getScrollOffsets&cl; function() &obraces;&nl;    return Element._returnOffset(&nl;      window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft&cm;&nl;      window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop);&nl;  &cbraces;&nl;&cbraces;;&nl;/* Portions of the Selector class are derived from Jack Slocum&squote;s DomQuery&cm;&nl; * part of YUI-Ext version 0.40&cm; distributed under the terms of an MIT-style&nl; * license.  Please see http&cl;//www.yui-ext.com/ for more information. */&nl;&nl;var Selector = Class.create(&obraces;&nl;  initialize&cl; function(expression) &obraces;&nl;    this.expression = expression.strip();&nl;&nl;    if (this.shouldUseSelectorsAPI()) &obraces;&nl;      this.mode = &squote;selectorsAPI&squote;;&nl;    &cbraces; else if (this.shouldUseXPath()) &obraces;&nl;      this.mode = &squote;xpath&squote;;&nl;      this.compileXPathMatcher();&nl;    &cbraces; else &obraces;&nl;      this.mode = &quote;normal&quote;;&nl;      this.compileMatcher();&nl;    &cbraces;&nl;&nl;  &cbraces;&cm;&nl;&nl;  shouldUseXPath&cl; function() &obraces;&nl;    if (!Prototype.BrowserFeatures.XPath) return false;&nl;&nl;    var e = this.expression;&nl;&nl;    // Safari 3 chokes on &cl;*-of-type and &cl;empty&nl;    if (Prototype.Browser.WebKit &&&nl;     (e.include(&quote;-of-type&quote;) || e.include(&quote;&cl;empty&quote;)))&nl;      return false;&nl;&nl;    // XPath can&squote;t do namespaced attributes&cm; nor can it read&nl;    // the &quote;checked&quote; property from DOM nodes&nl;    if ((/(&bkslash;[[&bkslash;w-]*?&cl;|&cl;checked)/).test(e))&nl;      return false;&nl;&nl;    return true;&nl;  &cbraces;&cm;&nl;&nl;  shouldUseSelectorsAPI&cl; function() &obraces;&nl;    if (!Prototype.BrowserFeatures.SelectorsAPI) return false;&nl;&nl;    if (!Selector._div) Selector._div = new Element(&squote;div&squote;);&nl;&nl;    // Make sure the browser treats the selector as valid. Test on an&nl;    // isolated element to minimize cost of this check.&nl;    try &obraces;&nl;      Selector._div.querySelector(this.expression);&nl;    &cbraces; catch(e) &obraces;&nl;      return false;&nl;    &cbraces;&nl;&nl;    return true;&nl;  &cbraces;&cm;&nl;&nl;  compileMatcher&cl; function() &obraces;&nl;    var e = this.expression&cm; ps = Selector.patterns&cm; h = Selector.handlers&cm;&nl;        c = Selector.criteria&cm; le&cm; p&cm; m;&nl;&nl;    if (Selector._cache[e]) &obraces;&nl;      this.matcher = Selector._cache[e];&nl;      return;&nl;    &cbraces;&nl;&nl;    this.matcher = [&quote;this.matcher = function(root) &obraces;&quote;&cm;&nl;                    &quote;var r = root&cm; h = Selector.handlers&cm; c = false&cm; n;&quote;];&nl;&nl;    while (e && le != e && (/&bkslash;S/).test(e)) &obraces;&nl;      le = e;&nl;      for (var i in ps) &obraces;&nl;        p = ps[i];&nl;        if (m = e.match(p)) &obraces;&nl;          this.matcher.push(Object.isFunction(c[i]) ? c[i](m) &cl;&nl;            new Template(c[i]).evaluate(m));&nl;          e = e.replace(m[0]&cm; &squote;&squote;);&nl;          break;&nl;        &cbraces;&nl;      &cbraces;&nl;    &cbraces;&nl;&nl;    this.matcher.push(&quote;return h.unique(n);&bkslash;n&cbraces;&quote;);&nl;    eval(this.matcher.join(&squote;&bkslash;n&squote;));&nl;    Selector._cache[this.expression] = this.matcher;&nl;  &cbraces;&cm;&nl;&nl;  compileXPathMatcher&cl; function() &obraces;&nl;    var e = this.expression&cm; ps = Selector.patterns&cm;&nl;        x = Selector.xpath&cm; le&cm; m;&nl;&nl;    if (Selector._cache[e]) &obraces;&nl;      this.xpath = Selector._cache[e]; return;&nl;    &cbraces;&nl;&nl;    this.matcher = [&squote;.//*&squote;];&nl;    while (e && le != e && (/&bkslash;S/).test(e)) &obraces;&nl;      le = e;&nl;      for (var i in ps) &obraces;&nl;        if (m = e.match(ps[i])) &obraces;&nl;          this.matcher.push(Object.isFunction(x[i]) ? x[i](m) &cl;&nl;            new Template(x[i]).evaluate(m));&nl;          e = e.replace(m[0]&cm; &squote;&squote;);&nl;          break;&nl;        &cbraces;&nl;      &cbraces;&nl;    &cbraces;&nl;&nl;    this.xpath = this.matcher.join(&squote;&squote;);&nl;    Selector._cache[this.expression] = this.xpath;&nl;  &cbraces;&cm;&nl;&nl;  findElements&cl; function(root) &obraces;&nl;    root = root || document;&nl;    var e = this.expression&cm; results;&nl;&nl;    switch (this.mode) &obraces;&nl;      case &squote;selectorsAPI&squote;&cl;&nl;        // querySelectorAll queries document-wide&cm; then filters to descendants&nl;        // of the context element. That&squote;s not what we want.&nl;        // Add an explicit context to the selector if necessary.&nl;        if (root !== document) &obraces;&nl;          var oldId = root.id&cm; id = $(root).identify();&nl;          e = &quote;#&quote; + id + &quote; &quote; + e;&nl;        &cbraces;&nl;&nl;        results = $A(root.querySelectorAll(e)).map(Element.extend);&nl;        root.id = oldId;&nl;&nl;        return results;&nl;      case &squote;xpath&squote;&cl;&nl;        return document._getElementsByXPath(this.xpath&cm; root);&nl;      default&cl;&nl;       return this.matcher(root);&nl;    &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  match&cl; function(element) &obraces;&nl;    this.tokens = [];&nl;&nl;    var e = this.expression&cm; ps = Selector.patterns&cm; as = Selector.assertions;&nl;    var le&cm; p&cm; m;&nl;&nl;    while (e && le !== e && (/&bkslash;S/).test(e)) &obraces;&nl;      le = e;&nl;      for (var i in ps) &obraces;&nl;        p = ps[i];&nl;        if (m = e.match(p)) &obraces;&nl;          // use the Selector.assertions methods unless the selector&nl;          // is too complex.&nl;          if (as[i]) &obraces;&nl;            this.tokens.push([i&cm; Object.clone(m)]);&nl;            e = e.replace(m[0]&cm; &squote;&squote;);&nl;          &cbraces; else &obraces;&nl;            // reluctantly do a document-wide search&nl;            // and look for a match in the array&nl;            return this.findElements(document).include(element);&nl;          &cbraces;&nl;        &cbraces;&nl;      &cbraces;&nl;    &cbraces;&nl;&nl;    var match = true&cm; name&cm; matches;&nl;    for (var i = 0&cm; token; token = this.tokens[i]; i++) &obraces;&nl;      name = token[0]&cm; matches = token[1];&nl;      if (!Selector.assertions[name](element&cm; matches)) &obraces;&nl;        match = false; break;&nl;      &cbraces;&nl;    &cbraces;&nl;&nl;    return match;&nl;  &cbraces;&cm;&nl;&nl;  toString&cl; function() &obraces;&nl;    return this.expression;&nl;  &cbraces;&cm;&nl;&nl;  inspect&cl; function() &obraces;&nl;    return &quote;#<Selector&cl;&quote; + this.expression.inspect() + &quote;>&quote;;&nl;  &cbraces;&nl;&cbraces;);&nl;&nl;Object.extend(Selector&cm; &obraces;&nl;  _cache&cl; &obraces; &cbraces;&cm;&nl;&nl;  xpath&cl; &obraces;&nl;    descendant&cl;   &quote;//*&quote;&cm;&nl;    child&cl;        &quote;/*&quote;&cm;&nl;    adjacent&cl;     &quote;/following-sibling&cl;&cl;*[1]&quote;&cm;&nl;    laterSibling&cl; &squote;/following-sibling&cl;&cl;*&squote;&cm;&nl;    tagName&cl;      function(m) &obraces;&nl;      if (m[1] == &squote;*&squote;) return &squote;&squote;;&nl;      return &quote;[local-name()=&squote;&quote; + m[1].toLowerCase() +&nl;             &quote;&squote; or local-name()=&squote;&quote; + m[1].toUpperCase() + &quote;&squote;]&quote;;&nl;    &cbraces;&cm;&nl;    className&cl;    &quote;[contains(concat(&squote; &squote;&cm; @class&cm; &squote; &squote;)&cm; &squote; #&obraces;1&cbraces; &squote;)]&quote;&cm;&nl;    id&cl;           &quote;[@id=&squote;#&obraces;1&cbraces;&squote;]&quote;&cm;&nl;    attrPresence&cl; function(m) &obraces;&nl;      m[1] = m[1].toLowerCase();&nl;      return new Template(&quote;[@#&obraces;1&cbraces;]&quote;).evaluate(m);&nl;    &cbraces;&cm;&nl;    attr&cl; function(m) &obraces;&nl;      m[1] = m[1].toLowerCase();&nl;      m[3] = m[5] || m[6];&nl;      return new Template(Selector.xpath.operators[m[2]]).evaluate(m);&nl;    &cbraces;&cm;&nl;    pseudo&cl; function(m) &obraces;&nl;      var h = Selector.xpath.pseudos[m[1]];&nl;      if (!h) return &squote;&squote;;&nl;      if (Object.isFunction(h)) return h(m);&nl;      return new Template(Selector.xpath.pseudos[m[1]]).evaluate(m);&nl;    &cbraces;&cm;&nl;    operators&cl; &obraces;&nl;      &squote;=&squote;&cl;  &quote;[@#&obraces;1&cbraces;=&squote;#&obraces;3&cbraces;&squote;]&quote;&cm;&nl;      &squote;!=&squote;&cl; &quote;[@#&obraces;1&cbraces;!=&squote;#&obraces;3&cbraces;&squote;]&quote;&cm;&nl;      &squote;^=&squote;&cl; &quote;[starts-with(@#&obraces;1&cbraces;&cm; &squote;#&obraces;3&cbraces;&squote;)]&quote;&cm;&nl;      &squote;$=&squote;&cl; &quote;[substring(@#&obraces;1&cbraces;&cm; (string-length(@#&obraces;1&cbraces;) - string-length(&squote;#&obraces;3&cbraces;&squote;) + 1))=&squote;#&obraces;3&cbraces;&squote;]&quote;&cm;&nl;      &squote;*=&squote;&cl; &quote;[contains(@#&obraces;1&cbraces;&cm; &squote;#&obraces;3&cbraces;&squote;)]&quote;&cm;&nl;      &squote;~=&squote;&cl; &quote;[contains(concat(&squote; &squote;&cm; @#&obraces;1&cbraces;&cm; &squote; &squote;)&cm; &squote; #&obraces;3&cbraces; &squote;)]&quote;&cm;&nl;      &squote;|=&squote;&cl; &quote;[contains(concat(&squote;-&squote;&cm; @#&obraces;1&cbraces;&cm; &squote;-&squote;)&cm; &squote;-#&obraces;3&cbraces;-&squote;)]&quote;&nl;    &cbraces;&cm;&nl;    pseudos&cl; &obraces;&nl;      &squote;first-child&squote;&cl; &squote;[not(preceding-sibling&cl;&cl;*)]&squote;&cm;&nl;      &squote;last-child&squote;&cl;  &squote;[not(following-sibling&cl;&cl;*)]&squote;&cm;&nl;      &squote;only-child&squote;&cl;  &squote;[not(preceding-sibling&cl;&cl;* or following-sibling&cl;&cl;*)]&squote;&cm;&nl;      &squote;empty&squote;&cl;       &quote;[count(*) = 0 and (count(text()) = 0)]&quote;&cm;&nl;      &squote;checked&squote;&cl;     &quote;[@checked]&quote;&cm;&nl;      &squote;disabled&squote;&cl;    &quote;[(@disabled) and (@type!=&squote;hidden&squote;)]&quote;&cm;&nl;      &squote;enabled&squote;&cl;     &quote;[not(@disabled) and (@type!=&squote;hidden&squote;)]&quote;&cm;&nl;      &squote;not&squote;&cl; function(m) &obraces;&nl;        var e = m[6]&cm; p = Selector.patterns&cm;&nl;            x = Selector.xpath&cm; le&cm; v;&nl;&nl;        var exclusion = [];&nl;        while (e && le != e && (/&bkslash;S/).test(e)) &obraces;&nl;          le = e;&nl;          for (var i in p) &obraces;&nl;            if (m = e.match(p[i])) &obraces;&nl;              v = Object.isFunction(x[i]) ? x[i](m) &cl; new Template(x[i]).evaluate(m);&nl;              exclusion.push(&quote;(&quote; + v.substring(1&cm; v.length - 1) + &quote;)&quote;);&nl;              e = e.replace(m[0]&cm; &squote;&squote;);&nl;              break;&nl;            &cbraces;&nl;          &cbraces;&nl;        &cbraces;&nl;        return &quote;[not(&quote; + exclusion.join(&quote; and &quote;) + &quote;)]&quote;;&nl;      &cbraces;&cm;&nl;      &squote;nth-child&squote;&cl;      function(m) &obraces;&nl;        return Selector.xpath.pseudos.nth(&quote;(count(./preceding-sibling&cl;&cl;*) + 1) &quote;&cm; m);&nl;      &cbraces;&cm;&nl;      &squote;nth-last-child&squote;&cl; function(m) &obraces;&nl;        return Selector.xpath.pseudos.nth(&quote;(count(./following-sibling&cl;&cl;*) + 1) &quote;&cm; m);&nl;      &cbraces;&cm;&nl;      &squote;nth-of-type&squote;&cl;    function(m) &obraces;&nl;        return Selector.xpath.pseudos.nth(&quote;position() &quote;&cm; m);&nl;      &cbraces;&cm;&nl;      &squote;nth-last-of-type&squote;&cl; function(m) &obraces;&nl;        return Selector.xpath.pseudos.nth(&quote;(last() + 1 - position()) &quote;&cm; m);&nl;      &cbraces;&cm;&nl;      &squote;first-of-type&squote;&cl;  function(m) &obraces;&nl;        m[6] = &quote;1&quote;; return Selector.xpath.pseudos[&squote;nth-of-type&squote;](m);&nl;      &cbraces;&cm;&nl;      &squote;last-of-type&squote;&cl;   function(m) &obraces;&nl;        m[6] = &quote;1&quote;; return Selector.xpath.pseudos[&squote;nth-last-of-type&squote;](m);&nl;      &cbraces;&cm;&nl;      &squote;only-of-type&squote;&cl;   function(m) &obraces;&nl;        var p = Selector.xpath.pseudos; return p[&squote;first-of-type&squote;](m) + p[&squote;last-of-type&squote;](m);&nl;      &cbraces;&cm;&nl;      nth&cl; function(fragment&cm; m) &obraces;&nl;        var mm&cm; formula = m[6]&cm; predicate;&nl;        if (formula == &squote;even&squote;) formula = &squote;2n+0&squote;;&nl;        if (formula == &squote;odd&squote;)  formula = &squote;2n+1&squote;;&nl;        if (mm = formula.match(/^(&bkslash;d+)$/)) // digit only&nl;          return &squote;[&squote; + fragment + &quote;= &quote; + mm[1] + &squote;]&squote;;&nl;        if (mm = formula.match(/^(-?&bkslash;d*)?n(([+-])(&bkslash;d+))?/)) &obraces; // an+b&nl;          if (mm[1] == &quote;-&quote;) mm[1] = -1;&nl;          var a = mm[1] ? Number(mm[1]) &cl; 1;&nl;          var b = mm[2] ? Number(mm[2]) &cl; 0;&nl;          predicate = &quote;[((#&obraces;fragment&cbraces; - #&obraces;b&cbraces;) mod #&obraces;a&cbraces; = 0) and &quote; +&nl;          &quote;((#&obraces;fragment&cbraces; - #&obraces;b&cbraces;) div #&obraces;a&cbraces; >= 0)]&quote;;&nl;          return new Template(predicate).evaluate(&obraces;&nl;            fragment&cl; fragment&cm; a&cl; a&cm; b&cl; b &cbraces;);&nl;        &cbraces;&nl;      &cbraces;&nl;    &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  criteria&cl; &obraces;&nl;    tagName&cl;      &squote;n = h.tagName(n&cm; r&cm; &quote;#&obraces;1&cbraces;&quote;&cm; c);      c = false;&squote;&cm;&nl;    className&cl;    &squote;n = h.className(n&cm; r&cm; &quote;#&obraces;1&cbraces;&quote;&cm; c);    c = false;&squote;&cm;&nl;    id&cl;           &squote;n = h.id(n&cm; r&cm; &quote;#&obraces;1&cbraces;&quote;&cm; c);           c = false;&squote;&cm;&nl;    attrPresence&cl; &squote;n = h.attrPresence(n&cm; r&cm; &quote;#&obraces;1&cbraces;&quote;&cm; c); c = false;&squote;&cm;&nl;    attr&cl; function(m) &obraces;&nl;      m[3] = (m[5] || m[6]);&nl;      return new Template(&squote;n = h.attr(n&cm; r&cm; &quote;#&obraces;1&cbraces;&quote;&cm; &quote;#&obraces;3&cbraces;&quote;&cm; &quote;#&obraces;2&cbraces;&quote;&cm; c); c = false;&squote;).evaluate(m);&nl;    &cbraces;&cm;&nl;    pseudo&cl; function(m) &obraces;&nl;      if (m[6]) m[6] = m[6].replace(/&quote;/g&cm; &squote;&bkslash;&bkslash;&quote;&squote;);&nl;      return new Template(&squote;n = h.pseudo(n&cm; &quote;#&obraces;1&cbraces;&quote;&cm; &quote;#&obraces;6&cbraces;&quote;&cm; r&cm; c); c = false;&squote;).evaluate(m);&nl;    &cbraces;&cm;&nl;    descendant&cl;   &squote;c = &quote;descendant&quote;;&squote;&cm;&nl;    child&cl;        &squote;c = &quote;child&quote;;&squote;&cm;&nl;    adjacent&cl;     &squote;c = &quote;adjacent&quote;;&squote;&cm;&nl;    laterSibling&cl; &squote;c = &quote;laterSibling&quote;;&squote;&nl;  &cbraces;&cm;&nl;&nl;  patterns&cl; &obraces;&nl;    // combinators must be listed first&nl;    // (and descendant needs to be last combinator)&nl;    laterSibling&cl; /^&bkslash;s*~&bkslash;s*/&cm;&nl;    child&cl;        /^&bkslash;s*>&bkslash;s*/&cm;&nl;    adjacent&cl;     /^&bkslash;s*&bkslash;+&bkslash;s*/&cm;&nl;    descendant&cl;   /^&bkslash;s/&cm;&nl;&nl;    // selectors follow&nl;    tagName&cl;      /^&bkslash;s*(&bkslash;*|[&bkslash;w&bkslash;-]+)(&bkslash;b|$)?/&cm;&nl;    id&cl;           /^#([&bkslash;w&bkslash;-&bkslash;*]+)(&bkslash;b|$)/&cm;&nl;    className&cl;    /^&bkslash;.([&bkslash;w&bkslash;-&bkslash;*]+)(&bkslash;b|$)/&cm;&nl;    pseudo&cl;&nl;/^&cl;((first|last|nth|nth-last|only)(-child|-of-type)|empty|checked|(en|dis)abled|not)(&bkslash;((.*?)&bkslash;))?(&bkslash;b|$|(?=&bkslash;s|[&cl;+~>]))/&cm;&nl;    attrPresence&cl; /^&bkslash;[((?&cl;[&bkslash;w]+&cl;)?[&bkslash;w]+)&bkslash;]/&cm;&nl;    attr&cl;         /&bkslash;[((?&cl;[&bkslash;w-]*&cl;)?[&bkslash;w-]+)&bkslash;s*(?&cl;([!^$*~|]?=)&bkslash;s*(([&squote;&quote;])([^&bkslash;4]*?)&bkslash;4|([^&squote;&quote;][^&bkslash;]]*?)))?&bkslash;]/&nl;  &cbraces;&cm;&nl;&nl;  // for Selector.match and Element#match&nl;  assertions&cl; &obraces;&nl;    tagName&cl; function(element&cm; matches) &obraces;&nl;      return matches[1].toUpperCase() == element.tagName.toUpperCase();&nl;    &cbraces;&cm;&nl;&nl;    className&cl; function(element&cm; matches) &obraces;&nl;      return Element.hasClassName(element&cm; matches[1]);&nl;    &cbraces;&cm;&nl;&nl;    id&cl; function(element&cm; matches) &obraces;&nl;      return element.id === matches[1];&nl;    &cbraces;&cm;&nl;&nl;    attrPresence&cl; function(element&cm; matches) &obraces;&nl;      return Element.hasAttribute(element&cm; matches[1]);&nl;    &cbraces;&cm;&nl;&nl;    attr&cl; function(element&cm; matches) &obraces;&nl;      var nodeValue = Element.readAttribute(element&cm; matches[1]);&nl;      return nodeValue && Selector.operators[matches[2]](nodeValue&cm; matches[5] || matches[6]);&nl;    &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  handlers&cl; &obraces;&nl;    // UTILITY FUNCTIONS&nl;    // joins two collections&nl;    concat&cl; function(a&cm; b) &obraces;&nl;      for (var i = 0&cm; node; node = b[i]; i++)&nl;        a.push(node);&nl;      return a;&nl;    &cbraces;&cm;&nl;&nl;    // marks an array of nodes for counting&nl;    mark&cl; function(nodes) &obraces;&nl;      var _true = Prototype.emptyFunction;&nl;      for (var i = 0&cm; node; node = nodes[i]; i++)&nl;        node._countedByPrototype = _true;&nl;      return nodes;&nl;    &cbraces;&cm;&nl;&nl;    unmark&cl; function(nodes) &obraces;&nl;      for (var i = 0&cm; node; node = nodes[i]; i++)&nl;        node._countedByPrototype = undefined;&nl;      return nodes;&nl;    &cbraces;&cm;&nl;&nl;    // mark each child node with its position (for nth calls)&nl;    // &quote;ofType&quote; flag indicates whether we&squote;re indexing for nth-of-type&nl;    // rather than nth-child&nl;    index&cl; function(parentNode&cm; reverse&cm; ofType) &obraces;&nl;      parentNode._countedByPrototype = Prototype.emptyFunction;&nl;      if (reverse) &obraces;&nl;        for (var nodes = parentNode.childNodes&cm; i = nodes.length - 1&cm; j = 1; i >= 0; i--) &obraces;&nl;          var node = nodes[i];&nl;          if (node.nodeType == 1 && (!ofType || node._countedByPrototype)) node.nodeIndex = j++;&nl;        &cbraces;&nl;      &cbraces; else &obraces;&nl;        for (var i = 0&cm; j = 1&cm; nodes = parentNode.childNodes; node = nodes[i]; i++)&nl;          if (node.nodeType == 1 && (!ofType || node._countedByPrototype)) node.nodeIndex = j++;&nl;      &cbraces;&nl;    &cbraces;&cm;&nl;&nl;    // filters out duplicates and extends all nodes&nl;    unique&cl; function(nodes) &obraces;&nl;      if (nodes.length == 0) return nodes;&nl;      var results = []&cm; n;&nl;      for (var i = 0&cm; l = nodes.length; i < l; i++)&nl;        if (!(n = nodes[i])._countedByPrototype) &obraces;&nl;          n._countedByPrototype = Prototype.emptyFunction;&nl;          results.push(Element.extend(n));&nl;        &cbraces;&nl;      return Selector.handlers.unmark(results);&nl;    &cbraces;&cm;&nl;&nl;    // COMBINATOR FUNCTIONS&nl;    descendant&cl; function(nodes) &obraces;&nl;      var h = Selector.handlers;&nl;      for (var i = 0&cm; results = []&cm; node; node = nodes[i]; i++)&nl;        h.concat(results&cm; node.getElementsByTagName(&squote;*&squote;));&nl;      return results;&nl;    &cbraces;&cm;&nl;&nl;    child&cl; function(nodes) &obraces;&nl;      var h = Selector.handlers;&nl;      for (var i = 0&cm; results = []&cm; node; node = nodes[i]; i++) &obraces;&nl;        for (var j = 0&cm; child; child = node.childNodes[j]; j++)&nl;          if (child.nodeType == 1 && child.tagName != &squote;!&squote;) results.push(child);&nl;      &cbraces;&nl;      return results;&nl;    &cbraces;&cm;&nl;&nl;    adjacent&cl; function(nodes) &obraces;&nl;      for (var i = 0&cm; results = []&cm; node; node = nodes[i]; i++) &obraces;&nl;        var next = this.nextElementSibling(node);&nl;        if (next) results.push(next);&nl;      &cbraces;&nl;      return results;&nl;    &cbraces;&cm;&nl;&nl;    laterSibling&cl; function(nodes) &obraces;&nl;      var h = Selector.handlers;&nl;      for (var i = 0&cm; results = []&cm; node; node = nodes[i]; i++)&nl;        h.concat(results&cm; Element.nextSiblings(node));&nl;      return results;&nl;    &cbraces;&cm;&nl;&nl;    nextElementSibling&cl; function(node) &obraces;&nl;      while (node = node.nextSibling)&nl;        if (node.nodeType == 1) return node;&nl;      return null;&nl;    &cbraces;&cm;&nl;&nl;    previousElementSibling&cl; function(node) &obraces;&nl;      while (node = node.previousSibling)&nl;        if (node.nodeType == 1) return node;&nl;      return null;&nl;    &cbraces;&cm;&nl;&nl;    // TOKEN FUNCTIONS&nl;    tagName&cl; function(nodes&cm; root&cm; tagName&cm; combinator) &obraces;&nl;      var uTagName = tagName.toUpperCase();&nl;      var results = []&cm; h = Selector.handlers;&nl;      if (nodes) &obraces;&nl;        if (combinator) &obraces;&nl;          // fastlane for ordinary descendant combinators&nl;          if (combinator == &quote;descendant&quote;) &obraces;&nl;            for (var i = 0&cm; node; node = nodes[i]; i++)&nl;              h.concat(results&cm; node.getElementsByTagName(tagName));&nl;            return results;&nl;          &cbraces; else nodes = this[combinator](nodes);&nl;          if (tagName == &quote;*&quote;) return nodes;&nl;        &cbraces;&nl;        for (var i = 0&cm; node; node = nodes[i]; i++)&nl;          if (node.tagName.toUpperCase() === uTagName) results.push(node);&nl;        return results;&nl;      &cbraces; else return root.getElementsByTagName(tagName);&nl;    &cbraces;&cm;&nl;&nl;    id&cl; function(nodes&cm; root&cm; id&cm; combinator) &obraces;&nl;      var targetNode = $(id)&cm; h = Selector.handlers;&nl;      if (!targetNode) return [];&nl;      if (!nodes && root == document) return [targetNode];&nl;      if (nodes) &obraces;&nl;        if (combinator) &obraces;&nl;          if (combinator == &squote;child&squote;) &obraces;&nl;            for (var i = 0&cm; node; node = nodes[i]; i++)&nl;              if (targetNode.parentNode == node) return [targetNode];&nl;          &cbraces; else if (combinator == &squote;descendant&squote;) &obraces;&nl;            for (var i = 0&cm; node; node = nodes[i]; i++)&nl;              if (Element.descendantOf(targetNode&cm; node)) return [targetNode];&nl;          &cbraces; else if (combinator == &squote;adjacent&squote;) &obraces;&nl;            for (var i = 0&cm; node; node = nodes[i]; i++)&nl;              if (Selector.handlers.previousElementSibling(targetNode) == node)&nl;                return [targetNode];&nl;          &cbraces; else nodes = h[combinator](nodes);&nl;        &cbraces;&nl;        for (var i = 0&cm; node; node = nodes[i]; i++)&nl;          if (node == targetNode) return [targetNode];&nl;        return [];&nl;      &cbraces;&nl;      return (targetNode && Element.descendantOf(targetNode&cm; root)) ? [targetNode] &cl; [];&nl;    &cbraces;&cm;&nl;&nl;    className&cl; function(nodes&cm; root&cm; className&cm; combinator) &obraces;&nl;      if (nodes && combinator) nodes = this[combinator](nodes);&nl;      return Selector.handlers.byClassName(nodes&cm; root&cm; className);&nl;    &cbraces;&cm;&nl;&nl;    byClassName&cl; function(nodes&cm; root&cm; className) &obraces;&nl;      if (!nodes) nodes = Selector.handlers.descendant([root]);&nl;      var needle = &squote; &squote; + className + &squote; &squote;;&nl;      for (var i = 0&cm; results = []&cm; node&cm; nodeClassName; node = nodes[i]; i++) &obraces;&nl;        nodeClassName = node.className;&nl;        if (nodeClassName.length == 0) continue;&nl;        if (nodeClassName == className || (&squote; &squote; + nodeClassName + &squote; &squote;).include(needle))&nl;          results.push(node);&nl;      &cbraces;&nl;      return results;&nl;    &cbraces;&cm;&nl;&nl;    attrPresence&cl; function(nodes&cm; root&cm; attr&cm; combinator) &obraces;&nl;      if (!nodes) nodes = root.getElementsByTagName(&quote;*&quote;);&nl;      if (nodes && combinator) nodes = this[combinator](nodes);&nl;      var results = [];&nl;      for (var i = 0&cm; node; node = nodes[i]; i++)&nl;        if (Element.hasAttribute(node&cm; attr)) results.push(node);&nl;      return results;&nl;    &cbraces;&cm;&nl;&nl;    attr&cl; function(nodes&cm; root&cm; attr&cm; value&cm; operator&cm; combinator) &obraces;&nl;      if (!nodes) nodes = root.getElementsByTagName(&quote;*&quote;);&nl;      if (nodes && combinator) nodes = this[combinator](nodes);&nl;      var handler = Selector.operators[operator]&cm; results = [];&nl;      for (var i = 0&cm; node; node = nodes[i]; i++) &obraces;&nl;        var nodeValue = Element.readAttribute(node&cm; attr);&nl;        if (nodeValue === null) continue;&nl;        if (handler(nodeValue&cm; value)) results.push(node);&nl;      &cbraces;&nl;      return results;&nl;    &cbraces;&cm;&nl;&nl;    pseudo&cl; function(nodes&cm; name&cm; value&cm; root&cm; combinator) &obraces;&nl;      if (nodes && combinator) nodes = this[combinator](nodes);&nl;      if (!nodes) nodes = root.getElementsByTagName(&quote;*&quote;);&nl;      return Selector.pseudos[name](nodes&cm; value&cm; root);&nl;    &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  pseudos&cl; &obraces;&nl;    &squote;first-child&squote;&cl; function(nodes&cm; value&cm; root) &obraces;&nl;      for (var i = 0&cm; results = []&cm; node; node = nodes[i]; i++) &obraces;&nl;        if (Selector.handlers.previousElementSibling(node)) continue;&nl;          results.push(node);&nl;      &cbraces;&nl;      return results;&nl;    &cbraces;&cm;&nl;    &squote;last-child&squote;&cl; function(nodes&cm; value&cm; root) &obraces;&nl;      for (var i = 0&cm; results = []&cm; node; node = nodes[i]; i++) &obraces;&nl;        if (Selector.handlers.nextElementSibling(node)) continue;&nl;          results.push(node);&nl;      &cbraces;&nl;      return results;&nl;    &cbraces;&cm;&nl;    &squote;only-child&squote;&cl; function(nodes&cm; value&cm; root) &obraces;&nl;      var h = Selector.handlers;&nl;      for (var i = 0&cm; results = []&cm; node; node = nodes[i]; i++)&nl;        if (!h.previousElementSibling(node) && !h.nextElementSibling(node))&nl;          results.push(node);&nl;      return results;&nl;    &cbraces;&cm;&nl;    &squote;nth-child&squote;&cl;        function(nodes&cm; formula&cm; root) &obraces;&nl;      return Selector.pseudos.nth(nodes&cm; formula&cm; root);&nl;    &cbraces;&cm;&nl;    &squote;nth-last-child&squote;&cl;   function(nodes&cm; formula&cm; root) &obraces;&nl;      return Selector.pseudos.nth(nodes&cm; formula&cm; root&cm; true);&nl;    &cbraces;&cm;&nl;    &squote;nth-of-type&squote;&cl;      function(nodes&cm; formula&cm; root) &obraces;&nl;      return Selector.pseudos.nth(nodes&cm; formula&cm; root&cm; false&cm; true);&nl;    &cbraces;&cm;&nl;    &squote;nth-last-of-type&squote;&cl; function(nodes&cm; formula&cm; root) &obraces;&nl;      return Selector.pseudos.nth(nodes&cm; formula&cm; root&cm; true&cm; true);&nl;    &cbraces;&cm;&nl;    &squote;first-of-type&squote;&cl;    function(nodes&cm; formula&cm; root) &obraces;&nl;      return Selector.pseudos.nth(nodes&cm; &quote;1&quote;&cm; root&cm; false&cm; true);&nl;    &cbraces;&cm;&nl;    &squote;last-of-type&squote;&cl;     function(nodes&cm; formula&cm; root) &obraces;&nl;      return Selector.pseudos.nth(nodes&cm; &quote;1&quote;&cm; root&cm; true&cm; true);&nl;    &cbraces;&cm;&nl;    &squote;only-of-type&squote;&cl;     function(nodes&cm; formula&cm; root) &obraces;&nl;      var p = Selector.pseudos;&nl;      return p[&squote;last-of-type&squote;](p[&squote;first-of-type&squote;](nodes&cm; formula&cm; root)&cm; formula&cm; root);&nl;    &cbraces;&cm;&nl;&nl;    // handles the an+b logic&nl;    getIndices&cl; function(a&cm; b&cm; total) &obraces;&nl;      if (a == 0) return b > 0 ? [b] &cl; [];&nl;      return $R(1&cm; total).inject([]&cm; function(memo&cm; i) &obraces;&nl;        if (0 == (i - b) % a && (i - b) / a >= 0) memo.push(i);&nl;        return memo;&nl;      &cbraces;);&nl;    &cbraces;&cm;&nl;&nl;    // handles nth(-last)-child&cm; nth(-last)-of-type&cm; and (first|last)-of-type&nl;    nth&cl; function(nodes&cm; formula&cm; root&cm; reverse&cm; ofType) &obraces;&nl;      if (nodes.length == 0) return [];&nl;      if (formula == &squote;even&squote;) formula = &squote;2n+0&squote;;&nl;      if (formula == &squote;odd&squote;)  formula = &squote;2n+1&squote;;&nl;      var h = Selector.handlers&cm; results = []&cm; indexed = []&cm; m;&nl;      h.mark(nodes);&nl;      for (var i = 0&cm; node; node = nodes[i]; i++) &obraces;&nl;        if (!node.parentNode._countedByPrototype) &obraces;&nl;          h.index(node.parentNode&cm; reverse&cm; ofType);&nl;          indexed.push(node.parentNode);&nl;        &cbraces;&nl;      &cbraces;&nl;      if (formula.match(/^&bkslash;d+$/)) &obraces; // just a number&nl;        formula = Number(formula);&nl;        for (var i = 0&cm; node; node = nodes[i]; i++)&nl;          if (node.nodeIndex == formula) results.push(node);&nl;      &cbraces; else if (m = formula.match(/^(-?&bkslash;d*)?n(([+-])(&bkslash;d+))?/)) &obraces; // an+b&nl;        if (m[1] == &quote;-&quote;) m[1] = -1;&nl;        var a = m[1] ? Number(m[1]) &cl; 1;&nl;        var b = m[2] ? Number(m[2]) &cl; 0;&nl;        var indices = Selector.pseudos.getIndices(a&cm; b&cm; nodes.length);&nl;        for (var i = 0&cm; node&cm; l = indices.length; node = nodes[i]; i++) &obraces;&nl;          for (var j = 0; j < l; j++)&nl;            if (node.nodeIndex == indices[j]) results.push(node);&nl;        &cbraces;&nl;      &cbraces;&nl;      h.unmark(nodes);&nl;      h.unmark(indexed);&nl;      return results;&nl;    &cbraces;&cm;&nl;&nl;    &squote;empty&squote;&cl; function(nodes&cm; value&cm; root) &obraces;&nl;      for (var i = 0&cm; results = []&cm; node; node = nodes[i]; i++) &obraces;&nl;        // IE treats comments as element nodes&nl;        if (node.tagName == &squote;!&squote; || node.firstChild) continue;&nl;        results.push(node);&nl;      &cbraces;&nl;      return results;&nl;    &cbraces;&cm;&nl;&nl;    &squote;not&squote;&cl; function(nodes&cm; selector&cm; root) &obraces;&nl;      var h = Selector.handlers&cm; selectorType&cm; m;&nl;      var exclusions = new Selector(selector).findElements(root);&nl;      h.mark(exclusions);&nl;      for (var i = 0&cm; results = []&cm; node; node = nodes[i]; i++)&nl;        if (!node._countedByPrototype) results.push(node);&nl;      h.unmark(exclusions);&nl;      return results;&nl;    &cbraces;&cm;&nl;&nl;    &squote;enabled&squote;&cl; function(nodes&cm; value&cm; root) &obraces;&nl;      for (var i = 0&cm; results = []&cm; node; node = nodes[i]; i++)&nl;        if (!node.disabled && (!node.type || node.type !== &squote;hidden&squote;))&nl;          results.push(node);&nl;      return results;&nl;    &cbraces;&cm;&nl;&nl;    &squote;disabled&squote;&cl; function(nodes&cm; value&cm; root) &obraces;&nl;      for (var i = 0&cm; results = []&cm; node; node = nodes[i]; i++)&nl;        if (node.disabled) results.push(node);&nl;      return results;&nl;    &cbraces;&cm;&nl;&nl;    &squote;checked&squote;&cl; function(nodes&cm; value&cm; root) &obraces;&nl;      for (var i = 0&cm; results = []&cm; node; node = nodes[i]; i++)&nl;        if (node.checked) results.push(node);&nl;      return results;&nl;    &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  operators&cl; &obraces;&nl;    &squote;=&squote;&cl;  function(nv&cm; v) &obraces; return nv == v; &cbraces;&cm;&nl;    &squote;!=&squote;&cl; function(nv&cm; v) &obraces; return nv != v; &cbraces;&cm;&nl;    &squote;^=&squote;&cl; function(nv&cm; v) &obraces; return nv == v || nv && nv.startsWith(v); &cbraces;&cm;&nl;    &squote;$=&squote;&cl; function(nv&cm; v) &obraces; return nv == v || nv && nv.endsWith(v); &cbraces;&cm;&nl;    &squote;*=&squote;&cl; function(nv&cm; v) &obraces; return nv == v || nv && nv.include(v); &cbraces;&cm;&nl;    &squote;$=&squote;&cl; function(nv&cm; v) &obraces; return nv.endsWith(v); &cbraces;&cm;&nl;    &squote;*=&squote;&cl; function(nv&cm; v) &obraces; return nv.include(v); &cbraces;&cm;&nl;    &squote;~=&squote;&cl; function(nv&cm; v) &obraces; return (&squote; &squote; + nv + &squote; &squote;).include(&squote; &squote; + v + &squote; &squote;); &cbraces;&cm;&nl;    &squote;|=&squote;&cl; function(nv&cm; v) &obraces; return (&squote;-&squote; + (nv || &quote;&quote;).toUpperCase() +&nl;     &squote;-&squote;).include(&squote;-&squote; + (v || &quote;&quote;).toUpperCase() + &squote;-&squote;); &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  split&cl; function(expression) &obraces;&nl;    var expressions = [];&nl;    expression.scan(/(([&bkslash;w#&cl;.~>+()&bkslash;s-]+|&bkslash;*|&bkslash;[.*?&bkslash;])+)&bkslash;s*(&cm;|$)/&cm; function(m) &obraces;&nl;      expressions.push(m[1].strip());&nl;    &cbraces;);&nl;    return expressions;&nl;  &cbraces;&cm;&nl;&nl;  matchElements&cl; function(elements&cm; expression) &obraces;&nl;    var matches = $$(expression)&cm; h = Selector.handlers;&nl;    h.mark(matches);&nl;    for (var i = 0&cm; results = []&cm; element; element = elements[i]; i++)&nl;      if (element._countedByPrototype) results.push(element);&nl;    h.unmark(matches);&nl;    return results;&nl;  &cbraces;&cm;&nl;&nl;  findElement&cl; function(elements&cm; expression&cm; index) &obraces;&nl;    if (Object.isNumber(expression)) &obraces;&nl;      index = expression; expression = false;&nl;    &cbraces;&nl;    return Selector.matchElements(elements&cm; expression || &squote;*&squote;)[index || 0];&nl;  &cbraces;&cm;&nl;&nl;  findChildElements&cl; function(element&cm; expressions) &obraces;&nl;    expressions = Selector.split(expressions.join(&squote;&cm;&squote;));&nl;    var results = []&cm; h = Selector.handlers;&nl;    for (var i = 0&cm; l = expressions.length&cm; selector; i < l; i++) &obraces;&nl;      selector = new Selector(expressions[i].strip());&nl;      h.concat(results&cm; selector.findElements(element));&nl;    &cbraces;&nl;    return (l > 1) ? h.unique(results) &cl; results;&nl;  &cbraces;&nl;&cbraces;);&nl;&nl;if (Prototype.Browser.IE) &obraces;&nl;  Object.extend(Selector.handlers&cm; &obraces;&nl;    // IE returns comment nodes on getElementsByTagName(&quote;*&quote;).&nl;    // Filter them out.&nl;    concat&cl; function(a&cm; b) &obraces;&nl;      for (var i = 0&cm; node; node = b[i]; i++)&nl;        if (node.tagName !== &quote;!&quote;) a.push(node);&nl;      return a;&nl;    &cbraces;&cm;&nl;&nl;    // IE improperly serializes _countedByPrototype in (inner|outer)HTML.&nl;    unmark&cl; function(nodes) &obraces;&nl;      for (var i = 0&cm; node; node = nodes[i]; i++)&nl;        node.removeAttribute(&squote;_countedByPrototype&squote;);&nl;      return nodes;&nl;    &cbraces;&nl;  &cbraces;);&nl;&cbraces;&nl;&nl;function $$() &obraces;&nl;  return Selector.findChildElements(document&cm; $A(arguments));&nl;&cbraces;&nl;var Form = &obraces;&nl;  reset&cl; function(form) &obraces;&nl;    $(form).reset();&nl;    return form;&nl;  &cbraces;&cm;&nl;&nl;  serializeElements&cl; function(elements&cm; options) &obraces;&nl;    if (typeof options != &squote;object&squote;) options = &obraces; hash&cl; !!options &cbraces;;&nl;    else if (Object.isUndefined(options.hash)) options.hash = true;&nl;    var key&cm; value&cm; submitted = false&cm; submit = options.submit;&nl;&nl;    var data = elements.inject(&obraces; &cbraces;&cm; function(result&cm; element) &obraces;&nl;      if (!element.disabled && element.name) &obraces;&nl;        key = element.name; value = $(element).getValue();&nl;        if (value != null && element.type != &squote;file&squote; && (element.type != &squote;submit&squote; || (!submitted &&&nl;            submit !== false && (!submit || key == submit) && (submitted = true)))) &obraces;&nl;          if (key in result) &obraces;&nl;            // a key is already present; construct an array of values&nl;            if (!Object.isArray(result[key])) result[key] = [result[key]];&nl;            result[key].push(value);&nl;          &cbraces;&nl;          else result[key] = value;&nl;        &cbraces;&nl;      &cbraces;&nl;      return result;&nl;    &cbraces;);&nl;&nl;    return options.hash ? data &cl; Object.toQueryString(data);&nl;  &cbraces;&nl;&cbraces;;&nl;&nl;Form.Methods = &obraces;&nl;  serialize&cl; function(form&cm; options) &obraces;&nl;    return Form.serializeElements(Form.getElements(form)&cm; options);&nl;  &cbraces;&cm;&nl;&nl;  getElements&cl; function(form) &obraces;&nl;    return $A($(form).getElementsByTagName(&squote;*&squote;)).inject([]&cm;&nl;      function(elements&cm; child) &obraces;&nl;        if (Form.Element.Serializers[child.tagName.toLowerCase()])&nl;          elements.push(Element.extend(child));&nl;        return elements;&nl;      &cbraces;&nl;    );&nl;  &cbraces;&cm;&nl;&nl;  getInputs&cl; function(form&cm; typeName&cm; name) &obraces;&nl;    form = $(form);&nl;    var inputs = form.getElementsByTagName(&squote;input&squote;);&nl;&nl;    if (!typeName && !name) return $A(inputs).map(Element.extend);&nl;&nl;    for (var i = 0&cm; matchingInputs = []&cm; length = inputs.length; i < length; i++) &obraces;&nl;      var input = inputs[i];&nl;      if ((typeName && input.type != typeName) || (name && input.name != name))&nl;        continue;&nl;      matchingInputs.push(Element.extend(input));&nl;    &cbraces;&nl;&nl;    return matchingInputs;&nl;  &cbraces;&cm;&nl;&nl;  disable&cl; function(form) &obraces;&nl;    form = $(form);&nl;    Form.getElements(form).invoke(&squote;disable&squote;);&nl;    return form;&nl;  &cbraces;&cm;&nl;&nl;  enable&cl; function(form) &obraces;&nl;    form = $(form);&nl;    Form.getElements(form).invoke(&squote;enable&squote;);&nl;    return form;&nl;  &cbraces;&cm;&nl;&nl;  findFirstElement&cl; function(form) &obraces;&nl;    var elements = $(form).getElements().findAll(function(element) &obraces;&nl;      return &squote;hidden&squote; != element.type && !element.disabled;&nl;    &cbraces;);&nl;    var firstByIndex = elements.findAll(function(element) &obraces;&nl;      return element.hasAttribute(&squote;tabIndex&squote;) && element.tabIndex >= 0;&nl;    &cbraces;).sortBy(function(element) &obraces; return element.tabIndex &cbraces;).first();&nl;&nl;    return firstByIndex ? firstByIndex &cl; elements.find(function(element) &obraces;&nl;      return [&squote;input&squote;&cm; &squote;select&squote;&cm; &squote;textarea&squote;].include(element.tagName.toLowerCase());&nl;    &cbraces;);&nl;  &cbraces;&cm;&nl;&nl;  focusFirstElement&cl; function(form) &obraces;&nl;    form = $(form);&nl;    form.findFirstElement().activate();&nl;    return form;&nl;  &cbraces;&cm;&nl;&nl;  request&cl; function(form&cm; options) &obraces;&nl;    form = $(form)&cm; options = Object.clone(options || &obraces; &cbraces;);&nl;&nl;    var params = options.parameters&cm; action = form.readAttribute(&squote;action&squote;) || &squote;&squote;;&nl;    if (action.blank()) action = window.location.href;&nl;    options.parameters = form.serialize(true);&nl;&nl;    if (params) &obraces;&nl;      if (Object.isString(params)) params = params.toQueryParams();&nl;      Object.extend(options.parameters&cm; params);&nl;    &cbraces;&nl;&nl;    if (form.hasAttribute(&squote;method&squote;) && !options.method)&nl;      options.method = form.method;&nl;&nl;    return new Ajax.Request(action&cm; options);&nl;  &cbraces;&nl;&cbraces;;&nl;&nl;/*--------------------------------------------------------------------------*/&nl;&nl;Form.Element = &obraces;&nl;  focus&cl; function(element) &obraces;&nl;    $(element).focus();&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  select&cl; function(element) &obraces;&nl;    $(element).select();&nl;    return element;&nl;  &cbraces;&nl;&cbraces;;&nl;&nl;Form.Element.Methods = &obraces;&nl;  serialize&cl; function(element) &obraces;&nl;    element = $(element);&nl;    if (!element.disabled && element.name) &obraces;&nl;      var value = element.getValue();&nl;      if (value != undefined) &obraces;&nl;        var pair = &obraces; &cbraces;;&nl;        pair[element.name] = value;&nl;        return Object.toQueryString(pair);&nl;      &cbraces;&nl;    &cbraces;&nl;    return &squote;&squote;;&nl;  &cbraces;&cm;&nl;&nl;  getValue&cl; function(element) &obraces;&nl;    element = $(element);&nl;    var method = element.tagName.toLowerCase();&nl;    return Form.Element.Serializers[method](element);&nl;  &cbraces;&cm;&nl;&nl;  setValue&cl; function(element&cm; value) &obraces;&nl;    element = $(element);&nl;    var method = element.tagName.toLowerCase();&nl;    Form.Element.Serializers[method](element&cm; value);&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  clear&cl; function(element) &obraces;&nl;    $(element).value = &squote;&squote;;&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  present&cl; function(element) &obraces;&nl;    return $(element).value != &squote;&squote;;&nl;  &cbraces;&cm;&nl;&nl;  activate&cl; function(element) &obraces;&nl;    element = $(element);&nl;    try &obraces;&nl;      element.focus();&nl;      if (element.select && (element.tagName.toLowerCase() != &squote;input&squote; ||&nl;          ![&squote;button&squote;&cm; &squote;reset&squote;&cm; &squote;submit&squote;].include(element.type)))&nl;        element.select();&nl;    &cbraces; catch (e) &obraces; &cbraces;&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  disable&cl; function(element) &obraces;&nl;    element = $(element);&nl;    element.disabled = true;&nl;    return element;&nl;  &cbraces;&cm;&nl;&nl;  enable&cl; function(element) &obraces;&nl;    element = $(element);&nl;    element.disabled = false;&nl;    return element;&nl;  &cbraces;&nl;&cbraces;;&nl;&nl;/*--------------------------------------------------------------------------*/&nl;&nl;var Field = Form.Element;&nl;var $F = Form.Element.Methods.getValue;&nl;&nl;/*--------------------------------------------------------------------------*/&nl;&nl;Form.Element.Serializers = &obraces;&nl;  input&cl; function(element&cm; value) &obraces;&nl;    switch (element.type.toLowerCase()) &obraces;&nl;      case &squote;checkbox&squote;&cl;&nl;      case &squote;radio&squote;&cl;&nl;        return Form.Element.Serializers.inputSelector(element&cm; value);&nl;      default&cl;&nl;        return Form.Element.Serializers.textarea(element&cm; value);&nl;    &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  inputSelector&cl; function(element&cm; value) &obraces;&nl;    if (Object.isUndefined(value)) return element.checked ? element.value &cl; null;&nl;    else element.checked = !!value;&nl;  &cbraces;&cm;&nl;&nl;  textarea&cl; function(element&cm; value) &obraces;&nl;    if (Object.isUndefined(value)) return element.value;&nl;    else element.value = value;&nl;  &cbraces;&cm;&nl;&nl;  select&cl; function(element&cm; value) &obraces;&nl;    if (Object.isUndefined(value))&nl;      return this[element.type == &squote;select-one&squote; ?&nl;        &squote;selectOne&squote; &cl; &squote;selectMany&squote;](element);&nl;    else &obraces;&nl;      var opt&cm; currentValue&cm; single = !Object.isArray(value);&nl;      for (var i = 0&cm; length = element.length; i < length; i++) &obraces;&nl;        opt = element.options[i];&nl;        currentValue = this.optionValue(opt);&nl;        if (single) &obraces;&nl;          if (currentValue == value) &obraces;&nl;            opt.selected = true;&nl;            return;&nl;          &cbraces;&nl;        &cbraces;&nl;        else opt.selected = value.include(currentValue);&nl;      &cbraces;&nl;    &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  selectOne&cl; function(element) &obraces;&nl;    var index = element.selectedIndex;&nl;    return index >= 0 ? this.optionValue(element.options[index]) &cl; null;&nl;  &cbraces;&cm;&nl;&nl;  selectMany&cl; function(element) &obraces;&nl;    var values&cm; length = element.length;&nl;    if (!length) return null;&nl;&nl;    for (var i = 0&cm; values = []; i < length; i++) &obraces;&nl;      var opt = element.options[i];&nl;      if (opt.selected) values.push(this.optionValue(opt));&nl;    &cbraces;&nl;    return values;&nl;  &cbraces;&cm;&nl;&nl;  optionValue&cl; function(opt) &obraces;&nl;    // extend element because hasAttribute may not be native&nl;    return Element.extend(opt).hasAttribute(&squote;value&squote;) ? opt.value &cl; opt.text;&nl;  &cbraces;&nl;&cbraces;;&nl;&nl;/*--------------------------------------------------------------------------*/&nl;&nl;Abstract.TimedObserver = Class.create(PeriodicalExecuter&cm; &obraces;&nl;  initialize&cl; function($super&cm; element&cm; frequency&cm; callback) &obraces;&nl;    $super(callback&cm; frequency);&nl;    this.element   = $(element);&nl;    this.lastValue = this.getValue();&nl;  &cbraces;&cm;&nl;&nl;  execute&cl; function() &obraces;&nl;    var value = this.getValue();&nl;    if (Object.isString(this.lastValue) && Object.isString(value) ?&nl;        this.lastValue != value &cl; String(this.lastValue) != String(value)) &obraces;&nl;      this.callback(this.element&cm; value);&nl;      this.lastValue = value;&nl;    &cbraces;&nl;  &cbraces;&nl;&cbraces;);&nl;&nl;Form.Element.Observer = Class.create(Abstract.TimedObserver&cm; &obraces;&nl;  getValue&cl; function() &obraces;&nl;    return Form.Element.getValue(this.element);&nl;  &cbraces;&nl;&cbraces;);&nl;&nl;Form.Observer = Class.create(Abstract.TimedObserver&cm; &obraces;&nl;  getValue&cl; function() &obraces;&nl;    return Form.serialize(this.element);&nl;  &cbraces;&nl;&cbraces;);&nl;&nl;/*--------------------------------------------------------------------------*/&nl;&nl;Abstract.EventObserver = Class.create(&obraces;&nl;  initialize&cl; function(element&cm; callback) &obraces;&nl;    this.element  = $(element);&nl;    this.callback = callback;&nl;&nl;    this.lastValue = this.getValue();&nl;    if (this.element.tagName.toLowerCase() == &squote;form&squote;)&nl;      this.registerFormCallbacks();&nl;    else&nl;      this.registerCallback(this.element);&nl;  &cbraces;&cm;&nl;&nl;  onElementEvent&cl; function() &obraces;&nl;    var value = this.getValue();&nl;    if (this.lastValue != value) &obraces;&nl;      this.callback(this.element&cm; value);&nl;      this.lastValue = value;&nl;    &cbraces;&nl;  &cbraces;&cm;&nl;&nl;  registerFormCallbacks&cl; function() &obraces;&nl;    Form.getElements(this.element).each(this.registerCallback&cm; this);&nl;  &cbraces;&cm;&nl;&nl;  registerCallback&cl; function(element) &obraces;&nl;    if (element.type) &obraces;&nl;      switch (element.type.toLowerCase()) &obraces;&nl;        case &squote;checkbox&squote;&cl;&nl;        case &squote;radio&squote;&cl;&nl;          Event.observe(element&cm; &squote;click&squote;&cm; this.onElementEvent.bind(this));&nl;          break;&nl;        default&cl;&nl;          Event.observe(element&cm; &squote;change&squote;&cm; this.onElementEvent.bind(this));&nl;          break;&nl;      &cbraces;&nl;    &cbraces;&nl;  &cbraces;&nl;&cbraces;);&nl;&nl;Form.Element.EventObserver = Class.create(Abstract.EventObserver&cm; &obraces;&nl;  getValue&cl; function() &obraces;&nl;    return Form.Element.getValue(this.element);&nl;  &cbraces;&nl;&cbraces;);&nl;&nl;Form.EventObserver = Class.create(Abstract.EventObserver&cm; &obraces;&nl;  getValue&cl; function() &obraces;&nl;    return Form.serialize(this.element);&nl;  &cbraces;&nl;&cbraces;);&nl;if (!window.Event) var Event = &obraces; &cbraces;;&nl;&nl;Object.extend(Event&cm; &obraces;&nl;  KEY_BACKSPACE&cl; 8&cm;&nl;  KEY_TAB&cl;       9&cm;&nl;  KEY_RETURN&cl;   13&cm;&nl;  KEY_ESC&cl;      27&cm;&nl;  KEY_LEFT&cl;     37&cm;&nl;  KEY_UP&cl;       38&cm;&nl;  KEY_RIGHT&cl;    39&cm;&nl;  KEY_DOWN&cl;     40&cm;&nl;  KEY_DELETE&cl;   46&cm;&nl;  KEY_HOME&cl;     36&cm;&nl;  KEY_END&cl;      35&cm;&nl;  KEY_PAGEUP&cl;   33&cm;&nl;  KEY_PAGEDOWN&cl; 34&cm;&nl;  KEY_INSERT&cl;   45&cm;&nl;&nl;  cache&cl; &obraces; &cbraces;&cm;&nl;&nl;  relatedTarget&cl; function(event) &obraces;&nl;    var element;&nl;    switch(event.type) &obraces;&nl;      case &squote;mouseover&squote;&cl; element = event.fromElement; break;&nl;      case &squote;mouseout&squote;&cl;  element = event.toElement;   break;&nl;      default&cl; return null;&nl;    &cbraces;&nl;    return Element.extend(element);&nl;  &cbraces;&nl;&cbraces;);&nl;&nl;Event.Methods = (function() &obraces;&nl;  var isButton;&nl;&nl;  if (Prototype.Browser.IE) &obraces;&nl;    var buttonMap = &obraces; 0&cl; 1&cm; 1&cl; 4&cm; 2&cl; 2 &cbraces;;&nl;    isButton = function(event&cm; code) &obraces;&nl;      return event.button == buttonMap[code];&nl;    &cbraces;;&nl;&nl;  &cbraces; else if (Prototype.Browser.WebKit) &obraces;&nl;    isButton = function(event&cm; code) &obraces;&nl;      switch (code) &obraces;&nl;        case 0&cl; return event.which == 1 && !event.metaKey;&nl;        case 1&cl; return event.which == 1 && event.metaKey;&nl;        default&cl; return false;&nl;      &cbraces;&nl;    &cbraces;;&nl;&nl;  &cbraces; else &obraces;&nl;    isButton = function(event&cm; code) &obraces;&nl;      return event.which ? (event.which === code + 1) &cl; (event.button === code);&nl;    &cbraces;;&nl;  &cbraces;&nl;&nl;  return &obraces;&nl;    isLeftClick&cl;   function(event) &obraces; return isButton(event&cm; 0) &cbraces;&cm;&nl;    isMiddleClick&cl; function(event) &obraces; return isButton(event&cm; 1) &cbraces;&cm;&nl;    isRightClick&cl;  function(event) &obraces; return isButton(event&cm; 2) &cbraces;&cm;&nl;&nl;    element&cl; function(event) &obraces;&nl;      event = Event.extend(event);&nl;&nl;      var node          = event.target&cm;&nl;          type          = event.type&cm;&nl;          currentTarget = event.currentTarget;&nl;&nl;      if (currentTarget && currentTarget.tagName) &obraces;&nl;        // Firefox screws up the &quote;click&quote; event when moving between radio buttons&nl;        // via arrow keys. It also screws up the &quote;load&quote; and &quote;error&quote; events on images&cm;&nl;        // reporting the document as the target instead of the original image.&nl;        if (type === &squote;load&squote; || type === &squote;error&squote; ||&nl;          (type === &squote;click&squote; && currentTarget.tagName.toLowerCase() === &squote;input&squote;&nl;            && currentTarget.type === &squote;radio&squote;))&nl;              node = currentTarget;&nl;      &cbraces;&nl;      if (node.nodeType == Node.TEXT_NODE) node = node.parentNode;&nl;      return Element.extend(node);&nl;    &cbraces;&cm;&nl;&nl;    findElement&cl; function(event&cm; expression) &obraces;&nl;      var element = Event.element(event);&nl;      if (!expression) return element;&nl;      var elements = [element].concat(element.ancestors());&nl;      return Selector.findElement(elements&cm; expression&cm; 0);&nl;    &cbraces;&cm;&nl;&nl;    pointer&cl; function(event) &obraces;&nl;      var docElement = document.documentElement&cm;&nl;      body = document.body || &obraces; scrollLeft&cl; 0&cm; scrollTop&cl; 0 &cbraces;;&nl;      return &obraces;&nl;        x&cl; event.pageX || (event.clientX +&nl;          (docElement.scrollLeft || body.scrollLeft) -&nl;          (docElement.clientLeft || 0))&cm;&nl;        y&cl; event.pageY || (event.clientY +&nl;          (docElement.scrollTop || body.scrollTop) -&nl;          (docElement.clientTop || 0))&nl;      &cbraces;;&nl;    &cbraces;&cm;&nl;&nl;    pointerX&cl; function(event) &obraces; return Event.pointer(event).x &cbraces;&cm;&nl;    pointerY&cl; function(event) &obraces; return Event.pointer(event).y &cbraces;&cm;&nl;&nl;    stop&cl; function(event) &obraces;&nl;      Event.extend(event);&nl;      event.preventDefault();&nl;      event.stopPropagation();&nl;      event.stopped = true;&nl;    &cbraces;&nl;  &cbraces;;&nl;&cbraces;)();&nl;&nl;Event.extend = (function() &obraces;&nl;  var methods = Object.keys(Event.Methods).inject(&obraces; &cbraces;&cm; function(m&cm; name) &obraces;&nl;    m[name] = Event.Methods[name].methodize();&nl;    return m;&nl;  &cbraces;);&nl;&nl;  if (Prototype.Browser.IE) &obraces;&nl;    Object.extend(methods&cm; &obraces;&nl;      stopPropagation&cl; function() &obraces; this.cancelBubble = true &cbraces;&cm;&nl;      preventDefault&cl;  function() &obraces; this.returnValue = false &cbraces;&cm;&nl;      inspect&cl; function() &obraces; return &quote;[object Event]&quote; &cbraces;&nl;    &cbraces;);&nl;&nl;    return function(event) &obraces;&nl;      if (!event) return false;&nl;      if (event._extendedByPrototype) return event;&nl;&nl;      event._extendedByPrototype = Prototype.emptyFunction;&nl;      var pointer = Event.pointer(event);&nl;      Object.extend(event&cm; &obraces;&nl;        target&cl; event.srcElement&cm;&nl;        relatedTarget&cl; Event.relatedTarget(event)&cm;&nl;        pageX&cl;  pointer.x&cm;&nl;        pageY&cl;  pointer.y&nl;      &cbraces;);&nl;      return Object.extend(event&cm; methods);&nl;    &cbraces;;&nl;&nl;  &cbraces; else &obraces;&nl;    Event.prototype = Event.prototype || document.createEvent(&quote;HTMLEvents&quote;)[&squote;__proto__&squote;];&nl;    Object.extend(Event.prototype&cm; methods);&nl;    return Prototype.K;&nl;  &cbraces;&nl;&cbraces;)();&nl;&nl;Object.extend(Event&cm; (function() &obraces;&nl;  var cache = Event.cache;&nl;&nl;  function getEventID(element) &obraces;&nl;    if (element._prototypeEventID) return element._prototypeEventID[0];&nl;    arguments.callee.id = arguments.callee.id || 1;&nl;    return element._prototypeEventID = [++arguments.callee.id];&nl;  &cbraces;&nl;&nl;  function getDOMEventName(eventName) &obraces;&nl;    if (eventName && eventName.include(&squote;&cl;&squote;)) return &quote;dataavailable&quote;;&nl;    return eventName;&nl;  &cbraces;&nl;&nl;  function getCacheForID(id) &obraces;&nl;    return cache[id] = cache[id] || &obraces; &cbraces;;&nl;  &cbraces;&nl;&nl;  function getWrappersForEventName(id&cm; eventName) &obraces;&nl;    var c = getCacheForID(id);&nl;    return c[eventName] = c[eventName] || [];&nl;  &cbraces;&nl;&nl;  function createWrapper(element&cm; eventName&cm; handler) &obraces;&nl;    var id = getEventID(element);&nl;    var c = getWrappersForEventName(id&cm; eventName);&nl;    if (c.pluck(&quote;handler&quote;).include(handler)) return false;&nl;&nl;    var wrapper = function(event) &obraces;&nl;      if (!Event || !Event.extend ||&nl;        (event.eventName && event.eventName != eventName))&nl;          return false;&nl;&nl;      Event.extend(event);&nl;      handler.call(element&cm; event);&nl;    &cbraces;;&nl;&nl;    wrapper.handler = handler;&nl;    c.push(wrapper);&nl;    return wrapper;&nl;  &cbraces;&nl;&nl;  function findWrapper(id&cm; eventName&cm; handler) &obraces;&nl;    var c = getWrappersForEventName(id&cm; eventName);&nl;    return c.find(function(wrapper) &obraces; return wrapper.handler == handler &cbraces;);&nl;  &cbraces;&nl;&nl;  function destroyWrapper(id&cm; eventName&cm; handler) &obraces;&nl;    var c = getCacheForID(id);&nl;    if (!c[eventName]) return false;&nl;    c[eventName] = c[eventName].without(findWrapper(id&cm; eventName&cm; handler));&nl;  &cbraces;&nl;&nl;  function destroyCache() &obraces;&nl;    for (var id in cache)&nl;      for (var eventName in cache[id])&nl;        cache[id][eventName] = null;&nl;  &cbraces;&nl;&nl;&nl;  // Internet Explorer needs to remove event handlers on page unload&nl;  // in order to avoid memory leaks.&nl;  if (window.attachEvent) &obraces;&nl;    window.attachEvent(&quote;onunload&quote;&cm; destroyCache);&nl;  &cbraces;&nl;&nl;  // Safari has a dummy event handler on page unload so that it won&squote;t&nl;  // use its bfcache. Safari <= 3.1 has an issue with restoring the &quote;document&quote;&nl;  // object when page is returned to via the back button using its bfcache.&nl;  if (Prototype.Browser.WebKit) &obraces;&nl;    window.addEventListener(&squote;unload&squote;&cm; Prototype.emptyFunction&cm; false);&nl;  &cbraces;&nl;&nl;  return &obraces;&nl;    observe&cl; function(element&cm; eventName&cm; handler) &obraces;&nl;      element = $(element);&nl;      var name = getDOMEventName(eventName);&nl;&nl;      var wrapper = createWrapper(element&cm; eventName&cm; handler);&nl;      if (!wrapper) return element;&nl;&nl;      if (element.addEventListener) &obraces;&nl;        element.addEventListener(name&cm; wrapper&cm; false);&nl;      &cbraces; else &obraces;&nl;        element.attachEvent(&quote;on&quote; + name&cm; wrapper);&nl;      &cbraces;&nl;&nl;      return element;&nl;    &cbraces;&cm;&nl;&nl;    stopObserving&cl; function(element&cm; eventName&cm; handler) &obraces;&nl;      element = $(element);&nl;      var id = getEventID(element)&cm; name = getDOMEventName(eventName);&nl;&nl;      if (!handler && eventName) &obraces;&nl;        getWrappersForEventName(id&cm; eventName).each(function(wrapper) &obraces;&nl;          element.stopObserving(eventName&cm; wrapper.handler);&nl;        &cbraces;);&nl;        return element;&nl;&nl;      &cbraces; else if (!eventName) &obraces;&nl;        Object.keys(getCacheForID(id)).each(function(eventName) &obraces;&nl;          element.stopObserving(eventName);&nl;        &cbraces;);&nl;        return element;&nl;      &cbraces;&nl;&nl;      var wrapper = findWrapper(id&cm; eventName&cm; handler);&nl;      if (!wrapper) return element;&nl;&nl;      if (element.removeEventListener) &obraces;&nl;        element.removeEventListener(name&cm; wrapper&cm; false);&nl;      &cbraces; else &obraces;&nl;        element.detachEvent(&quote;on&quote; + name&cm; wrapper);&nl;      &cbraces;&nl;&nl;      destroyWrapper(id&cm; eventName&cm; handler);&nl;&nl;      return element;&nl;    &cbraces;&cm;&nl;&nl;    fire&cl; function(element&cm; eventName&cm; memo) &obraces;&nl;      element = $(element);&nl;      if (element == document && document.createEvent && !element.dispatchEvent)&nl;        element = document.documentElement;&nl;&nl;      var event;&nl;      if (document.createEvent) &obraces;&nl;        event = document.createEvent(&quote;HTMLEvents&quote;);&nl;        event.initEvent(&quote;dataavailable&quote;&cm; true&cm; true);&nl;      &cbraces; else &obraces;&nl;        event = document.createEventObject();&nl;        event.eventType = &quote;ondataavailable&quote;;&nl;      &cbraces;&nl;&nl;      event.eventName = eventName;&nl;      event.memo = memo || &obraces; &cbraces;;&nl;&nl;      if (document.createEvent) &obraces;&nl;        element.dispatchEvent(event);&nl;      &cbraces; else &obraces;&nl;        element.fireEvent(event.eventType&cm; event);&nl;      &cbraces;&nl;&nl;      return Event.extend(event);&nl;    &cbraces;&nl;  &cbraces;;&nl;&cbraces;)());&nl;&nl;Object.extend(Event&cm; Event.Methods);&nl;&nl;Element.addMethods(&obraces;&nl;  fire&cl;          Event.fire&cm;&nl;  observe&cl;       Event.observe&cm;&nl;  stopObserving&cl; Event.stopObserving&nl;&cbraces;);&nl;&nl;Object.extend(document&cm; &obraces;&nl;  fire&cl;          Element.Methods.fire.methodize()&cm;&nl;  observe&cl;       Element.Methods.observe.methodize()&cm;&nl;  stopObserving&cl; Element.Methods.stopObserving.methodize()&cm;&nl;  loaded&cl;        false&nl;&cbraces;);&nl;&nl;(function() &obraces;&nl;  /* Support for the DOMContentLoaded event is based on work by Dan Webb&cm;&nl;     Matthias Miller&cm; Dean Edwards and John Resig. */&nl;&nl;  var timer;&nl;&nl;  function fireContentLoadedEvent() &obraces;&nl;    if (document.loaded) return;&nl;    if (timer) window.clearInterval(timer);&nl;    document.fire(&quote;dom&cl;loaded&quote;);&nl;    document.loaded = true;&nl;  &cbraces;&nl;&nl;  if (document.addEventListener) &obraces;&nl;    if (Prototype.Browser.WebKit) &obraces;&nl;      timer = window.setInterval(function() &obraces;&nl;        if (/loaded|complete/.test(document.readyState))&nl;          fireContentLoadedEvent();&nl;      &cbraces;&cm; 0);&nl;&nl;      Event.observe(window&cm; &quote;load&quote;&cm; fireContentLoadedEvent);&nl;&nl;    &cbraces; else &obraces;&nl;      document.addEventListener(&quote;DOMContentLoaded&quote;&cm;&nl;        fireContentLoadedEvent&cm; false);&nl;    &cbraces;&nl;&nl;  &cbraces; else &obraces;&nl;    document.write(&quote;<script id=__onDOMContentLoaded defer src=//&cl;><&bkslash;/script>&quote;);&nl;    $(&quote;__onDOMContentLoaded&quote;).onreadystatechange = function() &obraces;&nl;      if (this.readyState == &quote;complete&quote;) &obraces;&nl;        this.onreadystatechange = null;&nl;        fireContentLoadedEvent();&nl;      &cbraces;&nl;    &cbraces;;&nl;  &cbraces;&nl;&cbraces;)();&nl;/*------------------------------- DEPRECATED -------------------------------*/&nl;&nl;Hash.toQueryString = Object.toQueryString;&nl;&nl;var Toggle = &obraces; display&cl; Element.toggle &cbraces;;&nl;&nl;Element.Methods.childOf = Element.Methods.descendantOf;&nl;&nl;var Insertion = &obraces;&nl;  Before&cl; function(element&cm; content) &obraces;&nl;    return Element.insert(element&cm; &obraces;before&cl;content&cbraces;);&nl;  &cbraces;&cm;&nl;&nl;  Top&cl; function(element&cm; content) &obraces;&nl;    return Element.insert(element&cm; &obraces;top&cl;content&cbraces;);&nl;  &cbraces;&cm;&nl;&nl;  Bottom&cl; function(element&cm; content) &obraces;&nl;    return Element.insert(element&cm; &obraces;bottom&cl;content&cbraces;);&nl;  &cbraces;&cm;&nl;&nl;  After&cl; function(element&cm; content) &obraces;&nl;    return Element.insert(element&cm; &obraces;after&cl;content&cbraces;);&nl;  &cbraces;&nl;&cbraces;;&nl;&nl;var $continue = new Error(&squote;&quote;throw $continue&quote; is deprecated&cm; use &quote;return&quote; instead&squote;);&nl;&nl;// This should be moved to script.aculo.us; notice the deprecated methods&nl;// further below&cm; that map to the newer Element methods.&nl;var Position = &obraces;&nl;  // set to true if needed&cm; warning&cl; firefox performance problems&nl;  // NOT neeeded for page scrolling&cm; only if draggable contained in&nl;  // scrollable elements&nl;  includeScrollOffsets&cl; false&cm;&nl;&nl;  // must be called before calling withinIncludingScrolloffset&cm; every time the&nl;  // page is scrolled&nl;  prepare&cl; function() &obraces;&nl;    this.deltaX =  window.pageXOffset&nl;                || document.documentElement.scrollLeft&nl;                || document.body.scrollLeft&nl;                || 0;&nl;    this.deltaY =  window.pageYOffset&nl;                || document.documentElement.scrollTop&nl;                || document.body.scrollTop&nl;                || 0;&nl;  &cbraces;&cm;&nl;&nl;  // caches x/y coordinate pair to use with overlap&nl;  within&cl; function(element&cm; x&cm; y) &obraces;&nl;    if (this.includeScrollOffsets)&nl;      return this.withinIncludingScrolloffsets(element&cm; x&cm; y);&nl;    this.xcomp = x;&nl;    this.ycomp = y;&nl;    this.offset = Element.cumulativeOffset(element);&nl;&nl;    return (y >= this.offset[1] &&&nl;            y <  this.offset[1] + element.offsetHeight &&&nl;            x >= this.offset[0] &&&nl;            x <  this.offset[0] + element.offsetWidth);&nl;  &cbraces;&cm;&nl;&nl;  withinIncludingScrolloffsets&cl; function(element&cm; x&cm; y) &obraces;&nl;    var offsetcache = Element.cumulativeScrollOffset(element);&nl;&nl;    this.xcomp = x + offsetcache[0] - this.deltaX;&nl;    this.ycomp = y + offsetcache[1] - this.deltaY;&nl;    this.offset = Element.cumulativeOffset(element);&nl;&nl;    return (this.ycomp >= this.offset[1] &&&nl;            this.ycomp <  this.offset[1] + element.offsetHeight &&&nl;            this.xcomp >= this.offset[0] &&&nl;            this.xcomp <  this.offset[0] + element.offsetWidth);&nl;  &cbraces;&cm;&nl;&nl;  // within must be called directly before&nl;  overlap&cl; function(mode&cm; element) &obraces;&nl;    if (!mode) return 0;&nl;    if (mode == &squote;vertical&squote;)&nl;      return ((this.offset[1] + element.offsetHeight) - this.ycomp) /&nl;        element.offsetHeight;&nl;    if (mode == &squote;horizontal&squote;)&nl;      return ((this.offset[0] + element.offsetWidth) - this.xcomp) /&nl;        element.offsetWidth;&nl;  &cbraces;&cm;&nl;&nl;  // Deprecation layer -- use newer Element methods now (1.5.2).&nl;&nl;  cumulativeOffset&cl; Element.Methods.cumulativeOffset&cm;&nl;&nl;  positionedOffset&cl; Element.Methods.positionedOffset&cm;&nl;&nl;  absolutize&cl; function(element) &obraces;&nl;    Position.prepare();&nl;    return Element.absolutize(element);&nl;  &cbraces;&cm;&nl;&nl;  relativize&cl; function(element) &obraces;&nl;    Position.prepare();&nl;    return Element.relativize(element);&nl;  &cbraces;&cm;&nl;&nl;  realOffset&cl; Element.Methods.cumulativeScrollOffset&cm;&nl;&nl;  offsetParent&cl; Element.Methods.getOffsetParent&cm;&nl;&nl;  page&cl; Element.Methods.viewportOffset&cm;&nl;&nl;  clone&cl; function(source&cm; target&cm; options) &obraces;&nl;    options = options || &obraces; &cbraces;;&nl;    return Element.clonePosition(target&cm; source&cm; options);&nl;  &cbraces;&nl;&cbraces;;&nl;&nl;/*--------------------------------------------------------------------------*/&nl;&nl;if (!document.getElementsByClassName) document.getElementsByClassName = function(instanceMethods)&obraces;&nl;  function iter(name) &obraces;&nl;    return name.blank() ? null &cl; &quote;[contains(concat(&squote; &squote;&cm; @class&cm; &squote; &squote;)&cm; &squote; &quote; + name + &quote; &squote;)]&quote;;&nl;  &cbraces;&nl;&nl;  instanceMethods.getElementsByClassName = Prototype.BrowserFeatures.XPath ?&nl;  function(element&cm; className) &obraces;&nl;    className = className.toString().strip();&nl;    var cond = /&bkslash;s/.test(className) ? $w(className).map(iter).join(&squote;&squote;) &cl; iter(className);&nl;    return cond ? document._getElementsByXPath(&squote;.//*&squote; + cond&cm; element) &cl; [];&nl;  &cbraces; &cl; function(element&cm; className) &obraces;&nl;    className = className.toString().strip();&nl;    var elements = []&cm; classNames = (/&bkslash;s/.test(className) ? $w(className) &cl; null);&nl;    if (!classNames && !className) return elements;&nl;&nl;    var nodes = $(element).getElementsByTagName(&squote;*&squote;);&nl;    className = &squote; &squote; + className + &squote; &squote;;&nl;&nl;    for (var i = 0&cm; child&cm; cn; child = nodes[i]; i++) &obraces;&nl;      if (child.className && (cn = &squote; &squote; + child.className + &squote; &squote;) && (cn.include(className) ||&nl;          (classNames && classNames.all(function(name) &obraces;&nl;            return !name.toString().blank() && cn.include(&squote; &squote; + name + &squote; &squote;);&nl;          &cbraces;))))&nl;        elements.push(Element.extend(child));&nl;    &cbraces;&nl;    return elements;&nl;  &cbraces;;&nl;&nl;  return function(className&cm; parentElement) &obraces;&nl;    return $(parentElement || document.body).getElementsByClassName(className);&nl;  &cbraces;;&nl;&cbraces;(Element.Methods);&nl;&nl;/*--------------------------------------------------------------------------*/&nl;&nl;Element.ClassNames = Class.create();&nl;Element.ClassNames.prototype = &obraces;&nl;  initialize&cl; function(element) &obraces;&nl;    this.element = $(element);&nl;  &cbraces;&cm;&nl;&nl;  _each&cl; function(iterator) &obraces;&nl;    this.element.className.split(/&bkslash;s+/).select(function(name) &obraces;&nl;      return name.length > 0;&nl;    &cbraces;)._each(iterator);&nl;  &cbraces;&cm;&nl;&nl;  set&cl; function(className) &obraces;&nl;    this.element.className = className;&nl;  &cbraces;&cm;&nl;&nl;  add&cl; function(classNameToAdd) &obraces;&nl;    if (this.include(classNameToAdd)) return;&nl;    this.set($A(this).concat(classNameToAdd).join(&squote; &squote;));&nl;  &cbraces;&cm;&nl;&nl;  remove&cl; function(classNameToRemove) &obraces;&nl;    if (!this.include(classNameToRemove)) return;&nl;    this.set($A(this).without(classNameToRemove).join(&squote; &squote;));&nl;  &cbraces;&cm;&nl;&nl;  toString&cl; function() &obraces;&nl;    return $A(this).join(&squote; &squote;);&nl;  &cbraces;&nl;&cbraces;;&nl;&nl;Object.extend(Element.ClassNames.prototype&cm; Enumerable);&nl;&nl;/*--------------------------------------------------------------------------*/&nl;&nl;Element.addMethods();"},{"id" : 2, "x" : 7800, "y" : 50, "width" : 500, "height" : 700, "title" : "C&cl;&bkslash;Users&bkslash;shuklp.CORP&bkslash;Documents&bkslash;MS&bkslash;CSYE 6220&bkslash;MainMenu&bkslash;ResourceManager.js", "txt" : "/**&nl;    A database for the external resources used by the game&nl;    @author <a href=&quote;mailto&cl;matthewcasperson@gmail.com&quote;>Matthew Casperson</a>&nl;    @class&nl;*/&nl;function ResourceManager()&nl;&obraces;&nl;&tb;/** An array of the names of the images supplied to the startupResourceManager&nl;&tb;&tb;function. Since the images are referenced by creating new properties&nl;&tb;&tb;of the ResourceManager class this collection allows a developer to &nl;&tb;&tb;know which of the ResourceManager properties are images&cm; and (by &nl;&tb;&tb;elimination) those that are not&nl;&tb;&tb;@type Array&nl;&tb;*/&nl;    this.imageProperties = null;&nl;&nl;&tb;/**&nl;        Initialises this object&nl;&tb;&tb;@param images&tb;An array of objects with the name and src properties&nl;        @return &tb;&tb;A reference to the initialised object&nl;    */&nl;    this.startupResourceManager = function(/**Array*/ images)&nl;    &obraces;&nl;        // set the global variable&nl;&tb;&tb;g_ResourceManager = this;&nl;&nl;        // initialize internal state.&nl;        this.imageProperties = new Array();&nl;&nl;        // for each image&cm; call preload()&nl;        for ( var i = 0; i < images.length; i++ )&nl;&tb;&tb;&obraces;&nl;&tb;&tb;&tb;// create new Image object and add to array&nl;&tb;&tb;&tb;var thisImage = new Image;&nl;&tb;&tb;&tb;this[images[i].name] = thisImage;&nl;&tb;&tb;&tb;this.imageProperties.push(images[i].name);&nl;&nl;&tb;&tb;&tb;// assign the .src property of the Image object&nl;&tb;&tb;&tb;thisImage.src = images[i].src;&nl;&tb;&tb;&cbraces;&nl;&nl;        return this;&nl;    &cbraces;&nl;&cbraces;"},{"id" : 3, "x" : 8400, "y" : 50, "width" : 500, "height" : 700, "title" : "C&cl;&bkslash;Users&bkslash;shuklp.CORP&bkslash;Documents&bkslash;MS&bkslash;CSYE 6220&bkslash;MainMenu&bkslash;Rectangle.js", "txt" : "/**&nl;    A rectangle&nl;    @author <a href=&quote;mailto&cl;matthewcasperson@gmail.com&quote;>Matthew Casperson</a>&nl;    @class&nl;*/&nl;function Rectangle()&nl;&obraces;&nl;    this.left = 0;&nl;    this.top = 0;&nl;    this.width = 0;&nl;    this.height = 0;&nl;&nl;    /**&nl;        Initialises the object&nl;        @param left     Left position&nl;        @param top      Top Position&nl;        @param width    Width of rectangle&nl;        @param height   Height of triangle&nl;     */&nl;    this.startupRectangle = function(/**Number*/ left&cm; /**Number*/ top&cm; /**Number*/ width&cm; /**Number*/ height)&nl;    &obraces;&nl;        this.left = left;&nl;        this.top = top;&nl;        this.width = width;&nl;        this.height = height;&nl;        return this;&nl;    &cbraces;&nl;&nl;    /**&nl;        @return         true if there is an intersection&cm; false otherwise&nl;        @param other    The other rectangle to test against&nl;     */&nl;    this.intersects = function(/**Rectangle*/ other)&nl;    &obraces;&nl;        if (this.left + this.width < other.left)&nl;            return false;&nl;        if (this.top + this.height < other.top)&nl;            return false;&nl;        if (this.left > other.left + other.width)&nl;            return false;&nl;        if (this.top > other.top + other.height)&nl;            return false;&nl;&nl;        return true;&nl;    &cbraces;&nl;&cbraces;"},{"id" : 4, "x" : 9000, "y" : 50, "width" : 500, "height" : 700, "title" : "C&cl;&bkslash;Users&bkslash;shuklp.CORP&bkslash;Documents&bkslash;MS&bkslash;CSYE 6220&bkslash;MainMenu&bkslash;GameObject.js", "txt" : "/**&nl;    The base class for all elements that appear in the game.&nl;    @author <a href=&quote;mailto&cl;matthewcasperson@gmail.com&quote;>Matthew Casperson</a>&nl;    @class&nl;*/&nl;function GameObject()&nl;&obraces;&nl;    /** Display depth order. A smaller zOrder means the element is rendered first&cm; and therefor&nl;        in the background.&nl;        @type Number&nl;    */&nl;    this.zOrder = 0;&nl;    /**&nl;        The position on the X axis&nl;        @type Number&nl;    */&nl;    this.x = 0;&nl;    /**&nl;        The position on the Y axis&nl;        @type Number&nl;    */&nl;    this.y = 0;&nl;    &nl;    /**&nl;        Initialises the object&cm; and adds it to the list of objects held by the GameObjectManager.&nl;        @param x        The position on the X axis&nl;        @param y        The position on the Y axis&nl;        @param z        The z order of the element (elements in the background have a lower z value)&nl;    */&nl;    this.startupGameObject = function(/**Number*/ x&cm; /**Number*/ y&cm; /**Number*/ z)&nl;    &obraces;&nl;        this.zOrder = z;&nl;        this.x = x;&nl;        this.y = y;&nl;        g_GameObjectManager.addGameObject(this);&nl;        return this;&nl;    &cbraces;&nl;    &nl;    /**&nl;        Cleans up the object&cm; and removes it from the list of objects held by the GameObjectManager.&nl;    */&nl;    this.shutdownGameObject = function()&nl;    &obraces;&nl;        g_GameObjectManager.removeGameObject(this);&nl;    &cbraces;&nl;&nl;    this.shutdown = function()&nl;    &obraces;&nl;         this.shutdownGameObject();&nl;    &cbraces;&nl;&cbraces;"},{"id" : 5, "x" : 9600, "y" : 50, "width" : 500, "height" : 700, "title" : "C&cl;&bkslash;Users&bkslash;shuklp.CORP&bkslash;Documents&bkslash;MS&bkslash;CSYE 6220&bkslash;MainMenu&bkslash;VisualGameObject.js", "txt" : "/**&nl;    The base class for all elements that appear in the game.&nl;    @author <a href=&quote;mailto&cl;matthewcasperson@gmail.com&quote;>Matthew Casperson</a>&nl;    @class&nl;*/&nl;function VisualGameObject()&nl;&obraces;&nl;    /**&nl;        The image that will be displayed by this object&nl;        @type Image&nl;    */&nl;    this.image = null;&nl;    &nl;    /**&nl;        Draws this element to the back buffer&nl;        @param dt Time in seconds since the last frame&nl;&tb;&tb;@param context The context to draw to&nl;&tb;&tb;@param xScroll The global scrolling value of the x axis  &nl;&tb;&tb;@param yScroll The global scrolling value of the y axis  &nl;    */&nl;    this.draw = function(/**Number*/ dt&cm; /**CanvasRenderingContext2D*/ context&cm; /**Number*/ xScroll&cm; /**Number*/ yScroll)&nl;    &obraces;&nl;        context.drawImage(this.image&cm; this.x - xScroll&cm; this.y - yScroll);&nl;    &cbraces;&nl;    &nl;    /**&nl;        Initialises this object&nl;        @param image The image to be displayed&nl;&tb;&tb;@param x The position on the X axis&nl;        @param y The position on the Y axis&nl;&tb;&tb;@param z The depth&nl;    */&nl;    this.startupVisualGameObject = function(/**Image*/ image&cm; /**Number*/ x&cm; /**Number*/ y&cm; /**Number*/ z)&nl;    &obraces;&nl;        this.startupGameObject(x&cm; y&cm; z);&nl;        this.image = image;&nl;        return this;&nl;    &cbraces;&nl;    &nl;    /**&nl;        Clean this object up&nl;    */&nl;    this.shutdownVisualGameObject = function()&nl;    &obraces;&nl;        this.image = null;&nl;        this.shutdownGameObject();&nl;    &cbraces;&nl;&nl;    this.shutdown = function()&nl;    &obraces;&nl;        this.shutdownVisualGameObject();&nl;    &cbraces;&nl;&nl;    this.collisionArea = function()&nl;    &obraces;&nl;        return new Rectangle().startupRectangle(this.x&cm; this.y&cm; this.image.width&cm; this.image.height);&nl;    &cbraces;&nl;&cbraces;&nl;VisualGameObject.prototype = new GameObject;"},{"id" : 6, "x" : 10200, "y" : 50, "width" : 500, "height" : 700, "title" : "C&cl;&bkslash;Users&bkslash;shuklp.CORP&bkslash;Documents&bkslash;MS&bkslash;CSYE 6220&bkslash;MainMenu&bkslash;RepeatingGameObject.js", "txt" : "/**&nl;    A class that display a repeating texture that can optionall be offset in either&nl;&tb;the x or y axis&nl;    @author <a href=&quote;mailto&cl;matthewcasperson@gmail.com&quote;>Matthew Casperson</a>&nl;    @class&nl;*/&nl;function RepeatingGameObject()&nl;&obraces;&nl;    /** The width that the final image will take up&nl;&tb;&tb;@type Number&nl;&tb;*/&nl;&tb;this.width = 0;&nl;&tb;/** The height that the final image will take up&nl;&tb;&tb;@type Number&nl;&tb;*/&nl;    this.height = 0;&nl;&tb;/** How much of the scrollX and scrollY to apply when drawing&nl;&tb;&tb;@type Number&nl;&tb;*/&nl;    this.scrollFactor = 1;&nl;&tb;&nl;    /**&nl;        Initialises this object&nl;        @return A reference to the initialised object&nl;    */&nl;    this.startupRepeatingGameObject = function(image&cm; x&cm; y&cm; z&cm; width&cm; height&cm; scrollFactor)&nl;    &obraces;&nl;        this.startupVisualGameObject(image&cm; x&cm; y&cm; z);&nl;        this.width = width;&nl;        this.height = height;&nl;        this.scrollFactor = scrollFactor;&nl;        return this;&nl;    &cbraces;&nl;&tb;&nl;    /**&nl;        Clean this object up&nl;    */&nl;    this.shutdownstartupRepeatingGameObject = function()&nl;    &obraces;&nl;        this.shutdownVisualGameObject();&nl;    &cbraces;&nl;    &nl;&tb;/**&nl;        Draws this element to the back buffer&nl;        @param dt Time in seconds since the last frame&nl;&tb;&tb;@param context The context to draw to&nl;&tb;&tb;@param xScroll The global scrolling value of the x axis  &nl;&tb;&tb;@param yScroll The global scrolling value of the y axis  &nl;    */&nl;    this.draw = function(dt&cm; canvas&cm; xScroll&cm; yScroll)&nl;    &obraces;&nl;        var areaDrawn = [0&cm; 0];&nl;        &nl;        for (var y = 0; y < this.height; y += areaDrawn[1])&nl;        &obraces;&nl;            for (var x = 0; x < this.width; x += areaDrawn[0])&nl;            &obraces;&nl;                // the top left corner to start drawing the next tile from&nl;&tb;&tb;&tb;&tb;var newPosition = [this.x + x&cm; this.y + y];&nl;&tb;&tb;&tb;&tb;// the amount of space left in which to draw&nl;                var newFillArea = [this.width - x&cm; this.height - y];&nl;&tb;&tb;&tb;&tb;// the first time around you have to start drawing from the middle of the image&nl;&tb;&tb;&tb;&tb;// subsequent tiles alwyas get drawn from the top or left&nl;                var newScrollPosition = [0&cm; 0];&nl;                if (x==0) newScrollPosition[0] = xScroll * this.scrollFactor;&nl;                if (y==0) newScrollPosition[1] = yScroll * this.scrollFactor;&nl;                areaDrawn = this.drawRepeat(canvas&cm; newPosition&cm; newFillArea&cm; newScrollPosition);&nl;            &cbraces;&nl;        &cbraces;&nl;    &cbraces;&nl;    &nl;    this.drawRepeat = function(canvas&cm; newPosition&cm; newFillArea&cm; newScrollPosition)&nl;    &obraces;&nl;        // find where in our repeating texture to start drawing (the top left corner)&nl;        var xOffset = Math.abs(newScrollPosition[0]) % this.image.width;&nl;        var yOffset = Math.abs(newScrollPosition[1]) % this.image.height;&nl;        var left = newScrollPosition[0]<0?this.image.width-xOffset&cl;xOffset;&nl;        var top = newScrollPosition[1]<0?this.image.height-yOffset&cl;yOffset;&nl;        var width = newFillArea[0] < this.image.width-left?newFillArea[0]&cl;this.image.width-left;&nl;        var height = newFillArea[1] < this.image.height-top?newFillArea[1]&cl;this.image.height-top;&nl;        &nl;        // draw the image&nl;        canvas.drawImage(this.image&cm; left&cm; top&cm; width&cm; height&cm; newPosition[0]&cm; newPosition[1]&cm; width&cm; height);&nl;        &nl;        return [width&cm; height];&nl;    &cbraces;&nl;    &nl;    &nl;&cbraces;&nl;RepeatingGameObject.prototype = new VisualGameObject();"},{"id" : 7, "x" : 6000, "y" : 950, "width" : 500, "height" : 700, "title" : "C&cl;&bkslash;Users&bkslash;shuklp.CORP&bkslash;Documents&bkslash;MS&bkslash;CSYE 6220&bkslash;MainMenu&bkslash;AnimatedGameObject.js", "txt" : "/**&nl;    Displays an animated Game Object&nl;    @author <a href=&quote;mailto&cl;matthewcasperson@gmail.com&quote;>Matthew Casperson</a>&nl;    @class&nl;*/&nl;function AnimatedGameObject()&nl;&obraces;&nl;    /**&nl;        Defines the current frame that is to be rendered&nl;        @type Number&nl;     */&nl;    this.currentFrame = 0;&nl;    /**&nl;        Defines the frames per second of the animation&nl;        @type Number&nl;     */&nl;    this.timeBetweenFrames = 0;&nl;    /**&nl;        The number of individual frames held in the image&nl;        @type Number&nl;     */&nl;    /**&nl;        Time until the next frame&nl;        @type number&nl;     */&nl;    this.timeSinceLastFrame = 0;&nl;    /**&nl;        The width of each individual frame&nl;        @type Number&nl;     */&nl;    this.frameWidth = 0;&nl;&nl;    /**&nl;        Initialises this object&nl;        @param image The image to be displayed&nl;&tb;&tb;@param x The position on the X axis&nl;        @param y The position on the Y axis&nl;&tb;&tb;@param z The depth&nl;        @param frameCount The number of animation frames in the image&nl;        @param fps The frames per second to animate this object at&nl;    */&nl;    this.startupAnimatedGameObject = function(/**Image*/ image&cm; /**Number*/ x&cm; /**Number*/ y&cm; /**Number*/ z&cm; /**Number*/ frameCount&cm; /**Number*/ fps)&nl;    &obraces;&nl;        if (frameCount <= 0) throw &quote;framecount can not be <= 0&quote;;&nl;        if (fps <= 0) throw &quote;fps can not be <= 0&quote;&nl;&nl;        this.startupVisualGameObject(image&cm; x&cm; y&cm; z);&nl;        this.currentFrame = 0;&nl;        this.frameCount = frameCount;&nl;        this.timeBetweenFrames = 1/fps;&nl;        this.timeSinceLastFrame = this.timeBetweenFrames;&nl;        this.frameWidth = this.image.width / this.frameCount;&nl;&nl;        return this;&nl;    &cbraces;&nl;&nl;    this.shutdownAnimatedGameObject = function()&nl;    &obraces;&nl;        this.shutdownVisualGameObject();       &nl;    &cbraces;&nl;&nl;    this.setAnimation = function(/**Image*/ image&cm; /**Number*/ frameCount&cm; /**Number*/ fps)&nl;    &obraces;&nl;        if (frameCount <= 0) throw &quote;framecount can not be <= 0&quote;;&nl;        if (fps <= 0) throw &quote;fps can not be <= 0&quote;&nl;&nl;        this.image = image;&nl;        this.currentFrame = 0;&nl;        this.frameCount = frameCount;&nl;        this.timeBetweenFrames = 1/fps;&nl;        this.timeSinceLastFrame = this.timeBetweenFrames;&nl;        this.frameWidth = this.image.width / this.frameCount;&nl;    &cbraces;&nl;&nl;    /**&nl;        Draws this element to the back buffer&nl;        @param dt Time in seconds since the last frame&nl;&tb;&tb;@param context The context to draw to&nl;&tb;&tb;@param xScroll The global scrolling value of the x axis&nl;&tb;&tb;@param yScroll The global scrolling value of the y axis&nl;    */&nl;    this.draw = function(/**Number*/ dt&cm; /**CanvasRenderingContext2D*/ context&cm; /**Number*/ xScroll&cm; /**Number*/ yScroll)&nl;    &obraces;&nl;        var sourceX = this.frameWidth * this.currentFrame;&nl;        context.drawImage(this.image&cm; sourceX&cm; 0&cm; this.frameWidth&cm; this.image.height&cm; this.x - xScroll&cm; this.y - yScroll&cm; this.frameWidth&cm; this.image.height);&nl;&nl;        this.timeSinceLastFrame -= dt;&nl;        if (this.timeSinceLastFrame <= 0)&nl;        &obraces;&nl;           this.timeSinceLastFrame = this.timeBetweenFrames;&nl;           ++this.currentFrame;&nl;           this.currentFrame %= this.frameCount;&nl;        &cbraces;&nl;    &cbraces;&nl;&nl;    this.collisionArea = function()&nl;    &obraces;&nl;        return new Rectangle().startupRectangle(this.x&cm; this.y&cm; this.frameWidth&cm; this.image.height);&nl;    &cbraces;&nl;&cbraces;&nl;&nl;AnimatedGameObject.prototype = new VisualGameObject;"},{"id" : 8, "x" : 6600, "y" : 950, "width" : 500, "height" : 700, "title" : "C&cl;&bkslash;Users&bkslash;shuklp.CORP&bkslash;Documents&bkslash;MS&bkslash;CSYE 6220&bkslash;MainMenu&bkslash;MainMenu.js", "txt" : "/**&nl;    The main menu screen&nl;    @author <a href=&quote;mailto&cl;matthewcasperson@gmail.com&quote;>Matthew Casperson</a>&nl;    @class&nl;*/&nl;function MainMenu()&nl;&obraces;&nl;    this.startupMainMenu = function()&nl;    &obraces;&nl;        this.startupVisualGameObject(g_ResourceManager.mainmenu&cm; 0&cm; 0&cm; 1);&nl;        return this;&nl;    &cbraces;&nl;&nl;    /**&nl;        Called when a key is pressed&nl;        @param event Event Object&nl;    */&nl;    this.keyDown = function(event)&nl;    &obraces;&nl;        g_ApplicationManager.startLevel();&nl;    &cbraces;&nl;&cbraces;&nl;MainMenu.prototype = new VisualGameObject;"},{"id" : 9, "x" : 7200, "y" : 950, "width" : 500, "height" : 700, "title" : "C&cl;&bkslash;Users&bkslash;shuklp.CORP&bkslash;Documents&bkslash;MS&bkslash;CSYE 6220&bkslash;MainMenu&bkslash;Player.js", "txt" : "/**&nl;    A class to represent the player on the screen&nl;    @author <a href=&quote;mailto&cl;matthewcasperson@gmail.com&quote;>Matthew Casperson</a>&nl;    @class&nl;*/&nl;function Player()&nl;&obraces;&nl;    /** The maximum height of the jump&nl;        @type Number&nl;     */&nl;    this.jumpHeight = 64;&nl;    /** The constant or half PI&nl;        @type Number&nl;     */&nl;    this.halfPI = Math.PI / 2;&nl;    /** The amount of time to spend in the air when jumping&nl;        @type Number&nl;     */&nl;    this.jumpHangTime = 0.5;&nl;    /** The speed to progress alone the sine wave that defines&nl;        the jumping arc&nl;        @type Number&nl;     */&nl;    this.jumpSinWaveSpeed = this.halfPI / this.jumpHangTime;&nl;    /** The current position on the sine wave that defines the jump arc&nl;        @type Number&nl;     */&nl;    this.jumpSinWavePos = 0;&nl;    /** The rate to fall at&nl;        @type Number&nl;     */&nl;    this.fallMultiplyer = 1.5;&nl;    /** True when the player is on the ground&cm; false otherwise&nl;        @type Boolean&nl;     */&nl;    this.grounded = true;&nl;    /** the players running speed&nl;        @type Number&nl;     */&nl;    this.speed = 75;&nl;    /** True if the player is moving left&cm; false otherwise&nl;        @type Boolean&nl;     */&nl;    this.left = false;&nl;    /** True if the player is moving right&cm; false otherwise&nl;        @type Boolean&nl;     */&nl;    this.right = false;&nl;    /** A reference to the level object&nl;        @type Level&nl;    */&nl;    this.level = null;&nl;    /** The distance between the player and the edge of the screen&nl;        @type Number&nl;     */&nl;    this.screenBorder = 100;&nl;&nl;    /**&nl;        Initialises this object&nl;    */&nl;    this.startupPlayer = function(level)&nl;    &obraces;&nl;        this.startupAnimatedGameObject(g_ResourceManager.idleLeft&cm; 300&cm; 400 - 48 - 48&cm; 4&cm; 6&cm; 20);&nl;        this.level = level;&nl;        return this;&nl;    &cbraces;&nl;&nl;    /**&nl;        Called when a key is pressed&nl;        @param event Event Object&nl;    */&nl;    this.keyDown = function(event)&nl;    &obraces;&nl;        var updateRequired = false;&nl;&nl;        // left&nl;        if (event.keyCode == 37 && !this.left)&nl;        &obraces;&nl;            this.left = true;&nl;            updateRequired = true;&nl;        &cbraces;&nl;        // right&nl;        if (event.keyCode == 39 && !this.right)&nl;        &obraces;&nl;            this.right = true;&nl;            updateRequired = true;&nl;        &cbraces;&nl;        if (event.keyCode == 32 && this.grounded)&nl;        &obraces;&nl;            this.grounded = false;&nl;            this.jumpSinWavePos = 0;&nl;        &cbraces;&nl;&nl;        if (updateRequired)&nl;            this.updateAnimation();&nl;&nl;    &cbraces;&nl;&nl;    /**&nl;        Called when a key is pressed&nl;        @param event Event Object&nl;    */&nl;    this.keyUp = function(event)&nl;    &obraces;&nl;        // left&nl;        if (event.keyCode == 37)&nl;        &obraces;&nl;            this.left = false;&nl;            this.setAnimation(g_ResourceManager.idleLeft&cm; 6&cm; 20);&nl;        &cbraces;&nl;        // right&nl;        if (event.keyCode == 39)&nl;        &obraces;&nl;            this.right = false;&nl;            this.setAnimation(g_ResourceManager.idleRight&cm; 6&cm; 20);&nl;        &cbraces;&nl;&nl;        this.updateAnimation();&nl;    &cbraces;&nl;&nl;    /**&nl;        Updates the current animation depending on the movement&nl;        of the player. This accounts for the fact that both&nl;        the left and right arrow keys can be pressed at the&nl;        same time.&nl;    */&nl;    this.updateAnimation = function()&nl;    &obraces;&nl;       if (this.right && this.left)&nl;            this.setAnimation(g_ResourceManager.idleLeft&cm; 6&cm; 20);&nl;        else if (this.right)&nl;            this.setAnimation(g_ResourceManager.runRight&cm; 12&cm; 20);&nl;        else if (this.left)&nl;            this.setAnimation(g_ResourceManager.runLeft&cm; 12&cm; 20);&nl;    &cbraces;&nl;&nl;    /**&nl;        Updates the object&nl;        @param dt The time since the last frame in seconds&nl;        @param context The drawing context&nl;        @param xScroll The global scrolling value of the x axis&nl;        @param yScroll The global scrolling value of the y axis&nl;    */&nl;&tb;this.update = function (/**Number*/ dt&cm; /**CanvasRenderingContext2D*/context&cm; /**Number*/ xScroll&cm; /**Number*/ yScroll)&nl;    &obraces;&nl;        if (this.left)&nl;            this.x -= this.speed * dt;&nl;        if (this.right)&nl;            this.x += this.speed * dt;&nl;&nl;        // XOR operation (JavaScript does not have a native XOR operator)&nl;        // only test for a collision if the player is moving left or right (and not trying to do both at&nl;        // the same time)&nl;        if ((this.right || this.left) && !(this.left && this.right))&nl;        &obraces;&nl;            // this will be true until the player is no longer colliding&nl;            var collision = false;&nl;            // the player may have to be pushed back through several block stacks (especially if the&nl;            // frame rate is very slow)&nl;            do&nl;            &obraces;&nl;                // the current position of the player (test the left side if running left&nl;                // and the right side if running right)&nl;                var xPos = this.left ? this.x &cl; this.x + this.frameWidth;&nl;                // the index of stack of blocks that the player is standing on/in&nl;                var currentBlock = this.level.currentBlock(xPos);&nl;                // the height of the stack of blocks that the player is standing on/in&nl;                var groundHeight = this.level.groundHeight(currentBlock);&nl;                // the height of the player (we need the height from the ground up&cm;&nl;                // whereas the this.y value represents the position of the player&nl;                // from the &quote;sky&quote; down).&nl;                var playerHeight = context.canvas.height - (this.y + this.image.height);&nl;                // if the player is not higher than the stack of blocks&cm; it must be colliding&nl;                if (playerHeight  < groundHeight)&nl;                &obraces;&nl;                    collision = true;&nl;                    // we are moving right&cm; so push the player left&nl;                    if (this.right)&nl;                        this.x = this.level.blockWidth * currentBlock - this.frameWidth - 1;&nl;                    // we are moving left&cm; push the player right&nl;                    else&nl;                        this.x = this.level.blockWidth * (currentBlock + 1);&nl;                &cbraces;&nl;                else&nl;                &obraces;&nl;                    collision = false;&nl;                &cbraces;&nl;            &cbraces;  while (collision)&nl;        &cbraces;&nl;&nl;        // keep the player bound to the level&nl;        if (this.x > this.level.blocks.length * this.level.blockWidth - this.frameWidth - 1)&nl;            this.x = this.level.blocks.length * this.level.blockWidth - this.frameWidth - 1;&nl;        if (this.x > context.canvas.width - this.frameWidth + xScroll -  this.screenBorder)&nl;            g_GameObjectManager.xScroll = this.x - (context.canvas.width - this.frameWidth -  this.screenBorder);&nl;        // modify the xScroll value to keep the player on the screen&nl;        if (this.x < 0)&nl;            this.x = 0;&nl;        if (this.x -  this.screenBorder < xScroll)&nl;            g_GameObjectManager.xScroll = this.x - this.screenBorder;&nl;&nl;        // if the player is jumping or falling&cm; move along the sine wave&nl;        if (!this.grounded)&nl;        &obraces;&nl;            // the last position on the sine wave&nl;            var lastHeight = this.jumpSinWavePos;&nl;            // the new position on the sine wave&nl;            this.jumpSinWavePos += this.jumpSinWaveSpeed * dt;&nl;&nl;            // we have fallen off the bottom of the sine wave&cm; so continue falling&nl;            // at a predetermined speed&nl;            if (this.jumpSinWavePos >= Math.PI)&nl;                 this.y += this.jumpHeight / this.jumpHangTime * this.fallMultiplyer * dt;&nl;            // otherwise move along the sine wave&nl;            else&nl;                this.y -= (Math.sin(this.jumpSinWavePos) - Math.sin(lastHeight)) * this.jumpHeight;&nl;        &cbraces;&nl;&nl;        // now that the player has had it&squote;s y position changed we need to check for a collision&nl;        // with the ground below the player. we have to check both the players left and right sides&nl;        // for a collision with the ground&nl;&nl;        // left side&nl;        var currentBlock1 = this.level.currentBlock(this.x);&nl;        // right side&nl;        var currentBlock2 = this.level.currentBlock(this.x + this.frameWidth);&nl;        // ground height below the left side&nl;        var groundHeight1 = this.level.groundHeight(currentBlock1);&nl;        // ground height below the right side&nl;        var groundHeight2 = this.level.groundHeight(currentBlock2);&nl;        // the heighest point under the player&nl;        var maxGroundHeight = groundHeight1 > groundHeight2 ? groundHeight1 &cl; groundHeight2;&nl;        // the players height (relaitive to the bottom of the screen)&nl;        var playerHeight = context.canvas.height - (this.y + this.image.height);&nl;&nl;        // we have hit the ground&nl;        if (maxGroundHeight >= playerHeight)&nl;        &obraces;&nl;            this.y = context.canvas.height - maxGroundHeight - this.image.height;&nl;            this.grounded = true;&nl;            this.jumpSinWavePos = 0;&nl;        &cbraces;&nl;        // otherwise we are falling&nl;        else if (this.grounded)&nl;        &obraces;&nl;            this.grounded = false;&nl;            // starting falling down the sine wave (i.e. from the top)&nl;            this.jumpSinWavePos = this.halfPI;&nl;        &cbraces;&nl;    &cbraces;&nl;&cbraces;&nl;&nl;Player.prototype = new AnimatedGameObject;"},{"id" : 10, "x" : 7800, "y" : 950, "width" : 500, "height" : 700, "title" : "C&cl;&bkslash;Users&bkslash;shuklp.CORP&bkslash;Documents&bkslash;MS&bkslash;CSYE 6220&bkslash;MainMenu&bkslash;LevelEndPost.js", "txt" : "/**&nl;    An object that causes the level to end when it it touched&nl;    @author <a href=&quote;mailto&cl;matthewcasperson@gmail.com&quote;>Matthew Casperson</a>&nl;    @class&nl;*/&nl;function LevelEndPost()&nl;&obraces;&nl;&nl;    this.startupLevelEndPost = function(/**Image*/ image&cm; /**Number*/ x&cm; /**Number*/ y&cm; /**Number*/ z)&nl;    &obraces;&nl;        this.startupAnimatedGameObject(image&cm; x&cm; y&cm; z&cm; 4&cm; 10);&nl;        return this;&nl;    &cbraces;&nl;&nl;    this.shutdown = function()&nl;    &obraces;&nl;        this.shutdownLevelEndPost();&nl;    &cbraces;&nl;&nl;    this.shutdownLevelEndPost = function()&nl;    &obraces;&nl;        this.shutdownAnimatedGameObject();&nl;    &cbraces;&nl;&nl;    /**&nl;        Updates the object&nl;        @param dt The time since the last frame in seconds&nl;        @param context The drawing context&nl;        @param xScroll The global scrolling value of the x axis&nl;        @param yScroll The global scrolling value of the y axis&nl;    */&nl;&tb;this.update = function (/**Number*/ dt&cm; /**CanvasRenderingContext2D*/context&cm; /**Number*/ xScroll&cm; /**Number*/ yScroll)&nl;    &obraces;&nl;        if (this.collisionArea().intersects(g_player.collisionArea()))&nl;        &obraces;&nl;            g_ApplicationManager.openMainMenu();&nl;            this.shutdown();            &nl;        &cbraces;&nl;    &cbraces;&nl;&cbraces;&nl;LevelEndPost.prototype = new AnimatedGameObject;"},{"id" : 11, "x" : 8400, "y" : 950, "width" : 500, "height" : 700, "title" : "C&cl;&bkslash;Users&bkslash;shuklp.CORP&bkslash;Documents&bkslash;MS&bkslash;CSYE 6220&bkslash;MainMenu&bkslash;Powerup.js", "txt" : "/**&nl;    Represents a powerup in the game&nl;    @author <a href=&quote;mailto&cl;matthewcasperson@gmail.com&quote;>Matthew Casperson</a>&nl;    @class&nl;*/&nl;function Powerup()&nl;&obraces;&nl;    /** The value of the powerup&nl;        @type Number&nl;     */&nl;    this.value = 0;&nl;    /** The current position on the sine wave&nl;        @type Number&nl;     */&nl;    this.sineWavePos = 0;&nl;    /** How quickly the powerup cycles through the sine wave&nl;        @type Number&nl;     */&nl;    this.bounceTime = 1;&nl;    /** The speed to increment the sineWavePos value at&nl;        @type Number&nl;     */&nl;    this.bounceSpeed = Math.PI / this.bounceTime;&nl;    /** The height of the powerups bounce&nl;        @type Number&nl;     */&nl;    this.bounceHeight = 10;&nl;&nl;    /**&nl;        Initialises this object&nl;        @param value        The value (score) of this powerup&nl;        @param image        The image to be displayed&nl;        @param x            The position on the X axis&nl;        @param y            The position on the Y axis&nl;        @param z            The depth&nl;        @param frameCount   The number of animation frames in the image&nl;        @param fps          The frames per second to animate this object at&nl;     */&nl;    this.startupPowerup = function(/**Number*/ value&cm; /**Image*/ image&cm; /**Number*/ x&cm; /**Number*/ y&cm; /**Number*/ z&cm; /**Number*/ frameCount&cm; /**Number*/ fps)&nl;    &obraces;&nl;        this.startupAnimatedGameObject(image&cm; x&cm; y - this.bounceHeight&cm; z&cm; frameCount&cm; fps);&nl;        this.value = value;&nl;        return this;&nl;    &cbraces;&nl;&nl;    this.shutdownPowerup = function()&nl;    &obraces;&nl;        this.shutdownAnimatedGameObject();&nl;    &cbraces;&nl;&nl;    this.shutdown = function()&nl;    &obraces;&nl;        this.shutdownPowerup();&nl;    &cbraces;&nl;&nl;    /**&nl;        Updates the object&nl;        @param dt The time since the last frame in seconds&nl;        @param context The drawing context&nl;        @param xScroll The global scrolling value of the x axis&nl;        @param yScroll The global scrolling value of the y axis&nl;    */&nl;&tb;this.update = function (/**Number*/ dt&cm; /**CanvasRenderingContext2D*/context&cm; /**Number*/ xScroll&cm; /**Number*/ yScroll)&nl;    &obraces;&nl;        var lastSineWavePos = this.sineWavePos;&nl;        this.sineWavePos += this.bounceSpeed * dt;&nl;        this.y += (Math.sin(this.sineWavePos) - Math.sin(lastSineWavePos)) * this.bounceHeight;&nl;&nl;        if (this.collisionArea().intersects(g_player.collisionArea()))&nl;        &obraces;&nl;            this.shutdown();&nl;            g_score += this.value;&nl;            g_ApplicationManager.updateScore();&nl;        &cbraces;&nl;    &cbraces;&nl;&cbraces;&nl;&nl;Powerup.prototype = new AnimatedGameObject;"},{"id" : 12, "x" : 9000, "y" : 950, "width" : 500, "height" : 700, "title" : "C&cl;&bkslash;Users&bkslash;shuklp.CORP&bkslash;Documents&bkslash;MS&bkslash;CSYE 6220&bkslash;MainMenu&bkslash;Level.js", "txt" : "/**&nl;    A class to represent the level&nl;    @author <a href=&quote;mailto&cl;matthewcasperson@gmail.com&quote;>Matthew Casperson</a>&nl;    @class&nl;*/&nl;function Level()&nl;&obraces;&nl;    this.blocks = new Array();&nl;    this.powerups = new Object;&nl;    this.blockWidth = 64;&nl;    this.blockHeight = 48;&nl;&nl;    /**&nl;        Initialises this object&nl;    */&nl;    this.startupLevel = function(canvasWidth&cm; canvasHeight)&nl;    &obraces;&nl;        this.blocks[0] = 3;&nl;        this.blocks[1] = 2;&nl;        this.blocks[2] = 1;&nl;        this.blocks[3] = 1;&nl;        this.blocks[4] = 1;&nl;        this.blocks[5] = 1;&nl;        this.blocks[6] = 2;&nl;        this.blocks[7] = 3;&nl;        this.blocks[8] = 2;&nl;        this.blocks[9] = 1;&nl;        this.blocks[10] = 2;&nl;        this.blocks[11] = 3;&nl;        this.blocks[12] = 4;&nl;        this.blocks[13] = 5;&nl;        this.blocks[14] = 4;&nl;        this.blocks[15] = 3;&nl;&nl;        this.powerups[&squote;1&squote;] = &squote;Gem&squote;;&nl;        this.powerups[&squote;6&squote;] = &squote;Gem&squote;;&nl;        this.powerups[&squote;10&squote;] = &squote;Gem&squote;;&nl;        this.powerups[&squote;14&squote;] = &squote;LevelEndPost&squote;;&nl;&nl;        this.addBlocks(canvasWidth&cm; canvasHeight);&nl;        this.addPowerups(canvasWidth&cm; canvasHeight);&nl;&nl;        return this;&nl;    &cbraces;&nl;&nl;    /**&nl;        Adds the blocks to the screen by creating VisualGameObjects&nl;    */&nl;    this.addBlocks = function(canvasWidth&cm; canvasHeight)&nl;    &obraces;&nl;        for (var x = 0; x < this.blocks.length; ++x)&nl;        &obraces;&nl;            for (var y = 0; y < this.blocks[x]; ++y)&nl;            &obraces;&nl;                new VisualGameObject().startupVisualGameObject(g_ResourceManager.block&cm; x * this.blockWidth&cm; canvasHeight - (y + 1) * this.blockHeight&cm; 4);&nl;            &cbraces;&nl;        &cbraces;&nl;    &cbraces;&nl;&nl;    this.addPowerups = function(canvasWidth&cm; canvasHeight)&nl;    &obraces;&nl;        for (var x = 0; x < this.blocks.length; ++x)&nl;        &obraces;&nl;            if (this.powerups[x])&nl;            &obraces;&nl;                var xPosition = x * this.blockWidth + this.blockWidth / 2;&nl;                var yPosition = canvasHeight - this.groundHeight(x);&nl;&nl;                switch(this.powerups[x])&nl;                 &obraces;&nl;                    case &squote;Gem&squote;&cl;&nl;                        new Powerup().startupPowerup(10&cm; g_ResourceManager.gem&cm; xPosition - g_ResourceManager.gem.width / 2&cm; yPosition - g_ResourceManager.gem.height&cm; 4&cm; 1&cm; 1);&nl;                        break;&nl;                    case &squote;LevelEndPost&squote;&cl;&nl;                        new LevelEndPost().startupLevelEndPost(g_ResourceManager.portal&cm; xPosition - g_ResourceManager.portal.width / 2 / 4&cm; yPosition - g_ResourceManager.portal.height&cm; 4);&nl;                        break;&nl;                 &cbraces;&nl;            &cbraces;&nl;        &cbraces;&nl;    &cbraces;&nl;&nl;    /**&nl;        @return     The block under the specified x position&nl;        @param x    The x position to test&nl;    */&nl;    this.currentBlock = function(x)&nl;    &obraces;&nl;        return parseInt( x / this.blockWidth);&nl;    &cbraces;&nl;    &nl;    /**&nl;        @return             The hieght of the ground under the specified block&nl;        @param blockIndex   The block number&nl;    */&nl;    this.groundHeight = function(blockIndex)&nl;    &obraces;&nl;        if (blockIndex < 0 || blockIndex > this.blocks.length) return 0;&nl;&nl;        return this.blocks[blockIndex] *  this.blockHeight;&nl;    &cbraces;&nl;&cbraces;"},{"id" : 13, "x" : 9600, "y" : 950, "width" : 500, "height" : 700, "title" : "C&cl;&bkslash;Users&bkslash;shuklp.CORP&bkslash;Documents&bkslash;MS&bkslash;CSYE 6220&bkslash;MainMenu&bkslash;Utils.js", "txt" : "/**&nl;    Removes a number of objects from the array&nl;    @param from The first object to remove&nl;    @param to (Optional) The last object to remove&nl;*/&nl;Array.prototype.remove = function(/**Number*/ from&cm; /**Number*/ to)&nl;&obraces;&nl;  var rest = this.slice((to || from) + 1 || this.length);&nl;  this.length = from < 0 ? this.length + from &cl; from;&nl;  return this.push.apply(this&cm; rest);&nl;&cbraces;;&nl;&nl;/**&nl;    Removes a specific object from the array&nl;    @param object The object to remove&nl;*/&nl;Array.prototype.removeObject = function(object)&nl;&obraces;&nl;    for (var i = 0; i < this.length; ++i)&nl;    &obraces;&nl;        if (this[i] === object)&nl;        &obraces;&nl;            this.remove(i);&nl;            break;&nl;        &cbraces;&nl;    &cbraces;&nl;&cbraces;"},{"id" : 14, "x" : 10200, "y" : 950, "width" : 500, "height" : 700, "title" : "C&cl;&bkslash;Users&bkslash;shuklp.CORP&bkslash;Documents&bkslash;MS&bkslash;CSYE 6220&bkslash;MainMenu&bkslash;ApplicationManager.js", "txt" : "/**&nl;    The ApplicationManager is used to manage the application itself.&nl;    @author <a href=&quote;mailto&cl;matthewcasperson@gmail.com&quote;>Matthew Casperson</a>&nl;    @class&nl;*/&nl;function ApplicationManager()&nl;&obraces;&nl;    this.canvasWidth = 0;&nl;    this.canvasHeight = 0;&nl;&nl;    /**&nl;        Initialises this object&nl;        @param canvasWidth      The width of the canvas&nl;        @param canvasHeight     The height of the canvas&nl;        @return                 A reference to the initialised object&nl;&nl;    */&nl;    this.startupApplicationManager = function(canvasWidth&cm; canvasHeight)&nl;    &obraces;&nl;        g_ApplicationManager = this;&nl;        this.canvasWidth = canvasWidth;&nl;        this.canvasHeight = canvasHeight;&nl;&nl;        this.openMainMenu();&nl;&nl;        return this;&nl;    &cbraces;&nl;&nl;    this.startLevel = function()&nl;    &obraces;&nl;        g_GameObjectManager.shutdownAll();&nl;        this.level = new Level().startupLevel(this.canvasWidth&cm; this.canvasHeight);&nl;        this.background3 = new RepeatingGameObject().startupRepeatingGameObject(g_ResourceManager.background2&cm; 0&cm; 100&cm; 3&cm; 600&cm; 320&cm; 0.75);&nl;        this.background2 = new RepeatingGameObject().startupRepeatingGameObject(g_ResourceManager.background1&cm; 0&cm; 100&cm; 2&cm; 600&cm; 320&cm; 0.5);&nl;        this.background = new RepeatingGameObject().startupRepeatingGameObject(g_ResourceManager.background0&cm; 0&cm; 0&cm; 1&cm; 600&cm; 320&cm; 0.25);&nl;        g_player = new Player().startupPlayer(this.level);&nl;        this.updateScore();&nl;    &cbraces;&nl;&nl;    this.openMainMenu = function()&nl;    &obraces;&nl;        g_GameObjectManager.shutdownAll();&nl;        g_GameObjectManager.xScroll = 0;&nl;        g_GameObjectManager.yScroll = 0;&nl;        g_score = 0;&nl;        this.mainMenu = new MainMenu().startupMainMenu();&nl;    &cbraces;&nl;&nl;    this.updateScore = function()&nl;    &obraces;&nl;        var score = document.getElementById(&quote;Score&quote;);&nl;        score.innerHTML = String(g_score);&nl;    &cbraces;&nl;&cbraces;"},{"id" : 15, "x" : 6000, "y" : 1850, "width" : 500, "height" : 700, "title" : "C&cl;&bkslash;Users&bkslash;shuklp.CORP&bkslash;Documents&bkslash;MS&bkslash;CSYE 6220&bkslash;MainMenu&bkslash;GameObjectManager.js", "txt" : "/**&nl;    A manager for all the objects in the game&nl;    @author <a href=&quote;mailto&cl;matthewcasperson@gmail.com&quote;>Matthew Casperson</a>&nl;    @class&nl;*/&nl;function GameObjectManager()&nl;&obraces;&nl;    /** An array of game objects &nl;        @type Arary&nl;    */&nl;    this.gameObjects = new Array();&nl;    /** An array of new game objects&nl;        @type Arary&nl;    */&nl;    this.addedGameObjects = new Array();&nl;    /** An array of removed game objects&nl;        @type Arary&nl;    */&nl;    this.removedGameObjects = new Array();&nl;    /** The time that the last frame was rendered  &nl;        @type Date&nl;    */&nl;    this.lastFrame = new Date().getTime();&nl;    /** The global scrolling value of the x axis  &nl;        @type Number&nl;    */&nl;    this.xScroll = 0;&nl;    /** The global scrolling value of the y axis  &nl;        @type Number&nl;    */&nl;    this.yScroll = 0;&nl;    /** A reference to the canvas element  &nl;        @type HTMLCanvasElement&nl;    */&nl;    this.canvas = null;&nl;    /** A reference to the 2D context of the canvas element&nl;        @type CanvasRenderingContext2D&nl;    */&nl;    this.context2D = null;&nl;    /** A reference to the in-memory canvas used as a back buffer &nl;        @type HTMLCanvasElement&nl;    */&nl;    this.backBuffer = null;&nl;    /** A reference to the backbuffer 2D context &nl;        @type CanvasRenderingContext2D&nl;    */&nl;    this.backBufferContext2D = null;&nl;    /** True if the canvas element is supported&cm; false otherwise&nl;        @type Boolean&nl;    */&nl;    this.canvasSupported = false;&nl;&tb;/** True if the resources supplied to the ResourceManager are all loaded&cm; false otherwise&nl;        @type Boolean&nl;    */&nl;    this.resourcesLoaded = false;&nl;&tb;/** The current colour of the loading screen&nl;        @type Number&nl;    */&nl;&tb;this.loadingScreenCol = 0;&nl;&tb;/** The direction of the changes to the loading screen colour.&nl;&tb;&tb;1 = colour moving towards white&nl;&tb;&tb;-1 = colour moving topwards balck&nl;        @type Number&nl;    */&tb;&nl;&tb;this.loadingScreenColDirection = 1;&nl;&tb;/** How quickly to change the loading screen colour per second&nl;        @type Number&nl;    */&nl;&tb;this.loadingScreenColSpeed = 255;&nl;&nl;    /**&nl;        Initialises this object&nl;        @return A reference to the initialised object&nl;    */&nl;    this.startupGameObjectManager = function()&nl;    &obraces;&nl;        // set the global pointer to reference this object&nl;        g_GameObjectManager = this;&nl;&nl;        // watch for keyboard events&nl;        document.onkeydown = function(event)&obraces;g_GameObjectManager.keyDown(event);&cbraces;&nl;        document.onkeyup = function(event)&obraces;g_GameObjectManager.keyUp(event);&cbraces;&nl;&nl;        // get references to the canvas elements and their 2D contexts&nl;        this.canvas = document.getElementById(&squote;canvas&squote;);&nl;&nl;        // if the this.canvas.getContext function does not exist it is a safe bet that&nl;        // the current browser does not support the canvas element.&nl;        // in this case we don&squote;t go any further&cm; which will save some debuggers (like&nl;        // the IE8 debugger) from throwing up a lot of errors.&nl;        if (this.canvas.getContext)&nl;        &obraces;&nl;            this.canvasSupported = true;&nl;            this.context2D = this.canvas.getContext(&squote;2d&squote;);&nl;            this.backBuffer = document.createElement(&squote;canvas&squote;);&nl;            this.backBuffer.width = this.canvas.width;&nl;            this.backBuffer.height = this.canvas.height;&nl;            this.backBufferContext2D = this.backBuffer.getContext(&squote;2d&squote;);&nl;        &cbraces;&nl;&nl;        // create a new ResourceManager&nl;        new ResourceManager().startupResourceManager(&nl;            [&obraces;name&cl; &squote;runLeft&squote;&cm; src&cl; &squote;run_left.png&squote;&cbraces;&cm;&nl;            &obraces;name&cl; &squote;runRight&squote;&cm; src&cl; &squote;run_right.png&squote;&cbraces;&cm;&nl;            &obraces;name&cl; &squote;idleLeft&squote;&cm; src&cl; &squote;idle_left.png&squote;&cbraces;&cm;&nl;            &obraces;name&cl; &squote;idleRight&squote;&cm; src&cl; &squote;idle_right.png&squote;&cbraces;&cm;&nl;            &obraces;name&cl; &squote;background0&squote;&cm; src&cl; &squote;jsplatformer4_b0.png&squote;&cbraces;&cm;&nl;            &obraces;name&cl; &squote;background1&squote;&cm; src&cl; &squote;jsplatformer4_b1.png&squote;&cbraces;&cm;&nl;            &obraces;name&cl; &squote;background2&squote;&cm; src&cl; &squote;jsplatformer4_b2.png&squote;&cbraces;&cm;&nl;            &obraces;name&cl; &squote;block&squote;&cm; src&cl; &squote;BlockA0.png&squote;&cbraces;&cm;&nl;            &obraces;name&cl; &squote;gem&squote;&cm; src&cl; &squote;Gem.png&squote;&cbraces;&cm;&nl;            &obraces;name&cl; &squote;mainmenu&squote;&cm; src&cl; &squote;mainmenu.png&squote;&cbraces;&cm;&nl;            &obraces;name&cl; &squote;portal&squote;&cm; src&cl; &squote;portal.png&squote;&cbraces;]);&nl;&nl;        // use setInterval to call the draw function&nl;        setInterval(function()&obraces;g_GameObjectManager.draw();&cbraces;&cm; SECONDS_BETWEEN_FRAMES);&nl;        &nl;        return this;        &nl;    &cbraces;&nl;    &nl;    /**&nl;        The render loop&nl;    */&nl;    this.draw = function ()&nl;    &obraces;&nl;        // calculate the time since the last frame&nl;        var thisFrame = new Date().getTime();&nl;        var dt = (thisFrame - this.lastFrame)/1000;&nl;        this.lastFrame = thisFrame;&nl;&nl;        if (!this.resourcesLoaded)&nl;        &obraces;&nl;            var numLoaded = 0;&nl;            for (i = 0; i < g_ResourceManager.imageProperties.length; ++i)&nl;            &obraces;&nl;                if (g_ResourceManager[g_ResourceManager.imageProperties[i]].complete)&nl;                &obraces;&nl;                    ++numLoaded;&nl;                &cbraces;&nl;            &cbraces;&nl;            if ( numLoaded == g_ResourceManager.imageProperties.length )&nl;            &obraces;&nl;                // create a new ApplicationManager&nl;                new ApplicationManager().startupApplicationManager(this.canvas.width&cm; this.canvas.height);&nl;                this.resourcesLoaded = true;&nl;            &cbraces;&nl;            else&nl;            &obraces;&nl;                this.loadingScreenCol += this.loadingScreenColDirection * this.loadingScreenColSpeed * dt;&nl;                if (this.loadingScreenCol > 255)&nl;                &obraces;&nl;                    this.loadingScreenCol = 255;&nl;                    this.loadingScreenColDirection = -1;&nl;                &cbraces;&nl;                else if (this.loadingScreenCol < 0)&nl;                &obraces;&nl;                    this.loadingScreenCol = 0;&nl;                    this.loadingScreenColDirection = 1;&nl;                &cbraces;&nl;                this.context2D.fillStyle = &quote;rgb(&quote; + parseInt(this.loadingScreenCol) + &quote;&cm;&quote; + parseInt(this.loadingScreenCol) + &quote;&cm;&quote; + parseInt(this.loadingScreenCol) + &quote;)&quote;;&nl;                this.context2D.fillRect (0&cm; 0&cm; this.canvas.width&cm; this.canvas.height);&nl;            &cbraces;&nl;        &cbraces;&nl;        &nl;        // clear the drawing contexts&nl;        if (this.canvasSupported && this.resourcesLoaded)&nl;        &obraces;&nl;            this.backBufferContext2D.clearRect(0&cm; 0&cm; this.backBuffer.width&cm; this.backBuffer.height);&nl;&nl;            this.addNewGameObjects();&nl;            this.removeOldGameObjects();&nl;        &nl;            // first update all the game objects&nl;            for (var x = 0; x < this.gameObjects.length; ++x)&nl;            &obraces;&nl;                if (this.gameObjects[x].update)&nl;                &obraces;&nl;                    this.gameObjects[x].update(dt&cm; this.backBufferContext2D&cm; this.xScroll&cm; this.yScroll);&nl;                &cbraces;&nl;            &cbraces;&nl;&nl;            // then draw the game objects&nl;            for (var x = 0; x < this.gameObjects.length; ++x)&nl;            &obraces;&nl;                if (this.gameObjects[x].draw)&nl;                &obraces;&nl;                    this.gameObjects[x].draw(dt&cm; this.backBufferContext2D&cm; this.xScroll&cm; this.yScroll);&nl;                &cbraces;&nl;            &cbraces;&nl;&nl;            // copy the back buffer to the displayed canvas&nl;            this.context2D.drawImage(this.backBuffer&cm; 0&cm; 0);&nl;        &cbraces;        &nl;    &cbraces;;&nl;&nl;    this.shutdownAll = function()&nl;    &obraces;&nl;        for (var x = 0; x < this.gameObjects.length; ++x)&nl;        &obraces;&nl;            if (this.gameObjects[x].shutdown)&nl;            &obraces;&nl;                this.gameObjects[x].shutdown();&nl;            &cbraces;&nl;        &cbraces;&nl;&nl;        this.removeOldGameObjects();&nl;    &cbraces;&nl;    &nl;    /**&nl;        Adds a new GameObject to the gameObjects collection&nl;        @param gameObject The object to add&nl;    */&nl;    this.addGameObject = function(gameObject)&nl;    &obraces;&nl;        this.addedGameObjects.push(gameObject);&nl;    &cbraces;;&nl;&nl;    this.addNewGameObjects = function()&nl;    &obraces;&nl;        if (this.addedGameObjects.length != 0)&nl;        &obraces;&nl;            for (var x = 0; x < this.addedGameObjects.length; ++x)&nl;            &obraces;&nl;                this.gameObjects.push(this.addedGameObjects[x]);&nl;            &cbraces;&nl;&nl;            this.addedGameObjects.clear();&nl;            this.gameObjects.sort(function(a&cm;b)&obraces;return a.zOrder - b.zOrder;&cbraces;);&nl;        &cbraces;&nl;    &cbraces;&nl;&nl;    /**&nl;        Removes a GameObject from the gameObjects collection&nl;        @param gameObject The object to remove&nl;    */&nl;    this.removeGameObject = function(gameObject)&nl;    &obraces;&nl;        this.removedGameObjects.push(gameObject);&nl;    &cbraces;&nl;&nl;    this.removeOldGameObjects = function()&nl;    &obraces;&nl;        if (this.removedGameObjects.length != 0)&nl;        &obraces;&nl;            for (var x = 0; x < this.removedGameObjects.length; ++x)&nl;            &obraces;&nl;                this.gameObjects.removeObject(this.removedGameObjects[x]);&nl;            &cbraces;&nl;            this.removedGameObjects.clear();&nl;        &cbraces;&nl;    &cbraces;&nl;&nl;    this.keyDown = function(event)&nl;    &obraces;&nl;        for (var x = 0; x < this.gameObjects.length; ++x)&nl;        &obraces;&nl;            if (this.gameObjects[x].keyDown)&nl;            &obraces;&nl;                this.gameObjects[x].keyDown(event);&nl;            &cbraces;&nl;        &cbraces;&nl;    &cbraces;&nl;&nl;    this.keyUp = function(event)&nl;    &obraces;&nl;        for (var x = 0; x < this.gameObjects.length; ++x)&nl;        &obraces;&nl;            if (this.gameObjects[x].keyUp)&nl;            &obraces;&nl;                this.gameObjects[x].keyUp(event);&nl;            &cbraces;&nl;        &cbraces;&nl;    &cbraces;&nl;&cbraces;"},{"id" : 16, "x" : 6600, "y" : 1850, "width" : 500, "height" : 700, "title" : "C&cl;&bkslash;Users&bkslash;shuklp.CORP&bkslash;Documents&bkslash;MS&bkslash;CSYE 6220&bkslash;MainMenu&bkslash;Main.js", "txt" : "/** target frames per second  &nl;    @type Number&nl;*/&nl;var FPS = 30;&nl;/** time between frames &nl;    @type Number&nl;*/&nl;var SECONDS_BETWEEN_FRAMES = 1 / FPS;&nl;/** A global reference to the GameObjectManager instance  &nl;    @type GameObjectManager&nl;*/&nl;var g_GameObjectManager = null;&nl;/** A global reference to the ApplicationManager instance  &nl;    @type ApplicationManager&nl;*/&nl;var g_ApplicationManager = null;&nl;/** A global reference to the ResourceManager instance&nl;    @type ResourceManager&nl;*/&nl;var g_ResourceManager = null;&nl;/** The players score&nl;    @type Number&nl; */&nl;var g_score = 0;&nl;/** A reference to the player&nl;    @type Player    &nl; */&nl;var g_player = null;&nl;/** An image to be used by the application&nl;    @type Image&nl;*/&nl;&nl;// The entry point of the application is set to the init function&nl;window.onload = init;&nl;&nl;/**&nl;    Application entry point&nl;*/&nl;function init()&nl;&obraces;&nl;    new GameObjectManager().startupGameObjectManager();&nl;&cbraces;"},{"id" : 17, "x" : 310, "y" : 50, "width" : 200, "height" : 100, "title" : "GameObject", "txt" : "Method&nl;---------------&nl;30 - 37 startupGameObject&nl;42 - 45 shutdownGameObject&nl;47 - 50 shutdown&nl;---------------&nl;"},{"id" : 18, "x" : 310, "y" : 230, "width" : 200, "height" : 100, "title" : "VisualGameObject", "txt" : "Method&nl;---------------&nl;21 - 24 draw&nl;33 - 38 startupVisualGameObject&nl;43 - 47 shutdownVisualGameObject&nl;49 - 52 shutdown&nl;54 - 57 collisionArea&nl;---------------&nl;"},{"id" : 19, "x" : 310, "y" : 410, "width" : 203, "height" : 99, "title" : "AnimatedGameObject", "txt" : "Method&nl;---------------&nl;42 - 55 startupAnimatedGameObject&nl;57 - 60 shutdownAnimatedGameObject&nl;62 - 73 setAnimation&nl;82 - 94 draw&nl;96 - 99 collisionArea&nl;---------------&nl;"},{"id" : 20, "x" : 310, "y" : 590, "width" : 200, "height" : 100, "title" : "Player", "txt" : "Method&nl;---------------&nl;61 - 66 startupPlayer&nl;72 - 97 keyDown&nl;103 - 119 keyUp&nl;127 - 135 updateAnimation&nl;144 - 250 update&nl;---------------&nl;"},{"id" : 21, "x" : 602, "y" : 594, "width" : 200, "height" : 100, "title" : "LevelEndPost", "txt" : "Method&nl;---------------&nl;9 - 13 startupLevelEndPost&nl;15 - 18 shutdown&nl;20 - 23 shutdownLevelEndPost&nl;32 - 39 update&nl;---------------&nl;"},{"id" : 22, "x" : 905, "y" : 596, "width" : 200, "height" : 100, "title" : "Powerup", "txt" : "Method&nl;---------------&nl;39 - 44 startupPowerup&nl;46 - 49 shutdownPowerup&nl;51 - 54 shutdown&nl;63 - 75 update&nl;---------------&nl;"},{"id" : 23, "x" : 610, "y" : 410, "width" : 200, "height" : 100, "title" : "MainMenu", "txt" : "Method&nl;---------------&nl;8 - 12 startupMainMenu&nl;18 - 21 keyDown&nl;---------------&nl;"},{"id" : 24, "x" : 1500, "y" : 50, "width" : 200, "height" : 100, "title" : "ResourceManager", "txt" : "Method&nl;---------------&nl;22 - 43 startupResourceManager&nl;---------------&nl;"},{"id" : 25, "x" : 1500, "y" : 250, "width" : 200, "height" : 100, "title" : "startupResourceManager", "txt" : ""},{"id" : 26, "x" : 1250, "y" : 250, "width" : 200, "height" : 100, "title" : "GameObjectManager.js", "txt" : "102  new ResourceManager().startupResourceManager(&nl;"},{"id" : 27, "x" : 2000, "y" : 450, "width" : 200, "height" : 100, "title" : "Rectangle", "txt" : "Method&nl;---------------&nl;20 - 27 startupRectangle&nl;33 - 45 intersects&nl;---------------&nl;"},{"id" : 28, "x" : 2000, "y" : 650, "width" : 200, "height" : 100, "title" : "startupRectangle", "txt" : ""},{"id" : 29, "x" : 1750, "y" : 650, "width" : 200, "height" : 100, "title" : "VisualGameObject.js", "txt" : "56  return new Rectangle().startupRectangle(this.x&cm; this.y&cm; this.image.width&cm; this.image.height);&nl;"},{"id" : 30, "x" : 1750, "y" : 850, "width" : 200, "height" : 100, "title" : "AnimatedGameObject.js", "txt" : "98  return new Rectangle().startupRectangle(this.x&cm; this.y&cm; this.frameWidth&cm; this.image.height);&nl;"},{"id" : 31, "x" : 2500, "y" : 650, "width" : 200, "height" : 100, "title" : "intersects", "txt" : ""},{"id" : 32, "x" : 2250, "y" : 650, "width" : 200, "height" : 100, "title" : "LevelEndPost.js", "txt" : "34  if (this.collisionArea().intersects(g_player.collisionArea()))&nl;"},{"id" : 33, "x" : 2250, "y" : 850, "width" : 200, "height" : 100, "title" : "Powerup.js", "txt" : "69  if (this.collisionArea().intersects(g_player.collisionArea()))&nl;"},{"id" : 34, "x" : 4600, "y" : 50, "width" : 200, "height" : 100, "title" : "Array", "txt" : ""},{"id" : 35, "x" : 4300, "y" : 50, "width" : 200, "height" : 100, "title" : "ResourceManager", "txt" : "Composition Information&nl;---------------------&nl;28 imageProperties"},{"id" : 36, "x" : 4300, "y" : 230, "width" : 200, "height" : 100, "title" : "Level", "txt" : "Composition Information&nl;---------------------&nl;8 blocks"},{"id" : 37, "x" : 4300, "y" : 410, "width" : 200, "height" : 100, "title" : "GameObjectManager", "txt" : "Composition Information&nl;---------------------&nl;11 gameObjects"},{"id" : 38, "x" : 4300, "y" : 590, "width" : 200, "height" : 100, "title" : "GameObjectManager", "txt" : "Composition Information&nl;---------------------&nl;15 addedGameObjects"},{"id" : 39, "x" : 4300, "y" : 770, "width" : 200, "height" : 100, "title" : "GameObjectManager", "txt" : "Composition Information&nl;---------------------&nl;19 removedGameObjects"},{"id" : 40, "x" : 4600, "y" : 950, "width" : 200, "height" : 100, "title" : "Image", "txt" : ""},{"id" : 41, "x" : 4300, "y" : 950, "width" : 200, "height" : 100, "title" : "ResourceManager", "txt" : "Composition Information&nl;---------------------&nl;34 thisImage"},{"id" : 42, "x" : 4600, "y" : 1130, "width" : 200, "height" : 100, "title" : "Rectangle", "txt" : ""},{"id" : 43, "x" : 4300, "y" : 1130, "width" : 200, "height" : 100, "title" : "VisualGameObject", "txt" : "Composition Information&nl;---------------------&nl;56 "},{"id" : 44, "x" : 4300, "y" : 1310, "width" : 200, "height" : 100, "title" : "AnimatedGameObject", "txt" : "Composition Information&nl;---------------------&nl;98 "},{"id" : 45, "x" : 4600, "y" : 1490, "width" : 200, "height" : 100, "title" : "GameObjectManager", "txt" : ""},{"id" : 46, "x" : 4300, "y" : 1490, "width" : 200, "height" : 100, "title" : "init", "txt" : "Composition Information&nl;---------------------&nl;41 "},{"id" : 47, "x" : 4600, "y" : 1670, "width" : 200, "height" : 100, "title" : "ApplicationManager", "txt" : ""},{"id" : 48, "x" : 4300, "y" : 1670, "width" : 200, "height" : 100, "title" : "GameObjectManager", "txt" : "Composition Information&nl;---------------------&nl;144 "},{"id" : 49, "x" : 4600, "y" : 1850, "width" : 200, "height" : 100, "title" : "ResourceManager", "txt" : ""},{"id" : 50, "x" : 4300, "y" : 1850, "width" : 200, "height" : 100, "title" : "GameObjectManager", "txt" : "Composition Information&nl;---------------------&nl;102 "},{"id" : 51, "x" : 4600, "y" : 2030, "width" : 200, "height" : 100, "title" : "Date", "txt" : ""},{"id" : 52, "x" : 4300, "y" : 2030, "width" : 200, "height" : 100, "title" : "GameObjectManager", "txt" : "Composition Information&nl;---------------------&nl;23 lastFrame"},{"id" : 53, "x" : 4300, "y" : 2210, "width" : 200, "height" : 100, "title" : "GameObjectManager", "txt" : "Composition Information&nl;---------------------&nl;127 thisFrame"},{"id" : 54, "x" : 4600, "y" : 2390, "width" : 200, "height" : 100, "title" : "MainMenu", "txt" : ""},{"id" : 55, "x" : 4300, "y" : 2390, "width" : 200, "height" : 100, "title" : "ApplicationManager", "txt" : "Composition Information&nl;---------------------&nl;46 mainMenu"},{"id" : 56, "x" : 4600, "y" : 2570, "width" : 200, "height" : 100, "title" : "Player", "txt" : ""},{"id" : 57, "x" : 4300, "y" : 2570, "width" : 200, "height" : 100, "title" : "ApplicationManager", "txt" : "Composition Information&nl;---------------------&nl;36 "},{"id" : 58, "x" : 4600, "y" : 2750, "width" : 200, "height" : 100, "title" : "Powerup", "txt" : ""},{"id" : 59, "x" : 4300, "y" : 2750, "width" : 200, "height" : 100, "title" : "Level", "txt" : "Composition Information&nl;---------------------&nl;72 "},{"id" : 60, "x" : 4600, "y" : 2930, "width" : 200, "height" : 100, "title" : "VisualGameObject", "txt" : ""},{"id" : 61, "x" : 4300, "y" : 2930, "width" : 200, "height" : 100, "title" : "Level", "txt" : "Composition Information&nl;---------------------&nl;55 "},{"id" : 62, "x" : 600, "y" : 2000, "width" : 200, "height" : 100, "title" : "FPS", "txt" : ""},{"id" : 63, "x" : 250, "y" : 2000, "width" : 200, "height" : 100, "title" : "Main.js", "txt" : "4  var FPS = 30;&nl;8  var SECONDS_BETWEEN_FRAMES = 1 / FPS;&nl;"},{"id" : 64, "x" : 600, "y" : 2170, "width" : 200, "height" : 100, "title" : "SECONDS_BETWEEN_FRAMES", "txt" : ""},{"id" : 65, "x" : 250, "y" : 2170, "width" : 200, "height" : 100, "title" : "GameObjectManager.js", "txt" : "116  setInterval(function()&obraces;g_GameObjectManager.draw();&cbraces;&cm; SECONDS_BETWEEN_FRAMES);&nl;"},{"id" : 66, "x" : 250, "y" : 2340, "width" : 200, "height" : 100, "title" : "Main.js", "txt" : "8  var SECONDS_BETWEEN_FRAMES = 1 / FPS;&nl;"},{"id" : 67, "x" : 600, "y" : 2510, "width" : 200, "height" : 100, "title" : "g_GameObjectManager", "txt" : ""},{"id" : 68, "x" : 250, "y" : 2510, "width" : 200, "height" : 100, "title" : "GameObject.js", "txt" : "35  g_GameObjectManager.addGameObject(this);&nl;44  g_GameObjectManager.removeGameObject(this);&nl;"},{"id" : 69, "x" : 250, "y" : 2680, "width" : 200, "height" : 100, "title" : "Player.js", "txt" : "195  g_GameObjectManager.xScroll = this.x - (context.canvas.width - this.frameWidth -  this.screenBorder);&nl;200  g_GameObjectManager.xScroll = this.x - this.screenBorder;&nl;"},{"id" : 70, "x" : 250, "y" : 2850, "width" : 200, "height" : 100, "title" : "ApplicationManager.js", "txt" : "31  g_GameObjectManager.shutdownAll();&nl;42  g_GameObjectManager.shutdownAll();&nl;43  g_GameObjectManager.xScroll = 0;&nl;44  g_GameObjectManager.yScroll = 0;&nl;"},{"id" : 71, "x" : 250, "y" : 3020, "width" : 200, "height" : 100, "title" : "GameObjectManager.js", "txt" : "78  g_GameObjectManager = this;&nl;81  document.onkeydown = function(event)&obraces;g_GameObjectManager.keyDown(event);&cbraces;&nl;82  document.onkeyup = function(event)&obraces;g_GameObjectManager.keyUp(event);&cbraces;&nl;116  setInterval(function()&obraces;g_GameObjectManager.draw();&cbraces;&cm; SECONDS_BETWEEN_FRAMES);&nl;"},{"id" : 72, "x" : 250, "y" : 3190, "width" : 200, "height" : 100, "title" : "Main.js", "txt" : "12  var g_GameObjectManager = null;&nl;"},{"id" : 73, "x" : 600, "y" : 3360, "width" : 200, "height" : 100, "title" : "g_ResourceManager", "txt" : ""},{"id" : 74, "x" : 250, "y" : 3360, "width" : 200, "height" : 100, "title" : "ResourceManager.js", "txt" : "25  g_ResourceManager = this;&nl;"},{"id" : 75, "x" : 250, "y" : 3530, "width" : 200, "height" : 100, "title" : "MainMenu.js", "txt" : "10  this.startupVisualGameObject(g_ResourceManager.mainmenu&cm; 0&cm; 0&cm; 1);&nl;"},{"id" : 76, "x" : 250, "y" : 3700, "width" : 200, "height" : 100, "title" : "Player.js", "txt" : "63  this.startupAnimatedGameObject(g_ResourceManager.idleLeft&cm; 300&cm; 400 - 48 - 48&cm; 4&cm; 6&cm; 20);&nl;109  this.setAnimation(g_ResourceManager.idleLeft&cm; 6&cm; 20);&nl;115  this.setAnimation(g_ResourceManager.idleRight&cm; 6&cm; 20);&nl;130  this.setAnimation(g_ResourceManager.idleLeft&cm; 6&cm; 20);&nl;132  this.setAnimation(g_ResourceManager.runRight&cm; 12&cm; 20);&nl;134  this.setAnimation(g_ResourceManager.runLeft&cm; 12&cm; 20);&nl;"},{"id" : 77, "x" : 250, "y" : 3870, "width" : 200, "height" : 100, "title" : "Level.js", "txt" : "55  new VisualGameObject().startupVisualGameObject(g_ResourceManager.block&cm; x * this.blockWidth&cm; canvasHeight - (y + 1) * this.blockHeight&cm; 4);&nl;72  new Powerup().startupPowerup(10&cm; g_ResourceManager.gem&cm; xPosition - g_ResourceManager.gem.width / 2&cm; yPosition - g_ResourceManager.gem.height&cm; 4&cm; 1&cm; 1);&nl;75  new LevelEndPost().startupLevelEndPost(g_ResourceManager.portal&cm; xPosition - g_ResourceManager.portal.width / 2 / 4&cm; yPosition - g_ResourceManager.portal.height&cm; 4);&nl;"},{"id" : 78, "x" : 250, "y" : 4040, "width" : 200, "height" : 100, "title" : "ApplicationManager.js", "txt" : "33  this.background3 = new RepeatingGameObject().startupRepeatingGameObject(g_ResourceManager.background2&cm; 0&cm; 100&cm; 3&cm; 600&cm; 320&cm; 0.75);&nl;34  this.background2 = new RepeatingGameObject().startupRepeatingGameObject(g_ResourceManager.background1&cm; 0&cm; 100&cm; 2&cm; 600&cm; 320&cm; 0.5);&nl;35  this.background = new RepeatingGameObject().startupRepeatingGameObject(g_ResourceManager.background0&cm; 0&cm; 0&cm; 1&cm; 600&cm; 320&cm; 0.25);&nl;"},{"id" : 79, "x" : 250, "y" : 4210, "width" : 200, "height" : 100, "title" : "GameObjectManager.js", "txt" : "134  for (i = 0; i < g_ResourceManager.imageProperties.length; ++i)&nl;136  if (g_ResourceManager[g_ResourceManager.imageProperties[i]].complete)&nl;141  if ( numLoaded == g_ResourceManager.imageProperties.length )&nl;"},{"id" : 80, "x" : 250, "y" : 4380, "width" : 200, "height" : 100, "title" : "Main.js", "txt" : "20  var g_ResourceManager = null;&nl;"},{"id" : 81, "x" : 600, "y" : 4550, "width" : 200, "height" : 100, "title" : "g_score", "txt" : ""},{"id" : 82, "x" : 250, "y" : 4550, "width" : 200, "height" : 100, "title" : "Powerup.js", "txt" : "72  g_score += this.value;&nl;"},{"id" : 83, "x" : 250, "y" : 4720, "width" : 200, "height" : 100, "title" : "ApplicationManager.js", "txt" : "45  g_score = 0;&nl;52  score.innerHTML = String(g_score);&nl;"},{"id" : 84, "x" : 250, "y" : 4890, "width" : 200, "height" : 100, "title" : "Main.js", "txt" : "24  var g_score = 0;&nl;"},{"id" : 85, "x" : 600, "y" : 5060, "width" : 200, "height" : 100, "title" : "g_player", "txt" : ""},{"id" : 86, "x" : 250, "y" : 5060, "width" : 200, "height" : 100, "title" : "LevelEndPost.js", "txt" : "34  if (this.collisionArea().intersects(g_player.collisionArea()))&nl;"},{"id" : 87, "x" : 250, "y" : 5230, "width" : 200, "height" : 100, "title" : "Powerup.js", "txt" : "69  if (this.collisionArea().intersects(g_player.collisionArea()))&nl;"},{"id" : 88, "x" : 250, "y" : 5400, "width" : 200, "height" : 100, "title" : "ApplicationManager.js", "txt" : "36  g_player = new Player().startupPlayer(this.level);&nl;"},{"id" : 89, "x" : 250, "y" : 5570, "width" : 200, "height" : 100, "title" : "Main.js", "txt" : "28  var g_player = null;&nl;"},{"id" : 90, "x" : 600, "y" : 5740, "width" : 200, "height" : 100, "title" : "g_ApplicationManager", "txt" : ""},{"id" : 91, "x" : 250, "y" : 5740, "width" : 200, "height" : 100, "title" : "MainMenu.js", "txt" : "20  g_ApplicationManager.startLevel();&nl;"},{"id" : 92, "x" : 250, "y" : 5910, "width" : 200, "height" : 100, "title" : "LevelEndPost.js", "txt" : "36  g_ApplicationManager.openMainMenu();&nl;"},{"id" : 93, "x" : 250, "y" : 6080, "width" : 200, "height" : 100, "title" : "Powerup.js", "txt" : "73  g_ApplicationManager.updateScore();&nl;"},{"id" : 94, "x" : 250, "y" : 6250, "width" : 200, "height" : 100, "title" : "ApplicationManager.js", "txt" : "20  g_ApplicationManager = this;&nl;"},{"id" : 95, "x" : 250, "y" : 6420, "width" : 200, "height" : 100, "title" : "Main.js", "txt" : "16  var g_ApplicationManager = null;&nl;"},{"id" : 96, "x" : 2000, "y" : 1050, "width" : 200, "height" : 100, "title" : "GameObject", "txt" : "Method&nl;---------------&nl;30 - 37 startupGameObject&nl;42 - 45 shutdownGameObject&nl;47 - 50 shutdown&nl;---------------&nl;"},{"id" : 97, "x" : 2000, "y" : 1250, "width" : 200, "height" : 100, "title" : "startupGameObject", "txt" : ""},{"id" : 98, "x" : 1750, "y" : 1250, "width" : 200, "height" : 100, "title" : "VisualGameObject.js", "txt" : "35  this.startupGameObject(x&cm; y&cm; z);&nl;"},{"id" : 99, "x" : 2500, "y" : 1250, "width" : 200, "height" : 100, "title" : "shutdownGameObject", "txt" : ""},{"id" : 100, "x" : 2250, "y" : 1250, "width" : 200, "height" : 100, "title" : "VisualGameObject.js", "txt" : "46  this.shutdownGameObject();&nl;"},{"id" : 101, "x" : 3000, "y" : 1250, "width" : 200, "height" : 100, "title" : "shutdown", "txt" : ""},{"id" : 102, "x" : 2750, "y" : 1250, "width" : 200, "height" : 100, "title" : "LevelEndPost.js", "txt" : "37  this.shutdown();&nl;"},{"id" : 103, "x" : 2750, "y" : 1450, "width" : 200, "height" : 100, "title" : "Powerup.js", "txt" : "71  this.shutdown();&nl;"},{"id" : 104, "x" : 2750, "y" : 1650, "width" : 200, "height" : 100, "title" : "GameObjectManager.js", "txt" : "202  this.gameObjects[x].shutdown();&nl;"},{"id" : 105, "x" : 2000, "y" : 1850, "width" : 200, "height" : 100, "title" : "VisualGameObject", "txt" : "Method&nl;---------------&nl;21 - 24 draw&nl;33 - 38 startupVisualGameObject&nl;43 - 47 shutdownVisualGameObject&nl;49 - 52 shutdown&nl;54 - 57 collisionArea&nl;---------------&nl;"},{"id" : 106, "x" : 2000, "y" : 2050, "width" : 200, "height" : 100, "title" : "draw", "txt" : ""},{"id" : 107, "x" : 1750, "y" : 2050, "width" : 200, "height" : 100, "title" : "GameObjectManager.js", "txt" : "116  setInterval(function()&obraces;g_GameObjectManager.draw();&cbraces;&cm; SECONDS_BETWEEN_FRAMES);&nl;187  this.gameObjects[x].draw(dt&cm; this.backBufferContext2D&cm; this.xScroll&cm; this.yScroll);&nl;"},{"id" : 108, "x" : 2500, "y" : 2050, "width" : 200, "height" : 100, "title" : "startupVisualGameObject", "txt" : ""},{"id" : 109, "x" : 2250, "y" : 2050, "width" : 200, "height" : 100, "title" : "RepeatingGameObject.js", "txt" : "28  this.startupVisualGameObject(image&cm; x&cm; y&cm; z);&nl;"},{"id" : 110, "x" : 2250, "y" : 2250, "width" : 200, "height" : 100, "title" : "AnimatedGameObject.js", "txt" : "47  this.startupVisualGameObject(image&cm; x&cm; y&cm; z);&nl;"},{"id" : 111, "x" : 2250, "y" : 2450, "width" : 200, "height" : 100, "title" : "MainMenu.js", "txt" : "10  this.startupVisualGameObject(g_ResourceManager.mainmenu&cm; 0&cm; 0&cm; 1);&nl;"},{"id" : 112, "x" : 2250, "y" : 2650, "width" : 200, "height" : 100, "title" : "Level.js", "txt" : "55  new VisualGameObject().startupVisualGameObject(g_ResourceManager.block&cm; x * this.blockWidth&cm; canvasHeight - (y + 1) * this.blockHeight&cm; 4);&nl;"},{"id" : 113, "x" : 3000, "y" : 2050, "width" : 200, "height" : 100, "title" : "shutdownVisualGameObject", "txt" : ""},{"id" : 114, "x" : 2750, "y" : 2050, "width" : 200, "height" : 100, "title" : "RepeatingGameObject.js", "txt" : "40  this.shutdownVisualGameObject();&nl;"},{"id" : 115, "x" : 2750, "y" : 2250, "width" : 200, "height" : 100, "title" : "AnimatedGameObject.js", "txt" : "59  this.shutdownVisualGameObject();&nl;"},{"id" : 116, "x" : 3500, "y" : 2050, "width" : 200, "height" : 100, "title" : "shutdown", "txt" : ""},{"id" : 117, "x" : 3250, "y" : 2050, "width" : 200, "height" : 100, "title" : "LevelEndPost.js", "txt" : "37  this.shutdown();&nl;"},{"id" : 118, "x" : 3250, "y" : 2250, "width" : 200, "height" : 100, "title" : "Powerup.js", "txt" : "71  this.shutdown();&nl;"},{"id" : 119, "x" : 3250, "y" : 2450, "width" : 200, "height" : 100, "title" : "GameObjectManager.js", "txt" : "202  this.gameObjects[x].shutdown();&nl;"},{"id" : 120, "x" : 4000, "y" : 2050, "width" : 200, "height" : 100, "title" : "collisionArea", "txt" : ""},{"id" : 121, "x" : 3750, "y" : 2050, "width" : 200, "height" : 100, "title" : "LevelEndPost.js", "txt" : "34  if (this.collisionArea().intersects(g_player.collisionArea()))&nl;"},{"id" : 122, "x" : 3750, "y" : 2250, "width" : 200, "height" : 100, "title" : "Powerup.js", "txt" : "69  if (this.collisionArea().intersects(g_player.collisionArea()))&nl;"},{"id" : 123, "x" : 2000, "y" : 2850, "width" : 200, "height" : 100, "title" : "RepeatingGameObject", "txt" : "Method&nl;---------------&nl;26 - 33 startupRepeatingGameObject&nl;38 - 41 shutdownstartupRepeatingGameObject&nl;50 - 70 draw&nl;72 - 86 drawRepeat&nl;---------------&nl;"},{"id" : 124, "x" : 2000, "y" : 3050, "width" : 200, "height" : 100, "title" : "startupRepeatingGameObject", "txt" : ""},{"id" : 125, "x" : 1750, "y" : 3050, "width" : 200, "height" : 100, "title" : "ApplicationManager.js", "txt" : "33  this.background3 = new RepeatingGameObject().startupRepeatingGameObject(g_ResourceManager.background2&cm; 0&cm; 100&cm; 3&cm; 600&cm; 320&cm; 0.75);&nl;34  this.background2 = new RepeatingGameObject().startupRepeatingGameObject(g_ResourceManager.background1&cm; 0&cm; 100&cm; 2&cm; 600&cm; 320&cm; 0.5);&nl;35  this.background = new RepeatingGameObject().startupRepeatingGameObject(g_ResourceManager.background0&cm; 0&cm; 0&cm; 1&cm; 600&cm; 320&cm; 0.25);&nl;"},{"id" : 126, "x" : 2500, "y" : 3050, "width" : 200, "height" : 100, "title" : "shutdownstartupRepeatingGameObject", "txt" : ""},{"id" : 127, "x" : 3000, "y" : 3050, "width" : 200, "height" : 100, "title" : "draw", "txt" : ""},{"id" : 128, "x" : 2750, "y" : 3050, "width" : 200, "height" : 100, "title" : "GameObjectManager.js", "txt" : "116  setInterval(function()&obraces;g_GameObjectManager.draw();&cbraces;&cm; SECONDS_BETWEEN_FRAMES);&nl;187  this.gameObjects[x].draw(dt&cm; this.backBufferContext2D&cm; this.xScroll&cm; this.yScroll);&nl;"},{"id" : 129, "x" : 3500, "y" : 3050, "width" : 200, "height" : 100, "title" : "drawRepeat", "txt" : ""},{"id" : 130, "x" : 2000, "y" : 3250, "width" : 200, "height" : 100, "title" : "AnimatedGameObject", "txt" : "Method&nl;---------------&nl;42 - 55 startupAnimatedGameObject&nl;57 - 60 shutdownAnimatedGameObject&nl;62 - 73 setAnimation&nl;82 - 94 draw&nl;96 - 99 collisionArea&nl;---------------&nl;"},{"id" : 131, "x" : 2000, "y" : 3450, "width" : 200, "height" : 100, "title" : "startupAnimatedGameObject", "txt" : ""},{"id" : 132, "x" : 1750, "y" : 3450, "width" : 200, "height" : 100, "title" : "Player.js", "txt" : "63  this.startupAnimatedGameObject(g_ResourceManager.idleLeft&cm; 300&cm; 400 - 48 - 48&cm; 4&cm; 6&cm; 20);&nl;"},{"id" : 133, "x" : 1750, "y" : 3650, "width" : 200, "height" : 100, "title" : "LevelEndPost.js", "txt" : "11  this.startupAnimatedGameObject(image&cm; x&cm; y&cm; z&cm; 4&cm; 10);&nl;"},{"id" : 134, "x" : 1750, "y" : 3850, "width" : 200, "height" : 100, "title" : "Powerup.js", "txt" : "41  this.startupAnimatedGameObject(image&cm; x&cm; y - this.bounceHeight&cm; z&cm; frameCount&cm; fps);&nl;"},{"id" : 135, "x" : 2500, "y" : 3450, "width" : 200, "height" : 100, "title" : "shutdownAnimatedGameObject", "txt" : ""},{"id" : 136, "x" : 2250, "y" : 3450, "width" : 200, "height" : 100, "title" : "LevelEndPost.js", "txt" : "22  this.shutdownAnimatedGameObject();&nl;"},{"id" : 137, "x" : 2250, "y" : 3650, "width" : 200, "height" : 100, "title" : "Powerup.js", "txt" : "48  this.shutdownAnimatedGameObject();&nl;"},{"id" : 138, "x" : 3000, "y" : 3450, "width" : 200, "height" : 100, "title" : "setAnimation", "txt" : ""},{"id" : 139, "x" : 2750, "y" : 3450, "width" : 200, "height" : 100, "title" : "Player.js", "txt" : "109  this.setAnimation(g_ResourceManager.idleLeft&cm; 6&cm; 20);&nl;115  this.setAnimation(g_ResourceManager.idleRight&cm; 6&cm; 20);&nl;130  this.setAnimation(g_ResourceManager.idleLeft&cm; 6&cm; 20);&nl;132  this.setAnimation(g_ResourceManager.runRight&cm; 12&cm; 20);&nl;134  this.setAnimation(g_ResourceManager.runLeft&cm; 12&cm; 20);&nl;"},{"id" : 140, "x" : 3500, "y" : 3450, "width" : 200, "height" : 100, "title" : "draw", "txt" : ""},{"id" : 141, "x" : 3250, "y" : 3450, "width" : 200, "height" : 100, "title" : "GameObjectManager.js", "txt" : "116  setInterval(function()&obraces;g_GameObjectManager.draw();&cbraces;&cm; SECONDS_BETWEEN_FRAMES);&nl;187  this.gameObjects[x].draw(dt&cm; this.backBufferContext2D&cm; this.xScroll&cm; this.yScroll);&nl;"},{"id" : 142, "x" : 4000, "y" : 3450, "width" : 200, "height" : 100, "title" : "collisionArea", "txt" : ""},{"id" : 143, "x" : 3750, "y" : 3450, "width" : 200, "height" : 100, "title" : "LevelEndPost.js", "txt" : "34  if (this.collisionArea().intersects(g_player.collisionArea()))&nl;"},{"id" : 144, "x" : 3750, "y" : 3650, "width" : 200, "height" : 100, "title" : "Powerup.js", "txt" : "69  if (this.collisionArea().intersects(g_player.collisionArea()))&nl;"},{"id" : 145, "x" : 2000, "y" : 4050, "width" : 200, "height" : 100, "title" : "MainMenu", "txt" : "Method&nl;---------------&nl;8 - 12 startupMainMenu&nl;18 - 21 keyDown&nl;---------------&nl;"},{"id" : 146, "x" : 2000, "y" : 4250, "width" : 200, "height" : 100, "title" : "startupMainMenu", "txt" : ""},{"id" : 147, "x" : 1750, "y" : 4250, "width" : 200, "height" : 100, "title" : "ApplicationManager.js", "txt" : "46  this.mainMenu = new MainMenu().startupMainMenu();&nl;"},{"id" : 148, "x" : 2500, "y" : 4250, "width" : 200, "height" : 100, "title" : "keyDown", "txt" : ""},{"id" : 149, "x" : 2250, "y" : 4250, "width" : 200, "height" : 100, "title" : "GameObjectManager.js", "txt" : "81  document.onkeydown = function(event)&obraces;g_GameObjectManager.keyDown(event);&cbraces;&nl;259  this.gameObjects[x].keyDown(event);&nl;"},{"id" : 150, "x" : 2000, "y" : 4450, "width" : 200, "height" : 100, "title" : "Player", "txt" : "Method&nl;---------------&nl;61 - 66 startupPlayer&nl;72 - 97 keyDown&nl;103 - 119 keyUp&nl;127 - 135 updateAnimation&nl;144 - 250 update&nl;---------------&nl;"},{"id" : 151, "x" : 2000, "y" : 4650, "width" : 200, "height" : 100, "title" : "startupPlayer", "txt" : ""},{"id" : 152, "x" : 1750, "y" : 4650, "width" : 200, "height" : 100, "title" : "ApplicationManager.js", "txt" : "36  g_player = new Player().startupPlayer(this.level);&nl;"},{"id" : 153, "x" : 2500, "y" : 4650, "width" : 200, "height" : 100, "title" : "keyDown", "txt" : ""},{"id" : 154, "x" : 2250, "y" : 4650, "width" : 200, "height" : 100, "title" : "GameObjectManager.js", "txt" : "81  document.onkeydown = function(event)&obraces;g_GameObjectManager.keyDown(event);&cbraces;&nl;259  this.gameObjects[x].keyDown(event);&nl;"},{"id" : 155, "x" : 3000, "y" : 4650, "width" : 200, "height" : 100, "title" : "keyUp", "txt" : ""},{"id" : 156, "x" : 2750, "y" : 4650, "width" : 200, "height" : 100, "title" : "GameObjectManager.js", "txt" : "82  document.onkeyup = function(event)&obraces;g_GameObjectManager.keyUp(event);&cbraces;&nl;270  this.gameObjects[x].keyUp(event);&nl;"},{"id" : 157, "x" : 3500, "y" : 4650, "width" : 200, "height" : 100, "title" : "updateAnimation", "txt" : ""},{"id" : 158, "x" : 4000, "y" : 4650, "width" : 200, "height" : 100, "title" : "update", "txt" : ""},{"id" : 159, "x" : 3750, "y" : 4650, "width" : 200, "height" : 100, "title" : "prototype-1.6.0.3.js", "txt" : "1054  return this.clone().update(object);&nl;1468  else receiver.update(responseText);&nl;1609  if (Object.isElement(content)) return element.update().insert(content);&nl;2447  if (Object.isElement(content)) return element.update().insert(content);&nl;"},{"id" : 160, "x" : 3750, "y" : 4850, "width" : 200, "height" : 100, "title" : "GameObjectManager.js", "txt" : "178  this.gameObjects[x].update(dt&cm; this.backBufferContext2D&cm; this.xScroll&cm; this.yScroll);&nl;"},{"id" : 161, "x" : 2000, "y" : 5050, "width" : 200, "height" : 100, "title" : "LevelEndPost", "txt" : "Method&nl;---------------&nl;9 - 13 startupLevelEndPost&nl;15 - 18 shutdown&nl;20 - 23 shutdownLevelEndPost&nl;32 - 39 update&nl;---------------&nl;"},{"id" : 162, "x" : 2000, "y" : 5250, "width" : 200, "height" : 100, "title" : "startupLevelEndPost", "txt" : ""},{"id" : 163, "x" : 1750, "y" : 5250, "width" : 200, "height" : 100, "title" : "Level.js", "txt" : "75  new LevelEndPost().startupLevelEndPost(g_ResourceManager.portal&cm; xPosition - g_ResourceManager.portal.width / 2 / 4&cm; yPosition - g_ResourceManager.portal.height&cm; 4);&nl;"},{"id" : 164, "x" : 2500, "y" : 5250, "width" : 200, "height" : 100, "title" : "shutdown", "txt" : ""},{"id" : 165, "x" : 2250, "y" : 5250, "width" : 200, "height" : 100, "title" : "Powerup.js", "txt" : "71  this.shutdown();&nl;"},{"id" : 166, "x" : 2250, "y" : 5450, "width" : 200, "height" : 100, "title" : "GameObjectManager.js", "txt" : "202  this.gameObjects[x].shutdown();&nl;"},{"id" : 167, "x" : 3000, "y" : 5250, "width" : 200, "height" : 100, "title" : "shutdownLevelEndPost", "txt" : ""},{"id" : 168, "x" : 3500, "y" : 5250, "width" : 200, "height" : 100, "title" : "update", "txt" : ""},{"id" : 169, "x" : 3250, "y" : 5250, "width" : 200, "height" : 100, "title" : "prototype-1.6.0.3.js", "txt" : "1054  return this.clone().update(object);&nl;1468  else receiver.update(responseText);&nl;1609  if (Object.isElement(content)) return element.update().insert(content);&nl;2447  if (Object.isElement(content)) return element.update().insert(content);&nl;"},{"id" : 170, "x" : 3250, "y" : 5450, "width" : 200, "height" : 100, "title" : "GameObjectManager.js", "txt" : "178  this.gameObjects[x].update(dt&cm; this.backBufferContext2D&cm; this.xScroll&cm; this.yScroll);&nl;"},{"id" : 171, "x" : 2000, "y" : 5650, "width" : 200, "height" : 100, "title" : "Powerup", "txt" : "Method&nl;---------------&nl;39 - 44 startupPowerup&nl;46 - 49 shutdownPowerup&nl;51 - 54 shutdown&nl;63 - 75 update&nl;---------------&nl;"},{"id" : 172, "x" : 2000, "y" : 5850, "width" : 200, "height" : 100, "title" : "startupPowerup", "txt" : ""},{"id" : 173, "x" : 1750, "y" : 5850, "width" : 200, "height" : 100, "title" : "Level.js", "txt" : "72  new Powerup().startupPowerup(10&cm; g_ResourceManager.gem&cm; xPosition - g_ResourceManager.gem.width / 2&cm; yPosition - g_ResourceManager.gem.height&cm; 4&cm; 1&cm; 1);&nl;"},{"id" : 174, "x" : 2500, "y" : 5850, "width" : 200, "height" : 100, "title" : "shutdownPowerup", "txt" : ""},{"id" : 175, "x" : 3000, "y" : 5850, "width" : 200, "height" : 100, "title" : "shutdown", "txt" : ""},{"id" : 176, "x" : 2750, "y" : 5850, "width" : 200, "height" : 100, "title" : "LevelEndPost.js", "txt" : "37  this.shutdown();&nl;"},{"id" : 177, "x" : 2750, "y" : 6050, "width" : 200, "height" : 100, "title" : "GameObjectManager.js", "txt" : "202  this.gameObjects[x].shutdown();&nl;"},{"id" : 178, "x" : 3500, "y" : 5850, "width" : 200, "height" : 100, "title" : "update", "txt" : ""},{"id" : 179, "x" : 3250, "y" : 5850, "width" : 200, "height" : 100, "title" : "prototype-1.6.0.3.js", "txt" : "1054  return this.clone().update(object);&nl;1468  else receiver.update(responseText);&nl;1609  if (Object.isElement(content)) return element.update().insert(content);&nl;2447  if (Object.isElement(content)) return element.update().insert(content);&nl;"},{"id" : 180, "x" : 3250, "y" : 6050, "width" : 200, "height" : 100, "title" : "GameObjectManager.js", "txt" : "178  this.gameObjects[x].update(dt&cm; this.backBufferContext2D&cm; this.xScroll&cm; this.yScroll);&nl;"},{"id" : 181, "x" : 2000, "y" : 6250, "width" : 200, "height" : 100, "title" : "Level", "txt" : "Method&nl;---------------&nl;16 - 44 startupLevel&nl;49 - 58 addBlocks&nl;60 - 80 addPowerups&nl;86 - 89 currentBlock&nl;95 - 100 groundHeight&nl;---------------&nl;"},{"id" : 182, "x" : 2000, "y" : 6450, "width" : 200, "height" : 100, "title" : "startupLevel", "txt" : ""},{"id" : 183, "x" : 1750, "y" : 6450, "width" : 200, "height" : 100, "title" : "ApplicationManager.js", "txt" : "32  this.level = new Level().startupLevel(this.canvasWidth&cm; this.canvasHeight);&nl;"},{"id" : 184, "x" : 2500, "y" : 6450, "width" : 200, "height" : 100, "title" : "addBlocks", "txt" : ""},{"id" : 185, "x" : 3000, "y" : 6450, "width" : 200, "height" : 100, "title" : "addPowerups", "txt" : ""},{"id" : 186, "x" : 3500, "y" : 6450, "width" : 200, "height" : 100, "title" : "currentBlock", "txt" : ""},{"id" : 187, "x" : 3250, "y" : 6450, "width" : 200, "height" : 100, "title" : "Player.js", "txt" : "166  var currentBlock = this.level.currentBlock(xPos);&nl;224  var currentBlock1 = this.level.currentBlock(this.x);&nl;226  var currentBlock2 = this.level.currentBlock(this.x + this.frameWidth);&nl;"},{"id" : 188, "x" : 4000, "y" : 6450, "width" : 200, "height" : 100, "title" : "groundHeight", "txt" : ""},{"id" : 189, "x" : 3750, "y" : 6450, "width" : 200, "height" : 100, "title" : "Player.js", "txt" : "168  var groundHeight = this.level.groundHeight(currentBlock);&nl;228  var groundHeight1 = this.level.groundHeight(currentBlock1);&nl;230  var groundHeight2 = this.level.groundHeight(currentBlock2);&nl;"},{"id" : 190, "x" : 2000, "y" : 6650, "width" : 200, "height" : 100, "title" : "Array", "txt" : "Method&nl;---------------&nl;6 - 11 remove&nl;17 - 27 removeObject&nl;---------------&nl;"},{"id" : 191, "x" : 2000, "y" : 6850, "width" : 200, "height" : 100, "title" : "remove", "txt" : ""},{"id" : 192, "x" : 2500, "y" : 6850, "width" : 200, "height" : 100, "title" : "removeObject", "txt" : ""},{"id" : 193, "x" : 2250, "y" : 6850, "width" : 200, "height" : 100, "title" : "GameObjectManager.js", "txt" : "247  this.gameObjects.removeObject(this.removedGameObjects[x]);&nl;"},{"id" : 194, "x" : 2000, "y" : 7050, "width" : 200, "height" : 100, "title" : "ApplicationManager", "txt" : "Method&nl;---------------&nl;18 - 27 startupApplicationManager&nl;29 - 38 startLevel&nl;40 - 47 openMainMenu&nl;49 - 53 updateScore&nl;---------------&nl;"},{"id" : 195, "x" : 2000, "y" : 7250, "width" : 200, "height" : 100, "title" : "startupApplicationManager", "txt" : ""},{"id" : 196, "x" : 1750, "y" : 7250, "width" : 200, "height" : 100, "title" : "GameObjectManager.js", "txt" : "144  new ApplicationManager().startupApplicationManager(this.canvas.width&cm; this.canvas.height);&nl;"},{"id" : 197, "x" : 2500, "y" : 7250, "width" : 200, "height" : 100, "title" : "startLevel", "txt" : ""},{"id" : 198, "x" : 2250, "y" : 7250, "width" : 200, "height" : 100, "title" : "MainMenu.js", "txt" : "20  g_ApplicationManager.startLevel();&nl;"},{"id" : 199, "x" : 3000, "y" : 7250, "width" : 200, "height" : 100, "title" : "openMainMenu", "txt" : ""},{"id" : 200, "x" : 2750, "y" : 7250, "width" : 200, "height" : 100, "title" : "LevelEndPost.js", "txt" : "36  g_ApplicationManager.openMainMenu();&nl;"},{"id" : 201, "x" : 3500, "y" : 7250, "width" : 200, "height" : 100, "title" : "updateScore", "txt" : ""},{"id" : 202, "x" : 3250, "y" : 7250, "width" : 200, "height" : 100, "title" : "Powerup.js", "txt" : "73  g_ApplicationManager.updateScore();&nl;"},{"id" : 203, "x" : 2000, "y" : 7450, "width" : 200, "height" : 100, "title" : "GameObjectManager", "txt" : "Method&nl;---------------&nl;75 - 119 startupGameObjectManager&nl;124 - 194 draw&nl;196 - 207 shutdownAll&nl;213 - 216 addGameObject&nl;218 - 230 addNewGameObjects&nl;236 - 239 removeGameObject&nl;241 - 251 removeOldGameObjects&nl;253 - 262 keyDown&nl;264 - 273 keyUp&nl;---------------&nl;"},{"id" : 204, "x" : 2000, "y" : 7650, "width" : 200, "height" : 100, "title" : "startupGameObjectManager", "txt" : ""},{"id" : 205, "x" : 1750, "y" : 7650, "width" : 200, "height" : 100, "title" : "Main.js", "txt" : "41  new GameObjectManager().startupGameObjectManager();&nl;"},{"id" : 206, "x" : 2500, "y" : 7650, "width" : 200, "height" : 100, "title" : "draw", "txt" : ""},{"id" : 207, "x" : 3000, "y" : 7650, "width" : 200, "height" : 100, "title" : "shutdownAll", "txt" : ""},{"id" : 208, "x" : 2750, "y" : 7650, "width" : 200, "height" : 100, "title" : "ApplicationManager.js", "txt" : "31  g_GameObjectManager.shutdownAll();&nl;42  g_GameObjectManager.shutdownAll();&nl;"},{"id" : 209, "x" : 3500, "y" : 7650, "width" : 200, "height" : 100, "title" : "addGameObject", "txt" : ""},{"id" : 210, "x" : 3250, "y" : 7650, "width" : 200, "height" : 100, "title" : "GameObject.js", "txt" : "35  g_GameObjectManager.addGameObject(this);&nl;"},{"id" : 211, "x" : 4000, "y" : 7650, "width" : 200, "height" : 100, "title" : "addNewGameObjects", "txt" : ""},{"id" : 212, "x" : 4500, "y" : 7650, "width" : 200, "height" : 100, "title" : "removeGameObject", "txt" : ""},{"id" : 213, "x" : 4250, "y" : 7650, "width" : 200, "height" : 100, "title" : "GameObject.js", "txt" : "44  g_GameObjectManager.removeGameObject(this);&nl;"},{"id" : 214, "x" : 5000, "y" : 7650, "width" : 200, "height" : 100, "title" : "removeOldGameObjects", "txt" : ""},{"id" : 215, "x" : 5500, "y" : 7650, "width" : 200, "height" : 100, "title" : "keyDown", "txt" : ""},{"id" : 216, "x" : 6000, "y" : 7650, "width" : 200, "height" : 100, "title" : "keyUp", "txt" : ""},{"id" : 217, "x" : 2000, "y" : 7850, "width" : 200, "height" : 100, "title" : "init", "txt" : "Method&nl;---------------&nl;---------------&nl;"},{"id" : 218, "x" : 4600, "y" : 3110, "width" : 200, "height" : 100, "title" : "Object", "txt" : ""},{"id" : 219, "x" : 4300, "y" : 3110, "width" : 200, "height" : 100, "title" : "Level", "txt" : "Composition Information&nl;---------------------&nl;9 powerups"},{"id" : 220, "x" : 4600, "y" : 3290, "width" : 200, "height" : 100, "title" : "LevelEndPost", "txt" : ""},{"id" : 221, "x" : 4300, "y" : 3290, "width" : 200, "height" : 100, "title" : "Level", "txt" : "Composition Information&nl;---------------------&nl;75 "},{"id" : 222, "x" : 4600, "y" : 3470, "width" : 200, "height" : 100, "title" : "Level", "txt" : ""},{"id" : 223, "x" : 4300, "y" : 3470, "width" : 200, "height" : 100, "title" : "ApplicationManager", "txt" : "Composition Information&nl;---------------------&nl;32 level"},{"id" : 224, "x" : 4600, "y" : 3650, "width" : 200, "height" : 100, "title" : "RepeatingGameObject", "txt" : ""},{"id" : 225, "x" : 4300, "y" : 3650, "width" : 200, "height" : 100, "title" : "ApplicationManager", "txt" : "Composition Information&nl;---------------------&nl;33 background3"},{"id" : 226, "x" : 4300, "y" : 3830, "width" : 200, "height" : 100, "title" : "ApplicationManager", "txt" : "Composition Information&nl;---------------------&nl;34 background2"},{"id" : 227, "x" : 4300, "y" : 4010, "width" : 200, "height" : 100, "title" : "ApplicationManager", "txt" : "Composition Information&nl;---------------------&nl;35 background"}], "connections" : [{"nodeA" : 18, "nodeB" : 17, "conA" : "top", "conB" : "bottom"},{"nodeA" : 19, "nodeB" : 18, "conA" : "top", "conB" : "bottom"},{"nodeA" : 20, "nodeB" : 19, "conA" : "top", "conB" : "bottom"},{"nodeA" : 21, "nodeB" : 19, "conA" : "top", "conB" : "bottom"},{"nodeA" : 22, "nodeB" : 19, "conA" : "top", "conB" : "bottom"},{"nodeA" : 23, "nodeB" : 18, "conA" : "top", "conB" : "bottom"},{"nodeA" : 25, "nodeB" : 24, "conA" : "top", "conB" : "bottom"},{"nodeA" : 25, "nodeB" : 26, "conA" : "left", "conB" : "right"},{"nodeA" : 28, "nodeB" : 27, "conA" : "top", "conB" : "bottom"},{"nodeA" : 28, "nodeB" : 29, "conA" : "left", "conB" : "right"},{"nodeA" : 28, "nodeB" : 30, "conA" : "left", "conB" : "right"},{"nodeA" : 31, "nodeB" : 27, "conA" : "top", "conB" : "bottom"},{"nodeA" : 31, "nodeB" : 32, "conA" : "left", "conB" : "right"},{"nodeA" : 31, "nodeB" : 33, "conA" : "left", "conB" : "right"},{"nodeA" : 35, "nodeB" : 34, "conA" : "right", "conB" : "left"},{"nodeA" : 36, "nodeB" : 34, "conA" : "right", "conB" : "left"},{"nodeA" : 37, "nodeB" : 34, "conA" : "right", "conB" : "left"},{"nodeA" : 38, "nodeB" : 34, "conA" : "right", "conB" : "left"},{"nodeA" : 39, "nodeB" : 34, "conA" : "right", "conB" : "left"},{"nodeA" : 41, "nodeB" : 40, "conA" : "right", "conB" : "left"},{"nodeA" : 43, "nodeB" : 42, "conA" : "right", "conB" : "left"},{"nodeA" : 44, "nodeB" : 42, "conA" : "right", "conB" : "left"},{"nodeA" : 46, "nodeB" : 45, "conA" : "right", "conB" : "left"},{"nodeA" : 48, "nodeB" : 47, "conA" : "right", "conB" : "left"},{"nodeA" : 50, "nodeB" : 49, "conA" : "right", "conB" : "left"},{"nodeA" : 52, "nodeB" : 51, "conA" : "right", "conB" : "left"},{"nodeA" : 53, "nodeB" : 51, "conA" : "right", "conB" : "left"},{"nodeA" : 55, "nodeB" : 54, "conA" : "right", "conB" : "left"},{"nodeA" : 57, "nodeB" : 56, "conA" : "right", "conB" : "left"},{"nodeA" : 59, "nodeB" : 58, "conA" : "right", "conB" : "left"},{"nodeA" : 61, "nodeB" : 60, "conA" : "right", "conB" : "left"},{"nodeA" : 62, "nodeB" : 63, "conA" : "left", "conB" : "right"},{"nodeA" : 64, "nodeB" : 65, "conA" : "left", "conB" : "right"},{"nodeA" : 64, "nodeB" : 66, "conA" : "left", "conB" : "right"},{"nodeA" : 67, "nodeB" : 68, "conA" : "left", "conB" : "right"},{"nodeA" : 67, "nodeB" : 69, "conA" : "left", "conB" : "right"},{"nodeA" : 67, "nodeB" : 70, "conA" : "left", "conB" : "right"},{"nodeA" : 67, "nodeB" : 71, "conA" : "left", "conB" : "right"},{"nodeA" : 67, "nodeB" : 72, "conA" : "left", "conB" : "right"},{"nodeA" : 73, "nodeB" : 74, "conA" : "left", "conB" : "right"},{"nodeA" : 73, "nodeB" : 75, "conA" : "left", "conB" : "right"},{"nodeA" : 73, "nodeB" : 76, "conA" : "left", "conB" : "right"},{"nodeA" : 73, "nodeB" : 77, "conA" : "left", "conB" : "right"},{"nodeA" : 73, "nodeB" : 78, "conA" : "left", "conB" : "right"},{"nodeA" : 73, "nodeB" : 79, "conA" : "left", "conB" : "right"},{"nodeA" : 73, "nodeB" : 80, "conA" : "left", "conB" : "right"},{"nodeA" : 81, "nodeB" : 82, "conA" : "left", "conB" : "right"},{"nodeA" : 81, "nodeB" : 83, "conA" : "left", "conB" : "right"},{"nodeA" : 81, "nodeB" : 84, "conA" : "left", "conB" : "right"},{"nodeA" : 85, "nodeB" : 86, "conA" : "left", "conB" : "right"},{"nodeA" : 85, "nodeB" : 87, "conA" : "left", "conB" : "right"},{"nodeA" : 85, "nodeB" : 88, "conA" : "left", "conB" : "right"},{"nodeA" : 85, "nodeB" : 89, "conA" : "left", "conB" : "right"},{"nodeA" : 90, "nodeB" : 91, "conA" : "left", "conB" : "right"},{"nodeA" : 90, "nodeB" : 92, "conA" : "left", "conB" : "right"},{"nodeA" : 90, "nodeB" : 93, "conA" : "left", "conB" : "right"},{"nodeA" : 90, "nodeB" : 94, "conA" : "left", "conB" : "right"},{"nodeA" : 90, "nodeB" : 95, "conA" : "left", "conB" : "right"},{"nodeA" : 97, "nodeB" : 96, "conA" : "top", "conB" : "bottom"},{"nodeA" : 97, "nodeB" : 98, "conA" : "left", "conB" : "right"},{"nodeA" : 99, "nodeB" : 96, "conA" : "top", "conB" : "bottom"},{"nodeA" : 99, "nodeB" : 100, "conA" : "left", "conB" : "right"},{"nodeA" : 101, "nodeB" : 96, "conA" : "top", "conB" : "bottom"},{"nodeA" : 101, "nodeB" : 102, "conA" : "left", "conB" : "right"},{"nodeA" : 101, "nodeB" : 103, "conA" : "left", "conB" : "right"},{"nodeA" : 101, "nodeB" : 104, "conA" : "left", "conB" : "right"},{"nodeA" : 106, "nodeB" : 105, "conA" : "top", "conB" : "bottom"},{"nodeA" : 106, "nodeB" : 107, "conA" : "left", "conB" : "right"},{"nodeA" : 108, "nodeB" : 105, "conA" : "top", "conB" : "bottom"},{"nodeA" : 108, "nodeB" : 109, "conA" : "left", "conB" : "right"},{"nodeA" : 108, "nodeB" : 110, "conA" : "left", "conB" : "right"},{"nodeA" : 108, "nodeB" : 111, "conA" : "left", "conB" : "right"},{"nodeA" : 108, "nodeB" : 112, "conA" : "left", "conB" : "right"},{"nodeA" : 113, "nodeB" : 105, "conA" : "top", "conB" : "bottom"},{"nodeA" : 113, "nodeB" : 114, "conA" : "left", "conB" : "right"},{"nodeA" : 113, "nodeB" : 115, "conA" : "left", "conB" : "right"},{"nodeA" : 116, "nodeB" : 105, "conA" : "top", "conB" : "bottom"},{"nodeA" : 116, "nodeB" : 117, "conA" : "left", "conB" : "right"},{"nodeA" : 116, "nodeB" : 118, "conA" : "left", "conB" : "right"},{"nodeA" : 116, "nodeB" : 119, "conA" : "left", "conB" : "right"},{"nodeA" : 120, "nodeB" : 105, "conA" : "top", "conB" : "bottom"},{"nodeA" : 120, "nodeB" : 121, "conA" : "left", "conB" : "right"},{"nodeA" : 120, "nodeB" : 122, "conA" : "left", "conB" : "right"},{"nodeA" : 124, "nodeB" : 123, "conA" : "top", "conB" : "bottom"},{"nodeA" : 124, "nodeB" : 125, "conA" : "left", "conB" : "right"},{"nodeA" : 126, "nodeB" : 123, "conA" : "top", "conB" : "bottom"},{"nodeA" : 127, "nodeB" : 123, "conA" : "top", "conB" : "bottom"},{"nodeA" : 127, "nodeB" : 128, "conA" : "left", "conB" : "right"},{"nodeA" : 129, "nodeB" : 123, "conA" : "top", "conB" : "bottom"},{"nodeA" : 131, "nodeB" : 130, "conA" : "top", "conB" : "bottom"},{"nodeA" : 131, "nodeB" : 132, "conA" : "left", "conB" : "right"},{"nodeA" : 131, "nodeB" : 133, "conA" : "left", "conB" : "right"},{"nodeA" : 131, "nodeB" : 134, "conA" : "left", "conB" : "right"},{"nodeA" : 135, "nodeB" : 130, "conA" : "top", "conB" : "bottom"},{"nodeA" : 135, "nodeB" : 136, "conA" : "left", "conB" : "right"},{"nodeA" : 135, "nodeB" : 137, "conA" : "left", "conB" : "right"},{"nodeA" : 138, "nodeB" : 130, "conA" : "top", "conB" : "bottom"},{"nodeA" : 138, "nodeB" : 139, "conA" : "left", "conB" : "right"},{"nodeA" : 140, "nodeB" : 130, "conA" : "top", "conB" : "bottom"},{"nodeA" : 140, "nodeB" : 141, "conA" : "left", "conB" : "right"},{"nodeA" : 142, "nodeB" : 130, "conA" : "top", "conB" : "bottom"},{"nodeA" : 142, "nodeB" : 143, "conA" : "left", "conB" : "right"},{"nodeA" : 142, "nodeB" : 144, "conA" : "left", "conB" : "right"},{"nodeA" : 146, "nodeB" : 145, "conA" : "top", "conB" : "bottom"},{"nodeA" : 146, "nodeB" : 147, "conA" : "left", "conB" : "right"},{"nodeA" : 148, "nodeB" : 145, "conA" : "top", "conB" : "bottom"},{"nodeA" : 148, "nodeB" : 149, "conA" : "left", "conB" : "right"},{"nodeA" : 151, "nodeB" : 150, "conA" : "top", "conB" : "bottom"},{"nodeA" : 151, "nodeB" : 152, "conA" : "left", "conB" : "right"},{"nodeA" : 153, "nodeB" : 150, "conA" : "top", "conB" : "bottom"},{"nodeA" : 153, "nodeB" : 154, "conA" : "left", "conB" : "right"},{"nodeA" : 155, "nodeB" : 150, "conA" : "top", "conB" : "bottom"},{"nodeA" : 155, "nodeB" : 156, "conA" : "left", "conB" : "right"},{"nodeA" : 157, "nodeB" : 150, "conA" : "top", "conB" : "bottom"},{"nodeA" : 158, "nodeB" : 150, "conA" : "top", "conB" : "bottom"},{"nodeA" : 158, "nodeB" : 159, "conA" : "left", "conB" : "right"},{"nodeA" : 158, "nodeB" : 160, "conA" : "left", "conB" : "right"},{"nodeA" : 162, "nodeB" : 161, "conA" : "top", "conB" : "bottom"},{"nodeA" : 162, "nodeB" : 163, "conA" : "left", "conB" : "right"},{"nodeA" : 164, "nodeB" : 161, "conA" : "top", "conB" : "bottom"},{"nodeA" : 164, "nodeB" : 165, "conA" : "left", "conB" : "right"},{"nodeA" : 164, "nodeB" : 166, "conA" : "left", "conB" : "right"},{"nodeA" : 167, "nodeB" : 161, "conA" : "top", "conB" : "bottom"},{"nodeA" : 168, "nodeB" : 161, "conA" : "top", "conB" : "bottom"},{"nodeA" : 168, "nodeB" : 169, "conA" : "left", "conB" : "right"},{"nodeA" : 168, "nodeB" : 170, "conA" : "left", "conB" : "right"},{"nodeA" : 172, "nodeB" : 171, "conA" : "top", "conB" : "bottom"},{"nodeA" : 172, "nodeB" : 173, "conA" : "left", "conB" : "right"},{"nodeA" : 174, "nodeB" : 171, "conA" : "top", "conB" : "bottom"},{"nodeA" : 175, "nodeB" : 171, "conA" : "top", "conB" : "bottom"},{"nodeA" : 175, "nodeB" : 176, "conA" : "left", "conB" : "right"},{"nodeA" : 175, "nodeB" : 177, "conA" : "left", "conB" : "right"},{"nodeA" : 178, "nodeB" : 171, "conA" : "top", "conB" : "bottom"},{"nodeA" : 178, "nodeB" : 179, "conA" : "left", "conB" : "right"},{"nodeA" : 178, "nodeB" : 180, "conA" : "left", "conB" : "right"},{"nodeA" : 182, "nodeB" : 181, "conA" : "top", "conB" : "bottom"},{"nodeA" : 182, "nodeB" : 183, "conA" : "left", "conB" : "right"},{"nodeA" : 184, "nodeB" : 181, "conA" : "top", "conB" : "bottom"},{"nodeA" : 185, "nodeB" : 181, "conA" : "top", "conB" : "bottom"},{"nodeA" : 186, "nodeB" : 181, "conA" : "top", "conB" : "bottom"},{"nodeA" : 186, "nodeB" : 187, "conA" : "left", "conB" : "right"},{"nodeA" : 188, "nodeB" : 181, "conA" : "top", "conB" : "bottom"},{"nodeA" : 188, "nodeB" : 189, "conA" : "left", "conB" : "right"},{"nodeA" : 191, "nodeB" : 190, "conA" : "top", "conB" : "bottom"},{"nodeA" : 192, "nodeB" : 190, "conA" : "top", "conB" : "bottom"},{"nodeA" : 192, "nodeB" : 193, "conA" : "left", "conB" : "right"},{"nodeA" : 195, "nodeB" : 194, "conA" : "top", "conB" : "bottom"},{"nodeA" : 195, "nodeB" : 196, "conA" : "left", "conB" : "right"},{"nodeA" : 197, "nodeB" : 194, "conA" : "top", "conB" : "bottom"},{"nodeA" : 197, "nodeB" : 198, "conA" : "left", "conB" : "right"},{"nodeA" : 199, "nodeB" : 194, "conA" : "top", "conB" : "bottom"},{"nodeA" : 199, "nodeB" : 200, "conA" : "left", "conB" : "right"},{"nodeA" : 201, "nodeB" : 194, "conA" : "top", "conB" : "bottom"},{"nodeA" : 201, "nodeB" : 202, "conA" : "left", "conB" : "right"},{"nodeA" : 204, "nodeB" : 203, "conA" : "top", "conB" : "bottom"},{"nodeA" : 204, "nodeB" : 205, "conA" : "left", "conB" : "right"},{"nodeA" : 206, "nodeB" : 203, "conA" : "top", "conB" : "bottom"},{"nodeA" : 207, "nodeB" : 203, "conA" : "top", "conB" : "bottom"},{"nodeA" : 207, "nodeB" : 208, "conA" : "left", "conB" : "right"},{"nodeA" : 209, "nodeB" : 203, "conA" : "top", "conB" : "bottom"},{"nodeA" : 209, "nodeB" : 210, "conA" : "left", "conB" : "right"},{"nodeA" : 211, "nodeB" : 203, "conA" : "top", "conB" : "bottom"},{"nodeA" : 212, "nodeB" : 203, "conA" : "top", "conB" : "bottom"},{"nodeA" : 212, "nodeB" : 213, "conA" : "left", "conB" : "right"},{"nodeA" : 214, "nodeB" : 203, "conA" : "top", "conB" : "bottom"},{"nodeA" : 215, "nodeB" : 203, "conA" : "top", "conB" : "bottom"},{"nodeA" : 216, "nodeB" : 203, "conA" : "top", "conB" : "bottom"},{"nodeA" : 219, "nodeB" : 218, "conA" : "right", "conB" : "left"},{"nodeA" : 221, "nodeB" : 220, "conA" : "right", "conB" : "left"},{"nodeA" : 223, "nodeB" : 222, "conA" : "right", "conB" : "left"},{"nodeA" : 225, "nodeB" : 224, "conA" : "right", "conB" : "left"},{"nodeA" : 226, "nodeB" : 224, "conA" : "right", "conB" : "left"},{"nodeA" : 227, "nodeB" : 224, "conA" : "right", "conB" : "left"}],"Resource" : [{ "name" : "jsplatformer12.html", "project" :"JavaScript Platformer 12", "id": 0, "type" : "html" },{ "name" : "prototype-1.6.0.3.js", "project" :"JavaScript Platformer 12", "id" : 1, "type" : "javascript" },{ "name" : "ResourceManager.js", "project" :"JavaScript Platformer 12", "id" : 2, "type" : "javascript" },{ "name" : "Rectangle.js", "project" :"JavaScript Platformer 12", "id" : 3, "type" : "javascript" },{ "name" : "GameObject.js", "project" :"JavaScript Platformer 12", "id" : 4, "type" : "javascript" },{ "name" : "VisualGameObject.js", "project" :"JavaScript Platformer 12", "id" : 5, "type" : "javascript" },{ "name" : "RepeatingGameObject.js", "project" :"JavaScript Platformer 12", "id" : 6, "type" : "javascript" },{ "name" : "AnimatedGameObject.js", "project" :"JavaScript Platformer 12", "id" : 7, "type" : "javascript" },{ "name" : "MainMenu.js", "project" :"JavaScript Platformer 12", "id" : 8, "type" : "javascript" },{ "name" : "Player.js", "project" :"JavaScript Platformer 12", "id" : 9, "type" : "javascript" },{ "name" : "LevelEndPost.js", "project" :"JavaScript Platformer 12", "id" : 10, "type" : "javascript" },{ "name" : "Powerup.js", "project" :"JavaScript Platformer 12", "id" : 11, "type" : "javascript" },{ "name" : "Level.js", "project" :"JavaScript Platformer 12", "id" : 12, "type" : "javascript" },{ "name" : "Utils.js", "project" :"JavaScript Platformer 12", "id" : 13, "type" : "javascript" },{ "name" : "ApplicationManager.js", "project" :"JavaScript Platformer 12", "id" : 14, "type" : "javascript" },{ "name" : "GameObjectManager.js", "project" :"JavaScript Platformer 12", "id" : 15, "type" : "javascript" },{ "name" : "Main.js", "project" :"JavaScript Platformer 12", "id" : 16, "type" : "javascript" }], "class_info" : [{ "name" : "ResourceManager",  "id" : 24},{ "name" : "Rectangle",  "id" : 27},{ "name" : "GameObject",  "id" : 96},{ "name" : "VisualGameObject",  "id" : 105},{ "name" : "RepeatingGameObject",  "id" : 123},{ "name" : "AnimatedGameObject",  "id" : 130},{ "name" : "MainMenu",  "id" : 145},{ "name" : "Player",  "id" : 150},{ "name" : "LevelEndPost",  "id" : 161},{ "name" : "Powerup",  "id" : 171},{ "name" : "Level",  "id" : 181},{ "name" : "Array",  "id" : 190},{ "name" : "ApplicationManager",  "id" : 194},{ "name" : "GameObjectManager",  "id" : 203},{ "name" : "init",  "id" : 217}], "class_composition" : [{ "name" : "Array" ,  "id" : 34},{ "name" : "Image" ,  "id" : 40},{ "name" : "Rectangle" ,  "id" : 42},{ "name" : "Object" ,  "id" : 218},{ "name" : "VisualGameObject" ,  "id" : 60},{ "name" : "Powerup" ,  "id" : 58},{ "name" : "LevelEndPost" ,  "id" : 220},{ "name" : "Level" ,  "id" : 222},{ "name" : "RepeatingGameObject" ,  "id" : 224},{ "name" : "Player" ,  "id" : 56},{ "name" : "MainMenu" ,  "id" : 54},{ "name" : "Date" ,  "id" : 51},{ "name" : "ResourceManager" ,  "id" : 49},{ "name" : "ApplicationManager" ,  "id" : 47},{ "name" : "GameObjectManager" ,  "id" : 45}], "variable_info" : [{ "name" : "FPS",  "id" : 62},{ "name" : "SECONDS_BETWEEN_FRAMES",  "id" : 64},{ "name" : "g_GameObjectManager",  "id" : 67},{ "name" : "g_ApplicationManager",  "id" : 90},{ "name" : "g_ResourceManager",  "id" : 73},{ "name" : "g_score",  "id" : 81},{ "name" : "g_player",  "id" : 85}]}